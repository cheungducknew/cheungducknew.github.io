<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo之tag-cloud</title>
    <url>/posts/f1394641/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ol>
<li><p><strong><code>hexo-tag-cloud</code>插件介绍</strong></p>
<blockquote>
<p><code>hexo-tag-cloud</code>插件是一个Hexo博客的标签云插件，能够美观优雅得展示标签</p>
<p>插件说明：<a href="https://github.com/MikeCoder/hexo-tag-cloud/blob/master/README.ZH.md" target="_blank" rel="noopener">https://github.com/MikeCoder/hexo-tag-cloud/blob/master/README.ZH.md</a></p>
</blockquote>
</li>
<li><p><strong>安装插件</strong></p>
<p><code>npm install hexo-tag-cloud@^2.0.* --save</code></p>
</li>
<li><p><strong>配置插件</strong>(Next主题)</p>
<ol>
<li><p><strong>侧边栏</strong></p>
<p>找到<code>blog/theme/next/layout/_macro/sidebar.swig</code>文件，添加如下代码:</p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0904-1.jpg" alt="0904-1"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- tag-cloud --&gt;</span><br><span class="line">&#123;% if site.tags.length &gt; 1 %&#125;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot; src&#x3D;&quot;&#x2F;js&#x2F;tagcloud.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot; src&#x3D;&quot;&#x2F;js&#x2F;tagcanvas.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;widget-wrap&quot;&gt;</span><br><span class="line">    &lt;h3 class&#x3D;&quot;widget-title&quot;&gt;Tag Cloud&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;myCanvasContainer&quot; class&#x3D;&quot;widget tagcloud&quot;&gt;</span><br><span class="line">        &lt;canvas width&#x3D;&quot;250&quot; height&#x3D;&quot;250&quot; id&#x3D;&quot;resCanvas&quot; style&#x3D;&quot;width&#x3D;100%&quot;&gt;</span><br><span class="line">            &#123;&#123; list_tags() &#125;&#125;</span><br><span class="line">        &lt;&#x2F;canvas&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>然后<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>就可以查看啦~</p>
</li>
</ol>
</li>
</ol>
<pre><code>**效果:**



![0904-2](https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0904-2.jpg)</code></pre><ol start="2">
<li><p><strong>tags页</strong></p>
<p>在tags页中显示标签云，则找到<code>blog/theme/next/layout/page.swig</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;tag-cloud-tags&quot;&gt;</span><br><span class="line">           &#123;&#123; tagcloud(&#123;min_font: 12, max_font: 30, amount: 300, color: true, start_color: &#39;#ccc&#39;, end_color: &#39;#111&#39;&#125;) &#125;&#125;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>在这段代码之前（或之后），添加下述代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- tag-cloud --&gt;</span><br><span class="line">&#123;% if site.tags.length &gt; 1 %&#125;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot; src&#x3D;&quot;&#x2F;js&#x2F;tagcloud.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot; src&#x3D;&quot;&#x2F;js&#x2F;tagcanvas.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;widget-wrap&quot;&gt;</span><br><span class="line">    &lt;h3 class&#x3D;&quot;widget-title&quot;&gt;Tag Cloud&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;myCanvasContainer&quot; class&#x3D;&quot;widget tagcloud&quot;&gt;</span><br><span class="line">        &lt;canvas width&#x3D;&quot;250&quot; height&#x3D;&quot;250&quot; id&#x3D;&quot;resCanvas&quot; style&#x3D;&quot;width&#x3D;100%&quot;&gt;</span><br><span class="line">         &#123;&#123; list_tags() &#125;&#125;</span><br><span class="line">        &lt;&#x2F;canvas&gt;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<pre><code>**效果:**



![0904-3](https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0904-3.jpg)</code></pre>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习记录</title>
    <url>/posts/2feb7528/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><blockquote>
<p>循序渐进地介绍 Git 主要命令</p>
</blockquote>
<ol>
<li><p><code>Git Commit</code></p>
<blockquote>
<ul>
<li><p>Git 仓库中的提交记录保存的是你的目录下所有文件的快照，就像是把整个目录复制，然后再粘贴一样，但比复制粘贴优雅许多！</p>
</li>
<li><p>Git 希望提交记录尽可能地轻量，因此在你每次进行提交时，它并不会盲目地复制整个目录。条件允许的情况下，它会将当前版本与仓库中的上一个版本进行对比，并把所有的差异打包到一起作为一个提交记录。</p>
</li>
<li><p>Git 还保存了提交的历史记录。这也是为什么大多数提交记录的上面都有父节点的原因 —— 我们会在图示中用箭头来表示这种关系。对于项目组的成员来说，维护提交历史对大家都有好处。</p>
</li>
</ul>
</blockquote>
</li>
<li><p><code>Git Branch</code></p>
<blockquote>
<ul>
<li>Git 的分支也非常轻量。它们只是简单地指向某个提交纪录 —— 仅此而已。所以许多 Git 爱好者传颂：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;* 早建分支！多用分支！</span><br></pre></td></tr></table></figure>

<ul>
<li><p>这是因为即使创建再多的分支也不会造成储存或内存上的开销，并且按逻辑分解工作到不同的分支要比维护那些特别臃肿的分支简单多了。</p>
</li>
<li><p>在将分支和提交记录结合起来后，我们会看到两者如何协作。现在只要记住使用分支其实就相当于在说：“我想基于这个提交以及它所有的父提交进行新的工作。”</p>
</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch newImage</span><br><span class="line">git checkout newImage</span><br><span class="line">git checkout -b newImage	# 创建并切换到分支</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Git Merge</code></p>
<blockquote>
<ul>
<li><p>太好了! 我们已经知道如何提交以及如何使用分支了。接下来咱们看看如何将两个分支合并到一起。就是说我们新建一个分支，在其上开发某个新功能，开发完成后再合并回主线。</p>
</li>
<li><p>咱们先来看一下第一种方法 —— <code>git merge</code>。在 Git 中合并两个分支时会产生一个特殊的提交记录，它有两个父节点。翻译成自然语言相当于：“我要把这两个父节点本身及它们所有的祖先都包含进来。”</p>
</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge bugFix</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Git Rebase</code></p>
<blockquote>
<ul>
<li>第二种合并分支的方法是 <code>git rebase</code>。Rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。</li>
<li>Rebase 的优势就是可以创造更线性的提交历史，这听上去有些难以理解。如果只允许使用 Rebase 的话，代码库的提交历史将会变得异常清晰。</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rebase main</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，提交记录 C3 依然存在（树上那个半透明的节点），而 C3’ 是我们 Rebase 到 main 分支上的 C3 的副本。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rebase bugFix</span><br></pre></td></tr></table></figure>

<blockquote>
<p>好了！由于 <code>bugFix</code> 继承自 <code>main</code>，所以 Git 只是简单的把 <code>main</code> 分支的引用向前移动了一下而已。</p>
</blockquote>
</li>
</ol>
<h1 id="高级篇"><a href="#高级篇" class="headerlink" title="高级篇"></a>高级篇</h1><blockquote>
<p>要开始介绍 Git 的超棒特性了，快来吧！</p>
</blockquote>
<ol>
<li><p><strong>分离HEAD</strong></p>
<blockquote>
<ul>
<li>HEAD 是一个对当前检出记录的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录。</li>
<li>HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。</li>
<li>HEAD 通常情况下是指向分支名的（如 bugFix）。在你提交时，改变了 bugFix 的状态，这一变化通过 HEAD 变得可见。</li>
</ul>
</blockquote>
<blockquote>
<p>如果想看 HEAD 指向，可以通过 <code>cat .git/HEAD</code> 查看， 如果 HEAD 指向的是一个引用，还可以用 <code>git symbolic-ref HEAD</code> 查看它的指向。</p>
</blockquote>
<blockquote>
<p>分离的 HEAD 就是让其指向了某个具体的<strong>提交记录</strong>而不是<strong>分支名</strong>。在命令执行之前的状态如下所示</p>
<p>HEAD -&gt; main -&gt; C1:  HEAD 指向 main， main 指向 C1</p>
<p><code>git checkout C1</code></p>
<p>现在变成了: HEAD -&gt; C1</p>
</blockquote>
</li>
</ol>
<ol start="2">
<li><p><strong>相对引用(^)</strong></p>
<blockquote>
<p>通过指定提交记录哈希值的方式在 Git 中移动不太方便。在实际应用时，并没有像本程序中这么漂亮的可视化提交树供你参考，所以你就不得不用 <code>git log</code> 来查查看提交记录的哈希值。</p>
</blockquote>
<blockquote>
<ul>
<li>使用 <code>^</code> 向上移动 1 个提交记录，<code>main^</code> 相当于<code>main</code> 的父节点</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout c3;git checkout HEAD^</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p><strong>相对引用2(~)</strong></p>
<blockquote>
<p>使用 <code>~&lt;num&gt;</code> 向上移动多个提交记录，如 <code>~3</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout HEAD~4</span><br></pre></td></tr></table></figure>

<p><strong>强制修改分支位置</strong></p>
<blockquote>
<p>我使用相对引用最多的就是移动分支。可以直接使用 <code>-f</code> 选项让分支指向另一个提交。例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;git branch -f main HEAD~3</span><br></pre></td></tr></table></figure>

<p>上面的命令会将 main 分支强制指向 HEAD 的第 3 级父提交。</p>
</blockquote>
</li>
<li><p><strong>撤销变更</strong></p>
<blockquote>
<ul>
<li>在 Git 里撤销变更的方法很多。和提交一样，撤销变更由底层部分（暂存区的独立文件或者片段）和上层部分（变更到底是通过哪种方式被撤销的）组成。我们这个应用主要关注的是后者。</li>
<li>主要有两种方法用来撤销变更 —— 一是 <code>git reset</code>，还有就是 <code>git revert</code>。接下来咱们逐个进行讲解。</li>
</ul>
</blockquote>
<ol>
<li><p><code>git reset</code></p>
<blockquote>
<p><code>git reset</code> 通过把分支记录回退几个提交记录来实现撤销改动。你可以将这想象成“改写历史”。<code>git reset</code> 向上移动分支，原来指向的提交记录就跟从来没有提交过一样。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset HEAD~1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在reset后， <code>C2</code> 所做的变更还在，但是处于未加入暂存区状态。</p>
</blockquote>
</li>
<li><p><code>git revert</code></p>
<blockquote>
<ul>
<li>虽然在你的本地分支中使用 <code>git reset</code> 很方便，但是这种“改写历史”的方法对大家一起使用的远程分支是无效的哦！</li>
<li>为了撤销更改并<strong>分享</strong>给别人，我们需要使用 <code>git revert</code></li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git revert HEAD</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>奇怪！在我们要撤销的提交记录后面居然多了一个新提交！这是因为新提交记录 <code>C2&#39;</code> 引入了<strong>更改</strong> —— 这些更改刚好是用来撤销 <code>C2</code> 这个提交的。也就是说 <code>C2&#39;</code> 的状态与 <code>C1</code> 是相同的。</li>
<li>revert 之后就可以把你的更改推送到远程仓库与别人分享啦。</li>
<li>记得revert之后再<code>git branch -f pushed HEAD</code></li>
</ul>
</blockquote>
</li>
</ol>
</li>
</ol>
<h1 id="移动提交记录"><a href="#移动提交记录" class="headerlink" title="移动提交记录"></a>移动提交记录</h1><blockquote>
<p>自由修改提交树</p>
</blockquote>
<ol>
<li><p><strong>Git Cherry-pick</strong></p>
<blockquote>
<ul>
<li><code>git cherry-pick &lt;提交号&gt;...</code></li>
</ul>
<p>如果你想将一些提交复制到当前所在的位置（<code>HEAD</code>）下面的话， Cherry-pick 是最直接的方式了。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git cherry-pick C2 C4</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们只需要提交记录 <code>C2</code> 和 <code>C4</code>，所以 Git 就将被它们抓过来放到当前分支下了。 就是这么简单!</p>
</blockquote>
</li>
<li><p><strong>交互式 rebase</strong></p>
<blockquote>
<ul>
<li>当你知道你所需要的提交记录（<strong>并且</strong>还知道这些提交记录的哈希值）时, 用 cherry-pick 再好不过了 —— 没有比这更简单的方式了。</li>
<li>但是如果你不清楚你想要的提交记录的哈希值呢? 幸好 Git 帮你想到了这一点, 我们可以利用交互式的 rebase —— 如果你想从一系列的提交记录中找到想要的记录, 这就是最好的方法了</li>
</ul>
</blockquote>
<p>交互式 rebase 指的是使用带参数 <code>--interactive</code> 的 rebase 命令, 简写为 <code>-i</code></p>
<p>如果你在命令后增加了这个选项, Git 会打开一个 UI 界面并列出将要被复制到目标分支的备选提交记录，它还会显示每个提交记录的哈希值和提交说明，提交说明有助于你理解这个提交进行了哪些更改。</p>
<p>当 rebase UI界面打开时, 你能做3件事:</p>
<ul>
<li>调整提交记录的顺序（通过鼠标拖放来完成）</li>
<li>删除你不想要的提交（通过切换 <code>pick</code> 的状态来完成，关闭就意味着你不想要这个提交记录）</li>
<li>合并提交。 它允许你把多个提交记录合并成一个。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~4</span><br></pre></td></tr></table></figure>







</li>
</ol>
<h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><blockquote>
<p>Git 技术、技巧与贴士大集合</p>
</blockquote>
<ol>
<li><p><strong>只取一个提交记录</strong></p>
<blockquote>
<ul>
<li><code>git rebase -i</code></li>
<li><code>git cherry-pick</code></li>
</ul>
<p>以便排除那些调试提交</p>
</blockquote>
</li>
<li><p><strong>提交的技巧 #1</strong></p>
</li>
<li><p><strong>提交的技巧 #2</strong></p>
</li>
<li><p><strong>Git Tag</strong></p>
</li>
<li><p><strong>Git Describe</strong></p>
</li>
</ol>
<h1 id="高级话题"><a href="#高级话题" class="headerlink" title="高级话题"></a>高级话题</h1><blockquote>
<p>只为真正的勇士！</p>
</blockquote>
<ol>
<li><strong>多次 Rebase</strong></li>
<li><strong>两个父节点</strong></li>
<li><strong>纠缠不清的分支</strong></li>
</ol>
<h1 id="Push-amp-Pull-——-Git-远程仓库！"><a href="#Push-amp-Pull-——-Git-远程仓库！" class="headerlink" title="Push &amp; Pull —— Git 远程仓库！"></a>Push &amp; Pull —— Git 远程仓库！</h1><blockquote>
<p>是时候分享你的代码了，让编码变得社交化吧</p>
</blockquote>
<ol>
<li><p><strong>Git Clone</strong></p>
<blockquote>
<p>在<strong>本地</strong>创建一个远程仓库的拷贝（比如从 github.com）</p>
</blockquote>
</li>
<li><p><strong>远程分支</strong></p>
<blockquote>
<ul>
<li>你可能注意到的第一个事就是在我们的本地仓库多了一个名为 <code>o/main</code> 的分支, 这种类型的分支就叫<strong>远程</strong>分支。由于远程分支的特性导致其拥有一些特殊属性。</li>
<li>远程分支反映了远程仓库(在你上次和它通信时)的<strong>状态</strong>。这会有助于你理解本地的工作与公共工作的差别 —— 这是你与别人分享工作成果前至关重要的一步.</li>
<li>远程分支有一个特别的属性，在你检出时自动进入分离 HEAD 状态。Git 这么做是出于不能直接在这些分支上进行操作的原因, 你必须在别的地方完成你的工作, （更新了远程分支之后）再用远程分享你的工作成果。</li>
</ul>
</blockquote>
<p><strong>为什么有 <code>o/</code>？</strong></p>
<blockquote>
<p>你可能想问这些远程分支的前面的 <code>o/</code> 是什么意思呢？好吧, 远程分支有一个命名规范 —— 它们的格式是:</p>
<ul>
<li><code>&lt;remote name&gt;/&lt;branch name&gt;</code></li>
</ul>
<p>因此，如果你看到一个名为 <code>o/main</code> 的分支，那么这个分支就叫 <code>main</code>，远程仓库的名称就是 <code>o</code>。</p>
<p>大多数的开发人员会将它们主要的远程仓库命名为 <code>origin</code>，并不是 <code>o</code>。这是因为当你用 <code>git clone</code> 某个仓库时，Git 已经帮你把远程仓库的名称设置为 <code>origin</code> 了</p>
<p>不过 <code>origin</code> 对于我们的 UI 来说太长了，因此不得不使用简写 <code>o</code> :) 但是要记住, 当你使用真正的 Git 时, 你的远程仓库默认为 <code>origin</code>!</p>
</blockquote>
<p><strong>如果检出远程分支会怎么样呢？</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout o&#x2F;main;git commit</span><br></pre></td></tr></table></figure>

<blockquote>
<p>正如你所见，Git 变成了分离 HEAD 状态，当添加新的提交时 <code>o/main</code> 也不会更新。这是因为 <code>o/main</code> 只有在远程仓库中相应的分支更新了以后才会更新。</p>
</blockquote>
<p><strong>关卡答案：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit</span><br><span class="line">git checkout o&#x2F;main;git commit</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p><strong>Git Fetch</strong></p>
<blockquote>
<p>当我们从远程仓库获取数据时, 远程分支也会更新以反映最新的远程仓库</p>
</blockquote>
<blockquote>
<p><strong>git fetch 做了些什么?</strong></p>
<p><code>git fetch</code> 完成了仅有的但是很重要的两步:</p>
<ul>
<li>从远程仓库下载本地仓库中缺失的提交记录</li>
<li>更新远程分支指针(如 <code>o/main</code>)</li>
</ul>
<p><code>git fetch</code> 实际上将本地仓库中的远程分支更新成了远程仓库相应分支最新的状态。</p>
</blockquote>
<blockquote>
<p><strong>git fetch 不会做的事</strong></p>
<p><code>git fetch</code> 并不会改变你本地仓库的状态。它不会更新你的 <code>main</code> 分支，也不会修改你磁盘上的文件。</p>
<p>理解这一点很重要，因为许多开发人员误以为执行了 <code>git fetch</code> 以后，他们本地仓库就与远程仓库同步了。它可能已经将进行这一操作所需的所有数据都下载了下来，但是<strong>并没有</strong>修改你本地的文件。我们在后面的课程中将会讲解能完成该操作的命令 :D</p>
<p>所以, 你可以将 <code>git fetch</code> 的理解为单纯的<strong>下载</strong>操作。</p>
</blockquote>
</li>
</ol>
<ol start="4">
<li><p><strong>Git Pull</strong></p>
<blockquote>
<p>其实有很多方法的 —— 当远程分支中有新的提交时，你可以像合并本地分支那样来合并远程分支。也就是说就是你可以执行以下命令:</p>
<ul>
<li><code>git cherry-pick o/main</code></li>
<li><code>git rebase o/main</code></li>
<li><code>git merge o/main</code></li>
<li>等等</li>
</ul>
<p>实际上，由于先抓取更新再合并到本地分支这个流程很常用，因此 Git 提供了一个专门的命令来完成这两个操作。它就是我们要讲的 <code>git pull</code>。</p>
</blockquote>
<p> <code>git pull</code> 可以看作<code>git fetch</code>和<code>git merge</code>的缩写！</p>
</li>
</ol>
<ol start="5">
<li><p><strong>Git Push</strong></p>
<blockquote>
<p><em>注意 —— <code>git push</code> 不带任何参数时的行为与 Git 的一个名为 <code>push.default</code> 的配置有关。它的默认值取决于你正使用的 Git 的版本</em></p>
</blockquote>
<p><code>git push</code></p>
<blockquote>
<p>远程仓库接收了 <code>C2</code>，远程仓库中的 <code>main</code> 分支也被更新到指向 <code>C2</code> 了，我们的远程分支 (o/main) 也同样被更新了。所有的分支都同步了！</p>
</blockquote>
</li>
</ol>
<ol start="6">
<li><p><strong>偏离的提交历史</strong></p>
<blockquote>
<p>假设你周一克隆了一个仓库，然后开始研发某个新功能。到周五时，你新功能开发测试完毕，可以发布了。但是 —— 天啊！你的同事这周写了一堆代码，还改了许多你的功能中使用的 API，这些变动会导致你新开发的功能变得不可用。但是他们已经将那些提交推送到远程仓库了，因此你的工作就变成了基于项目<strong>旧版</strong>的代码，与远程仓库最新的代码不匹配了。</p>
<p>这种情况下, <code>git push</code> 就不知道该如何操作了。如果你执行 <code>git push</code>，Git 应该让远程仓库回到星期一那天的状态吗？还是直接在新代码的基础上添加你的代码，亦或由于你的提交已经过时而直接忽略你的提交？</p>
<p>因为这情况（历史偏离）有许多的不确定性，Git 是不会允许你 <code>push</code> 变更的。实际上它会强制你先合并远程最新的代码，然后才能分享你的工作。</p>
</blockquote>
<p><code>git push</code></p>
<blockquote>
<p>看见了吧？什么都没有变，因为命令失败了！<code>git push</code> 失败是因为你最新提交的 <code>C3</code> 基于远程分支中的 <code>C1</code>。而远程仓库中该分支已经更新到 <code>C2</code> 了，所以 Git 拒绝了你的推送请求。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以利用：</span><br><span class="line">git fetch;git rebase o&#x2F;main;git push</span><br><span class="line">或</span><br><span class="line">git fetch;git merge o&#x2F;main;git push</span><br><span class="line"></span><br><span class="line">建议使用：</span><br><span class="line">git pull --rebase(fetch 和 rebase 的简写);git push</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="7">
<li><p><strong>锁定的Main(Locked Main)</strong></p>
<blockquote>
<p>如果你是在一个大的合作团队中工作, 很可能是main被锁定了, 需要一些Pull Request流程来合并修改。如果你直接提交(commit)到本地main, 然后试图推送(push)修改, 你将会收到这样类似的信息:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;! [远程服务器拒绝] main -&gt; main (TF402455: 不允许推送(push)这个分支; 你必须使用pull request来更新这个分支.)</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>解决办法</strong></p>
<blockquote>
<p>新建一个分支feature, 推送到远程服务器. 然后reset你的main分支和远程服务器保持一致, 否则下次你pull并且他人的提交和你冲突的时候就会有问题.</p>
</blockquote>
<p><strong>关卡答案：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b feature</span><br><span class="line">git push</span><br><span class="line">git branch -f main HEAD~1</span><br></pre></td></tr></table></figure>





</li>
</ol>
<h1 id="关于-origin-和它的周边-——-Git-远程仓库高级操作"><a href="#关于-origin-和它的周边-——-Git-远程仓库高级操作" class="headerlink" title="关于 origin 和它的周边 —— Git 远程仓库高级操作"></a>关于 origin 和它的周边 —— Git 远程仓库高级操作</h1><blockquote>
<p>做一名仁慈的独裁者一定会很有趣……</p>
</blockquote>
<ol>
<li><strong>推送主分支</strong></li>
<li><strong>合并远程仓库</strong></li>
<li><strong>远程追踪</strong></li>
<li><strong>Git push 的参数</strong></li>
<li><strong>Git push 的参数 2</strong></li>
<li><strong>Git fetch 的参数</strong></li>
<li><strong>没有 source 的 source</strong></li>
<li><strong>Git pull 的参数</strong></li>
</ol>
<details>
    <summary><B>Git在线练习网站</B></summary>
    https://learngitbranching.js.org/
</details>


]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>纸上和网上写作</title>
    <url>/posts/e132a0fa/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>emmm…在高中的时候，我就不怎么喜欢在网上阅读和写作。</p>
<p>想了想，可能是因为在网上写的时候，错了可以改，有大段的文字可以复制，而且很多要写的东西又有字数要求。所以我就想着先动笔，虽然对总体架构还不清楚，但还是先写着，想到什么写什么，查到什么就复制什么，结果就是大半天都不能完工。</p>
<p>在纸上写的时候，我就会先列好提纲，先想好怎么写。因为写上之后就不会修改，所以就会务求先有胸臆，后再下笔。</p>
<p>说到阅读，我好像发现，现在大学都过了一年了，我分析文章的能力和高中相比就没怎么变化。比如迅速抓到重点的能力和快速记录（记忆)的能力。</p>
<p>写在纸上我又懒得整理，也容易丢。以后就记录在博客上吧，说不定还能和曹天元一样（逃）</p>
<p>date：2020.5.16 19：28</p>
]]></content>
      <categories>
        <category>essay</category>
      </categories>
      <tags>
        <tag>essay</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next主题 修锅记</title>
    <url>/posts/1713f5dd/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="修锅"><a href="#修锅" class="headerlink" title="修锅~"></a>修锅~</h1><h2 id="1、日志页面异常"><a href="#1、日志页面异常" class="headerlink" title="1、日志页面异常"></a><strong>1、日志页面异常</strong></h2><p><strong>问题描述：</strong></p>
<blockquote>
<p>使用了Hexo的Next主题后，点击左侧菜单栏中的 <em>日志</em>  标签，显示</p>
<p><code>404 File not found</code></p>
</blockquote>
<p><strong>解决过程：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">审查元素查看对应标签，发现日志显示href&#x3D;&quot;&#x2F;archives&#x2F;%7C%7C%20archive&quot;</span><br><span class="line"></span><br><span class="line">而功能正常的分类、标签显示</span><br><span class="line"></span><br><span class="line">href&#x3D;&quot;&#x2F;categories&#x2F;index.html&quot;、href&#x3D;&quot;&#x2F;tags&#x2F;index.html&quot;</span><br><span class="line"></span><br><span class="line">来到文件themes&#x2F;next&#x2F;layout&#x2F;_macro&#x2F;sidebar.swig中</span><br><span class="line"></span><br><span class="line">注释掉</span><br><span class="line"></span><br><span class="line">&lt;a href&#x3D;&quot;&#123;&#123; url_for(theme.menu.archives).split(&#39;||&#39;)[0] | trim &#125;&#125;&quot;&gt; </span><br><span class="line"></span><br><span class="line">并在原位置添加</span><br><span class="line"></span><br><span class="line">&lt;a href&#x3D;&quot;&#123;&#123;url_for(theme.menu.archives.split(&#39;||&#39;)[0])| trim&#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><strong>问题解决！！！</strong></p>
<h1 id="补锅"><a href="#补锅" class="headerlink" title="补锅~"></a>补锅~</h1><ol>
<li>增加侧边栏头像，以及圆角化、旋转效果</li>
<li>文章摘要（auto_excerpt)</li>
<li>社交图标（social）</li>
<li>favicon</li>
<li>友链（links）</li>
<li>文章更新时间（updated_at)</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo_博客管理</title>
    <url>/posts/41e9bd6c/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Hexo-命令"><a href="#Hexo-命令" class="headerlink" title="Hexo 命令"></a>Hexo 命令</h1><ul>
<li><p>hexo clean</p>
</li>
<li><p>hexo n : new</p>
</li>
<li><p>hexo g : generate</p>
</li>
<li><p>hexo s : server</p>
<blockquote>
<p>localhost:4000/</p>
</blockquote>
</li>
<li><p>hexo d : deploy</p>
</li>
<li><p>hexo init : initialize</p>
</li>
<li><p>hexo version</p>
</li>
</ul>
<h1 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h1><ul>
<li><p>node_modules: 依赖包</p>
</li>
<li><p>public：存放生成的页面，运行 hexo g 便会生成，而 hexo clean 便会删除</p>
</li>
<li><p>scaffolds：生成文章的一些模板</p>
</li>
<li><p>source：用来存放你的文章</p>
</li>
<li><p>themes：主题</p>
</li>
<li><p>_config.yml: 配置文件</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+GitHub搭建博客</title>
    <url>/posts/ccbc0313/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>有时间再慢慢更新</p>
</blockquote>
<ol>
<li><p>软件</p>
<ol>
<li>Node.js</li>
<li>Git</li>
</ol>
</li>
<li><p>设置</p>
<ol>
<li>Github</li>
<li>SSH</li>
</ol>
</li>
<li><p>搭建</p>
<ol>
<li>Hexo</li>
<li>theme-next</li>
</ol>
</li>
<li><p>完成</p>
<ol>
<li>iframe-背景音乐</li>
<li>aplayer、dplayer:失败</li>
<li>点击显示字体</li>
<li>background_pic</li>
<li>lived2d:shizuku</li>
<li>背景线条</li>
<li>换源：淘宝<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看自己当前的镜像:npm get registry,</span><br><span class="line">然后切换为原来的镜像:npm config set registry https:&#x2F;&#x2F;registry.npmjs.org&#x2F;,</span><br></pre></td></tr></table></figure></li>
<li>运行时间</li>
<li>访问量统计：不蒜子，分uv、pv;localhost访问量异常是正常的</li>
<li>取消powered by hexo</li>
<li>离开标题恶搞</li>
<li>注释next-config文件</li>
<li>板块位置、大小、透明度：弄了一半</li>
<li>搜索</li>
<li>字数统计</li>
<li>雪花特效</li>
<li>显示当前浏览进度</li>
<li>创建标签页</li>
<li>设置文章默认格式1：tag、categories、date</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之优化文章链接</title>
    <url>/posts/fb91dbe9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="利用Hexo-abbrlink生成唯一永久文章链接"><a href="#利用Hexo-abbrlink生成唯一永久文章链接" class="headerlink" title="利用Hexo-abbrlink生成唯一永久文章链接"></a>利用Hexo-abbrlink生成唯一永久文章链接</h1><blockquote>
<p>官方文档: <a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">https://github.com/rozbo/hexo-abbrlink</a></p>
</blockquote>
<p>在博客生成版权信息时，链接中的中文总会变成乱码，非常影响观感;</p>
<p>同时，博客文章的url也是按照<code>year/:month/:day/:title/</code>的格式生成，过于冗长，为了SEO优化，我们也应该使用<code>Hexo-abbrlink</code>插件。</p>
<h1 id="使用Hexo-abbrlink插件"><a href="#使用Hexo-abbrlink插件" class="headerlink" title="使用Hexo-abbrlink插件"></a>使用Hexo-abbrlink插件</h1><ol>
<li><p><code>npm install hexo-abbrlink --save</code></p>
</li>
<li><p>修改博客根目录配置文件<code>_config.yml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</span><br><span class="line">permalink: posts&#x2F;:abbrlink&#x2F;</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>即可查看</p>
<blockquote>
<p>一定要先<code>hexo clean</code></p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之SEO优化</title>
    <url>/posts/d8eec3ea/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>SEO优化，即<code>Search Engine Optimization</code>，可以为我们带来流量，让我们的站点对搜索引擎更加友好</p>
</blockquote>
<h1 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h1><blockquote>
<p>可以在百度搜索中输入<code>site:&lt;域名&gt;</code>，如果显示”很抱歉，没有找到……”，说明站点没有被收录</p>
</blockquote>
<p><strong>1. 购买域名</strong></p>
<blockquote>
<p>因为github不允许百度spider爬取github内容的(见<strong>robots协议</strong>：<a href="https://github.com/robots.txt)，所以如果想让你的站点被百度收录，只能使用自己的域名" target="_blank" rel="noopener">https://github.com/robots.txt)，所以如果想让你的站点被百度收录，只能使用自己的域名</a> </p>
</blockquote>
<p><strong>2.验证网站所有权</strong></p>
<blockquote>
<ul>
<li>登录百度站长平台：<a href="http://zhanzhang.baidu.com" target="_blank" rel="noopener">http://zhanzhang.baidu.com</a></li>
<li>添加网站</li>
<li>验证网站<ul>
<li>文件验证</li>
<li>HTML验证</li>
<li>CNAME验证</li>
</ul>
</li>
</ul>
</blockquote>
<p>这里我选择了最简单的<strong>CNAME验证</strong>，只需要回到我们的<strong>域名</strong>管理系统，添加一条解析即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0901-6.png" alt="0901-5"></p>
<p><strong>3. 安装sitemap插件</strong></p>
<blockquote>
<p>这里有个<strong>细节</strong>：代码需要在 hexo博客目录下的dos命令行中运行</p>
<p>确认是否成功下载，可以查看<code>blog\node_modules</code>文件夹下是否存在</p>
<ul>
<li>hexo-generator-baidu-sitemap</li>
<li>hexo-generator-sitemap</li>
</ul>
<p>这两个文件夹</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save # 通用搜索引擎 </span><br><span class="line">npm install hexo-generator-baidu-sitemap --save # 百度搜索引擎</span><br></pre></td></tr></table></figure>



<p><strong>4. 修改博客配置文件(不是主题配置文件)</strong></p>
<blockquote>
<p>修改<code>url:XXX</code>为你的域名</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># URL</span><br><span class="line">url: http:&#x2F;&#x2F;ducknew.cf&#x2F;</span><br><span class="line">root: &#x2F;</span><br><span class="line">permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure>

<blockquote>
<p>添加下述代码块（注意缩进不能少）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure>



<p>*<em>5.生成站点地图文件 *</em></p>
<p><code>hexo g</code></p>
<p>如果<code>blog\public</code>文件夹下存在</p>
<ol>
<li>baidusitemap.xml</li>
<li>sitemap.xml</li>
</ol>
<p>这两个文件，说明生成成功</p>
<p><strong>6.设置自动推送</strong></p>
<blockquote>
<p>如果是next主题，在主题配置文件中修改，将baidu_push设置为true：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</span><br><span class="line">baidu_push: true</span><br></pre></td></tr></table></figure>

<blockquote>
<p>然后在<code>blog\themes\next\layout\_scripts</code>文件夹下添加文件<code>baidu_push.swig</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.baidu_push %&#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">(function()&#123;</span><br><span class="line">    var bp &#x3D; document.createElement(&#39;script&#39;);</span><br><span class="line">    var curProtocol &#x3D; window.location.protocol.split(&#39;:&#39;)[0];</span><br><span class="line">    if (curProtocol &#x3D;&#x3D;&#x3D; &#39;https&#39;) &#123;</span><br><span class="line">        bp.src &#x3D; &#39;https:&#x2F;&#x2F;zz.bdstatic.com&#x2F;linksubmit&#x2F;push.js&#39;;        </span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        bp.src &#x3D; &#39;http:&#x2F;&#x2F;push.zhanzhang.baidu.com&#x2F;push.js&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    var s &#x3D; document.getElementsByTagName(&quot;script&quot;)[0];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>



<h1 id="谷歌收录"><a href="#谷歌收录" class="headerlink" title="谷歌收录"></a>谷歌收录</h1><blockquote>
<p>过程和百度收录大同小异</p>
<ul>
<li>登录google站点平台：<a href="https://www.google.com/webmasters/" target="_blank" rel="noopener">https://www.google.com/webmasters/</a></li>
<li>验证站点</li>
<li>提交sitemap</li>
<li>设置推送</li>
</ul>
</blockquote>
<h1 id="360收录"><a href="#360收录" class="headerlink" title="360收录"></a>360收录</h1><blockquote>
<p>2021/09/03更新</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0903-1.png" alt="0903-1"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0903-2.png" alt="0903-2"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之添加友链</title>
    <url>/posts/2214e797/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="添加友链"><a href="#添加友链" class="headerlink" title="添加友链"></a>添加友链</h1><ol>
<li><p><strong>新建 <code>links</code> 页面</strong></p>
<ol>
<li><p><code>hexo new page links</code></p>
</li>
<li><p>修改：<code>/source/links/index.md</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友链</span><br><span class="line">date: 2021-08-22 23:37:48</span><br><span class="line">type: &quot;links&quot;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### 申请要求：</span><br><span class="line"></span><br><span class="line">1. 和本人是好朋友QAQ</span><br><span class="line">2. 网页整洁、无推广</span><br><span class="line">3. 网站内容积极向上</span><br><span class="line"></span><br><span class="line">### 友链声明：</span><br><span class="line"></span><br><span class="line">1. 本站会定期清理无法访问的友链，如果更换了链接信息请及时与本人联系，谢谢合作！</span><br><span class="line">2. 本站会定期查看双方是否互为友链，如果取消本站友链，本站也会将您的友链移除	</span><br><span class="line"></span><br><span class="line">### 申请方式：</span><br><span class="line"></span><br><span class="line">先将本站的友链添加到您的友链，相关信息如下</span><br><span class="line">然后按照以下格式与本人联系，待博主为您添上友链</span><br><span class="line"></span><br><span class="line">&gt;名   称：ducknew</span><br><span class="line">&gt;头像链接：https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;cheungducknew&#x2F;cdn@latest&#x2F;img&#x2F;avatar.jpg</span><br><span class="line">&gt;</span><br><span class="line">&gt;主页链接：https:&#x2F;&#x2F;cheungducknew.github.io&#x2F;</span><br><span class="line">&gt;说明信息：关注我→关注我←关注我</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>添加 <code>title</code>，是为了标题中出现 <code>title</code>，</li>
<li>添加 <code>type</code>，是为了显示友链的对象，不添加不显示</li>
</ul>
</blockquote>
</li>
</ol>
</li>
<li><p><strong>新建 <code>links.swig</code> 文件</strong></p>
<blockquote>
<p>在<code>\themes\next\layout</code>新建<code>links.swig</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &#123;######################&#125;</span><br><span class="line">  &#123;### LINKS BLOCK ###&#125;</span><br><span class="line">  &#123;######################&#125;</span><br><span class="line"></span><br><span class="line">    &lt;div id&#x3D;&quot;links&quot;&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line"></span><br><span class="line">            #links&#123;</span><br><span class="line">               margin-top: 5rem;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .links-content&#123;</span><br><span class="line">                margin-top:1rem;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .link-navigation::after &#123;</span><br><span class="line">                content: &quot; &quot;;</span><br><span class="line">                display: block;</span><br><span class="line">                clear: both;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .card &#123;</span><br><span class="line">                width: 300px;</span><br><span class="line">                font-size: 1rem;</span><br><span class="line">                padding: 10px 20px;</span><br><span class="line">                border-radius: 4px;</span><br><span class="line">                transition-duration: 0.15s;</span><br><span class="line">                margin-bottom: 1rem;</span><br><span class="line">                display:flex;</span><br><span class="line">            &#125;</span><br><span class="line">            .card:nth-child(odd) &#123;</span><br><span class="line">                float: left;</span><br><span class="line">            &#125;</span><br><span class="line">            .card:nth-child(even) &#123;</span><br><span class="line">                float: right;</span><br><span class="line">            &#125;</span><br><span class="line">            .card:hover &#123;</span><br><span class="line">                transform: scale(1.1);</span><br><span class="line">                box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.12), 0 0 6px 0 rgba(0, 0, 0, 0.04);</span><br><span class="line">            &#125;</span><br><span class="line">            .card a &#123;</span><br><span class="line">                border:none;</span><br><span class="line">            &#125;</span><br><span class="line">            .card .ava &#123;</span><br><span class="line">                width: 3rem!important;</span><br><span class="line">                height: 3rem!important;</span><br><span class="line">                margin:0!important;</span><br><span class="line">                margin-right: 1em!important;</span><br><span class="line">                border-radius:4px;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            .card .card-header &#123;</span><br><span class="line">                font-style: italic;</span><br><span class="line">                overflow: hidden;</span><br><span class="line">                width: 236px;</span><br><span class="line">            &#125;</span><br><span class="line">            .card .card-header a &#123;</span><br><span class="line">                font-style: normal;</span><br><span class="line">                color: #2bbc8a;</span><br><span class="line">                font-weight: bold;</span><br><span class="line">                text-decoration: none;</span><br><span class="line">            &#125;</span><br><span class="line">            .card .card-header a:hover &#123;</span><br><span class="line">                color: #d480aa;</span><br><span class="line">                text-decoration: none;</span><br><span class="line">            &#125;</span><br><span class="line">            .card .card-header .info &#123;</span><br><span class="line">                font-style:normal;</span><br><span class="line">                color:#a3a3a3;</span><br><span class="line">                font-size:14px;</span><br><span class="line">                min-width: 0;</span><br><span class="line">                text-overflow: ellipsis;</span><br><span class="line">                overflow: hidden;</span><br><span class="line">                white-space: nowrap;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;&#x2F;style&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;links-content&quot;&gt;</span><br><span class="line"></span><br><span class="line">             &lt;div class&#x3D;&quot;no-icon note warning&quot;&gt;&lt;div class&#x3D;&quot;link-info&quot;&gt;👨‍🎓 大佬们~ &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;link-navigation&quot;&gt;</span><br><span class="line">                    &#123;% for link in theme.defaultlinks %&#125;</span><br><span class="line"></span><br><span class="line">                    &lt;div class&#x3D;&quot;card&quot;&gt;</span><br><span class="line">                        &lt;img class&#x3D;&quot;ava nofancybox&quot; src&#x3D;&quot;&#123;&#123; link.avatar &#125;&#125;&quot;&#x2F;&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;card-header&quot;&gt;</span><br><span class="line">                        &lt;div&gt;&lt;a href&#x3D;&quot;&#123;&#123; link.site &#125;&#125;&quot; target&#x3D;&quot;_blank&quot;&gt; &#123;&#123; link.nickname &#125;&#125;&lt;&#x2F;a&gt; &lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;info&quot;&gt;&#123;&#123; link.info &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class&#x3D;&quot;no-icon note primary&quot;&gt;&lt;div class&#x3D;&quot;link-info&quot;&gt;🍭 好朋友们~&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">             &lt;div class&#x3D;&quot;link-navigation&quot;&gt;</span><br><span class="line">                    &#123;% for link in theme.friendslinks %&#125;</span><br><span class="line"></span><br><span class="line">                    &lt;div class&#x3D;&quot;card&quot;&gt;</span><br><span class="line">                        &lt;img class&#x3D;&quot;ava nofancybox&quot; src&#x3D;&quot;&#123;&#123; link.avatar &#125;&#125;&quot;&#x2F;&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;card-header&quot;&gt;</span><br><span class="line">                        &lt;div&gt;&lt;a href&#x3D;&quot;&#123;&#123; link.site &#125;&#125;&quot; target&#x3D;&quot;_blank&quot;&gt; &#123;&#123; link.nickname &#125;&#125;&lt;&#x2F;a&gt; &lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;info&quot;&gt;&#123;&#123; link.info &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">            &#123;&#123; page.content &#125;&#125;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &#123;##########################&#125;</span><br><span class="line">  &#123;### END LINKS BLOCK ###&#125;</span><br><span class="line">  &#123;##########################&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>修改 <code>page.swig</code> 文件</strong></p>
<blockquote>
<p>修改 <code>/themes/next/layout/page.swig</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#39;_layout.swig&#39; %&#125;</span><br><span class="line">&#123;% import &#39;_macro&#x2F;sidebar.swig&#39; as sidebar_template with context %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">  &#123;%- set page_title_suffix &#x3D; &#39; | &#39; + title %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;%- if page.type &#x3D;&#x3D;&#x3D; &#39;categories&#39; and not page.title %&#125;</span><br><span class="line">    &#123;&#123;- __(&#39;title.category&#39;) + page_title_suffix &#125;&#125;</span><br><span class="line">  &#123;%- elif page.type &#x3D;&#x3D;&#x3D; &#39;tags&#39; and not page.title %&#125;</span><br><span class="line">    &#123;&#123;- __(&#39;title.tag&#39;) + page_title_suffix &#125;&#125;</span><br><span class="line">  &#123;%- elif page.type &#x3D;&#x3D;&#x3D; &#39;schedule&#39; and not page.title %&#125;</span><br><span class="line">    &#123;&#123;- __(&#39;title.schedule&#39;) + page_title_suffix &#125;&#125;</span><br><span class="line">+  &#123;% elif page.type &#x3D;&#x3D;&#x3D; &#39;links&#39; and not page.title %&#125;</span><br><span class="line">+    &#123;&#123; __(&#39;title.links&#39;) + page_title_suffix &#125;&#125;</span><br><span class="line">  &#123;%- else %&#125;</span><br><span class="line">    &#123;&#123;- page.title + page_title_suffix &#125;&#125;</span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block class %&#125;page posts-expand&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;##################&#125;</span><br><span class="line">    &#123;### PAGE BLOCK ###&#125;</span><br><span class="line">    &#123;##################&#125;</span><br><span class="line">    &lt;div class&#x3D;&quot;post-block&quot; lang&#x3D;&quot;&#123;&#123; page.lang or config.language &#125;&#125;&quot;&gt;</span><br><span class="line">      &#123;% include &#39;_partials&#x2F;page&#x2F;page-header.swig&#39; %&#125;</span><br><span class="line">      &#123;#################&#125;</span><br><span class="line">      &#123;### PAGE BODY ###&#125;</span><br><span class="line">      &#123;#################&#125;</span><br><span class="line">      &lt;div class&#x3D;&quot;post-body&#123;%- if page.direction and page.direction.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;rtl&#39; %&#125; rtl&#123;%- endif %&#125;&quot;&gt;</span><br><span class="line">        &#123;%- if page.type &#x3D;&#x3D;&#x3D; &#39;tags&#39; %&#125;</span><br><span class="line">          &lt;div class&#x3D;&quot;tag-cloud&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;tag-cloud-title&quot;&gt;</span><br><span class="line">              &#123;&#123; _p(&#39;counter.tag_cloud&#39;, site.tags.length) &#125;&#125;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;tag-cloud-tags&quot;&gt;</span><br><span class="line">              &#123;&#123; tagcloud(&#123;</span><br><span class="line">                min_font   : theme.tagcloud.min,</span><br><span class="line">                max_font   : theme.tagcloud.max,</span><br><span class="line">                amount     : theme.tagcloud.amount,</span><br><span class="line">                color      : true,</span><br><span class="line">                start_color: theme.tagcloud.start,</span><br><span class="line">                end_color  : theme.tagcloud.end&#125;)</span><br><span class="line">              &#125;&#125;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &#123;% elif page.type &#x3D;&#x3D;&#x3D; &#39;categories&#39; %&#125;</span><br><span class="line">          &lt;div class&#x3D;&quot;category-all-page&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;category-all-title&quot;&gt;</span><br><span class="line">              &#123;&#123; _p(&#39;counter.categories&#39;, site.categories.length) &#125;&#125;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;category-all&quot;&gt;</span><br><span class="line">              &#123;&#123; list_categories() &#125;&#125;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &#123;% elif page.type &#x3D;&#x3D;&#x3D; &#39;schedule&#39; %&#125;</span><br><span class="line">          &lt;div class&#x3D;&quot;event-list&quot;&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">          &#123;% include &#39;_scripts&#x2F;pages&#x2F;schedule.swig&#39; %&#125;</span><br><span class="line">        &#123;% elif page.type &#x3D;&#x3D;&#x3D; &#39;links&#39; %&#125;</span><br><span class="line">          &#123;% include &#39;links.swig&#39; %&#125;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">          &#123;&#123; page.content &#125;&#125;</span><br><span class="line">        &#123;%- endif %&#125;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &#123;#####################&#125;</span><br><span class="line">      &#123;### END PAGE BODY ###&#125;</span><br><span class="line">      &#123;#####################&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &#123;% include &#39;_partials&#x2F;page&#x2F;breadcrumb.swig&#39; %&#125;</span><br><span class="line">    &#123;######################&#125;</span><br><span class="line">    &#123;### END PAGE BLOCK ###&#125;</span><br><span class="line">    &#123;######################&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">  &#123;&#123; sidebar_template.render(true) &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="4">
<li><p><strong>修改<code>_config.yml</code> 文件</strong></p>
<blockquote>
<p>在结尾处添加</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 友情链接</span><br><span class="line">defaultlinks:</span><br><span class="line">  - nickname: XXX     # 昵称</span><br><span class="line">    avatar: http:&#x2F;&#x2F;XXX.png    # 头像地址</span><br><span class="line">    site: https:&#x2F;&#x2F;www.XXX.com #友链地址</span><br><span class="line">    info: XXX</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">friendslinks:</span><br><span class="line">  - nickname: XXX     # 昵称</span><br><span class="line">    avatar: http:&#x2F;&#x2F;XXX.png    # 头像地址</span><br><span class="line">    site: https:&#x2F;&#x2F;www.XXX.com #友链地址</span><br><span class="line">    info: XXX</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h1 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h1><ol>
<li><p><strong>无法对齐</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0904-4.jpg" alt="0904-4"></p>
</li>
</ol>
<p>   <strong>修改<code>links.swig</code>中的<code>.card-width</code></strong></p>
<p>   <img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0904-5.jpg" alt="0904-5"></p>
<p>   <strong>修改后：</strong></p>
<p>   <img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0904-6.jpg" alt="0904-6"></p>
<ol start="2">
<li>其他</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之头像旋转</title>
    <url>/posts/9a5722c0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="头像持续旋转"><a href="#头像持续旋转" class="headerlink" title="头像持续旋转"></a><strong>头像持续旋转</strong></h1><blockquote>
<p>参考:<a href="https://aqingya.cn/articl/471f028e.html" target="_blank" rel="noopener">https://aqingya.cn/articl/471f028e.html</a></p>
</blockquote>
<p>打开<code>\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code></p>
<p><strong>首先定义动画：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> autoRotate &#123;</span><br><span class="line">	<span class="selector-tag">from</span>&#123;&#125;</span><br><span class="line">    <span class="selector-tag">to</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>然后设置动画属性：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">animation-name: 动画的名称</span><br><span class="line">animation-duration: 动画的持续时间</span><br><span class="line">animation-timing-function:动画的线性 linear</span><br><span class="line">animation-iteration-count:动画的播放次数 infinate</span><br><span class="line">animation-play-state: 动画的播放次数 running&#x2F;paused</span><br></pre></td></tr></table></figure>

<p><strong>最后使用动画：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-animation-name</span>: <span class="selector-tag">autoRotate</span>;                <span class="comment">/*动画名称*/</span></span><br><span class="line"><span class="selector-tag">-webkit-animation-timing-function</span>: <span class="selector-tag">linear</span>;   <span class="comment">/*动画执行方式，linear：匀速；ease：先慢再快后慢；ease-in：由慢速开始；ease-out：由慢速结束；ease-in-out：由慢速开始和结束；*/</span></span><br><span class="line"><span class="selector-tag">-webkit-animation-iteration-count</span>: <span class="selector-tag">infinite</span>;      <span class="comment">/*动画播放次数，infinite：一直播放*/</span></span><br><span class="line"><span class="selector-tag">-webkit-animation-duration</span>: 3<span class="selector-class">.2s</span>;                 <span class="comment">/*动画完成时间*/</span></span><br></pre></td></tr></table></figure>

<p>另外，添加<strong>鼠标经过时停止旋转</strong>效果：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* 鼠标经过停止头像旋转 */</span></span><br><span class="line">  <span class="attribute">-webkit-animation-play-state</span>:paused;</span><br><span class="line">  <span class="attribute">animation-play-state</span>:paused;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="头像触碰旋转"><a href="#头像触碰旋转" class="headerlink" title="头像触碰旋转"></a>头像触碰旋转</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* 鼠标经过时头像旋转 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之添加评论系统</title>
    <url>/posts/865ac27f/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="添加评论系统"><a href="#添加评论系统" class="headerlink" title="添加评论系统"></a>添加评论系统</h1><ol>
<li><p><strong>注册 LeanCloud</strong></p>
<blockquote>
<p>注册 <a href="https://console.leancloud.app/register" target="_blank" rel="noopener">LeanCloud 国际版</a>  (国际版会比较方便),注册完之后创建个应用选择开发版</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0907-1.png" alt="0907-1"></p>
</li>
<li><p><strong>找到 AppID 和 AppKey</strong></p>
<blockquote>
<p>进入<strong>应用 -&gt; 设置 -&gt; 应用凭证</strong>，记录 <code>AppID</code> 和 <code>AppKey</code></p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0907-2.png" alt="0907-2"></p>
</li>
<li><p><strong>配置安全域名</strong></p>
<blockquote>
<p>在 <strong>Leancloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名</strong>，添加自己的域名</p>
<p>否则，网页会出现 <code>valine 未经授权的操作，请检查你的AppId和AppKey.</code></p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0907-3.png" alt="0907-3"></p>
</li>
<li><p><strong>安装插件</strong></p>
<blockquote>
<p>next主题用户请跳过这一步骤</p>
</blockquote>
<p><code>npm install next-theme/hexo-next-valine</code></p>
</li>
<li><p><strong>修改主题配置文件</strong></p>
<blockquote>
<p>搜索<code>valine</code>，修改enable、appid、appkey</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid:  xxxxxxxxxxxxxxx</span><br><span class="line">  appkey:  xxxxxxxxxxxxxxx</span><br><span class="line">  notify: false # mail notifier</span><br><span class="line">  verify: false # Verification code</span><br><span class="line">  placeholder: 想要说什么呢~ # comment box placeholder</span><br><span class="line">  avatar: mm # gravatar style</span><br><span class="line">  guest_info: 昵称,邮箱,链接 # custom comment header</span><br><span class="line">  pageSize: 10 # pagination size</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>自定义表情包</strong></p>
<blockquote>
<p>官方:<a href="https://valine.js.org/emoji.html#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95" target="_blank" rel="noopener">https://valine.js.org/emoji.html#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95</a></p>
</blockquote>
</li>
<li><p><strong>自定义评论背景</strong></p>
<blockquote>
<p>打开<code>blog\myblog\themes\next\layout\_partials\footer.swig</code>，添加代码</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 评论框美化 --&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    #comments .veditor&#123;</span><br><span class="line">        min-height: 10rem;</span><br><span class="line">        background-image: url(https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;cheungducknew&#x2F;cdn@latest&#x2F;img&#x2F;util&#x2F;comments_bg.png);</span><br><span class="line">        background-size: contain;</span><br><span class="line">        background-repeat: no-repeat;</span><br><span class="line">        background-position: right;</span><br><span class="line">        background-color: rgba(255,255,255,0);</span><br><span class="line">        resize: none;&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h1 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h1><blockquote>
<p>首先得知道相关文件：</p>
<ul>
<li>主题配置文件<code>_config.yml</code></li>
<li>关键文件：<code>\themes\next\layout\_third-party\comments\valine.swig</code></li>
<li><code>\themes\next\layout\_partials\comments.swig</code></li>
</ul>
</blockquote>
<ol>
<li><p><strong>添加邮箱判断</strong></p>
<p>利用正则判断即可:</p>
<p> <code>const reg = /^[A-Za-z0-9\u4e00-\u9fa5]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/;</code></p>
</li>
<li><p><strong>获取QQ头像</strong></p>
<p>这里给出了一个接口:<a href="http://q1.qlogo.cn/g?b=qq&amp;nk=10001&amp;s=100" target="_blank" rel="noopener">http://q1.qlogo.cn/g?b=qq&amp;nk=10001&amp;s=100</a></p>
<p><code>nk=&lt;你的QQ号&gt;,s=&lt;像素大小&gt;[40,100,……]</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之添加密码访问</title>
    <url>/posts/f8620fc8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h1><p><strong>1. 原理：</strong></p>
<blockquote>
<p>这就要讲到 js 的阻塞机制了，在以往的经验中，当页面中有调用<code>alert();</code>函数的时候，整个页面会停止运行，直到你点击确定之后，页面的中的代码才会继续执行下去。我们这里需要的也是这样一个假象，阻止整个页面的渲染，直到你输入了正确的密码才能让页面继续渲染实际的文章。</p>
</blockquote>
<p><strong>2. 操作：</strong></p>
<p>打开 <code>blog/themes/next/layout/_partials/head.swig</code>, 插上代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">(function()&#123;</span><br><span class="line"> if(&#39;&#123;&#123; page.password  &#125;&#125;&#39;)&#123;</span><br><span class="line"> if (prompt(&#39;请输入文章密码&#39;) !&#x3D;&#x3D; &#39;&#123;&#123; page.password  &#125;&#125;&#39;)&#123;</span><br><span class="line">                 alert(&#39;密码错误！&#39;);</span><br><span class="line">                                 history.back();</span><br><span class="line">                                             </span><br><span class="line"> &#125;</span><br><span class="line">         </span><br><span class="line"> &#125;</span><br><span class="line">     </span><br><span class="line"> &#125;)();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>然后在需要设置密码的文章头添加<code>password:123456</code>即可</p>
<p><strong>3.缺点：</strong></p>
<blockquote>
<ol>
<li><p>可以通过搜索工具查看相关内容</p>
</li>
<li><p>可以通过 <code>curl</code> 命令获得网站的源代码：</p>
<p><code>curl -L www.xxx.com (已加密的文章地址) # 这里的 -L 是解决部分网站 30X 跳转的问题的</code></p>
</li>
</ol>
</blockquote>
<h1 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h1><p>安装<code>hexo-blog-encrypt</code> 插件: <code>npm install hexo-blog-encrypt</code></p>
<p>在配置文件<code>_config.yml</code>中添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Security</span><br><span class="line">##</span><br><span class="line">encrypt:</span><br><span class="line">    enable: true</span><br><span class="line">    default_abstract: 内容已被保护，请输入密码后查看！&lt;&#x2F;br&gt;</span><br><span class="line">    default_message: 请输入密码后查看</span><br><span class="line">    default_template:</span><br><span class="line">                    &lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;jquery&#x2F;1.11.3&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">                    &lt;div id&#x3D;&quot;security&quot;&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;input-container&quot;&gt;</span><br><span class="line">                            &lt;input type&#x3D;&quot;password&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;pass&quot; placeholder&#x3D;&quot; &#123;&#123;message&#125;&#125; &quot; &#x2F;&gt;</span><br><span class="line">                            &lt;label for&#x3D;&quot;pass&quot;&gt; &#123;&#123;message&#125;&#125; &lt;&#x2F;label&gt;</span><br><span class="line">                            &lt;div class&#x3D;&quot;bottom-line&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br><span class="line">                    &lt;div id&#x3D;&quot;encrypt-blog&quot; style&#x3D;&quot;display:none&quot;&gt;</span><br><span class="line">                        &#123;&#123;content&#125;&#125;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>然后在文章头添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">password: 123456</span><br><span class="line">abstract: XXX.</span><br><span class="line">message: XXX.</span><br></pre></td></tr></table></figure>



<h1 id="更新-2021-09-03"><a href="#更新-2021-09-03" class="headerlink" title="更新(2021/09/03)"></a>更新(2021/09/03)</h1><p>使用插件可能无法正常使用，详看issue：<a href="https://github.com/D0n9X1n/hexo-blog-encrypt/issues/114" target="_blank" rel="noopener">https://github.com/D0n9X1n/hexo-blog-encrypt/issues/114</a></p>
<p><strong>现象：</strong>从<strong>本机部署(<code>hexo s</code>)</strong>时可以访问, 但 <code>http</code> 页面 + <code>http/https</code> 的<code>js</code>文件不能访问</p>
<p><strong>原因：</strong>Chrome 强制把所有 <code>http</code> 资源尝试用 <code>https</code> 访问, 如果访问失败, 会明确在控制台提示加载https资源不存在, 然后退化后的http资源再默认禁止</p>
<p><strong>解决方法：</strong>GitHub pages上有强制开启https</p>
<p>另外，关于<code>window.crypto.subtle</code>，请看：<a href="https://stackoverflow.com/questions/46468104/how-to-use-subtlecrypto-in-chrome-window-crypto-subtle-is-undefined" target="_blank" rel="noopener">https://stackoverflow.com/questions/46468104/how-to-use-subtlecrypto-in-chrome-window-crypto-subtle-is-undefined</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之添加robots协议</title>
    <url>/posts/162c4d47/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ol>
<li><p><strong>什么是robots协议</strong></p>
<blockquote>
<ul>
<li>robots.txt是一个纯文本文件，在这个文件中网站管理者可以声明该网站中不想被搜索引擎访问的部分，或者指定搜索引擎只收录指定的内容。</li>
<li>当一个搜索引擎（又称搜索机器人或蜘蛛程序）访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，那么搜索机器人就沿着链接抓取。</li>
</ul>
</blockquote>
</li>
<li><p><strong>robots协议语法</strong></p>
<ol>
<li><p>User-agent</p>
<blockquote>
<p>定义搜索引擎，如</p>
<p>User-agent: *（定义所有搜索引擎）</p>
<p>User-agent: Baiduspider （定义百度搜索引擎，只允许百度蜘蛛爬取）</p>
</blockquote>
</li>
<li><p>Disallow</p>
<blockquote>
<p>用来定义禁止蜘蛛爬取的页面或目录，如</p>
<p>Disallow: /（禁止蜘蛛爬取网站的所有目录 “/“ 表示根目录下）</p>
<p>Disallow: /tags （禁止蜘蛛爬取tags目录）</p>
</blockquote>
</li>
<li><p>Allow</p>
<blockquote>
<p>用来定义允许蜘蛛爬取的页面或子目录，如</p>
<p>Allow: /tags（允许蜘蛛爬取tags目录）</p>
</blockquote>
</li>
<li><p>匹配符 “$”</p>
<blockquote>
<p>匹配URL结尾的字符</p>
</blockquote>
</li>
<li><p>通配符 “*”</p>
<blockquote>
<p>匹配0个或多个任意字符</p>
</blockquote>
</li>
</ol>
</li>
<li><p><strong>添加robots协议</strong></p>
<p>在 <code>source</code> 文件夹下新建 <code>robots.txt</code>，添加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># welcome to : www.ducknew.cf</span><br><span class="line">User-agent: *</span><br><span class="line">Allow: &#x2F;</span><br><span class="line">Allow: &#x2F;archives&#x2F;</span><br><span class="line">Allow: &#x2F;categories&#x2F;</span><br><span class="line">Allow: &#x2F;tags&#x2F;</span><br><span class="line">Allow: &#x2F;about&#x2F;</span><br><span class="line"></span><br><span class="line">Disallow: &#x2F;links&#x2F;</span><br><span class="line"></span><br><span class="line">Sitemap: http:&#x2F;&#x2F;ducknew.cf&#x2F;sitemap.xml</span><br></pre></td></tr></table></figure>





</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown语法</title>
    <url>/posts/730dd3ed/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>真的是纯手打的。。亲手码一遍之后果然熟悉多了</p>
</blockquote>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a><strong>属性</strong></h2><h3 id="软件："><a href="#软件：" class="headerlink" title="软件："></a><em>软件：</em></h3><ul>
<li>vs code</li>
<li>typora</li>
</ul>
<h3 id="VSC插件：-extension"><a href="#VSC插件：-extension" class="headerlink" title="VSC插件：(extension)"></a><em>VSC插件：(extension)</em></h3><p>1.markdown all in one</p>
<p>2.markdown preview enhanced</p>
<p>3.markdown+math</p>
<p>4.chinese</p>
<p>5.swig(.tpl)</p>
<h3 id="语言："><a href="#语言：" class="headerlink" title="语言："></a><em>语言：</em></h3><p>markdown</p>
<hr>
<h2 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a><strong>markdown语法</strong></h2><h3 id="文字-↓↓↓"><a href="#文字-↓↓↓" class="headerlink" title="文字 ↓↓↓"></a><em>文字 ↓↓↓</em></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 标题</span><br><span class="line"></span><br><span class="line">## 二级标题</span><br><span class="line"></span><br><span class="line">###### 六级标题</span><br><span class="line"></span><br><span class="line"> *斜体*</span><br><span class="line"></span><br><span class="line">**加粗**</span><br><span class="line"></span><br><span class="line">***斜体加粗***</span><br><span class="line"></span><br><span class="line">~~删除线~~</span><br><span class="line"></span><br><span class="line">&gt;引用</span><br><span class="line">&gt;&gt;引用</span><br><span class="line"></span><br><span class="line">---或 * * *（3个以上) 分割线</span><br></pre></td></tr></table></figure>

<h3 id="图片-↓↓↓"><a href="#图片-↓↓↓" class="headerlink" title="图片 ↓↓↓"></a><em>图片 ↓↓↓</em></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)</span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br><span class="line">示例：</span><br><span class="line">![blockchain](https:&#x2F;&#x2F;ss0.bdstatic.com&#x2F;70cFvHSh_Q1YnxGkpoWK1HF6hhy&#x2F;it&#x2F;</span><br><span class="line">u&#x3D;702257389,1274025419&amp;fm&#x3D;27&amp;gp&#x3D;0.jpg &quot;区块链&quot;)</span><br></pre></td></tr></table></figure>

<p><a href="https://www.jianshu.com/p/ea1eb11db63f" target="_blank" rel="noopener">图床</a></p>
<h3 id="超链接-↓↓↓"><a href="#超链接-↓↓↓" class="headerlink" title="超链接 ↓↓↓"></a><em>超链接 ↓↓↓</em></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)title可加可不加</span><br><span class="line">示例：</span><br><span class="line">[简书](http:&#x2F;&#x2F;jianshu.com)</span><br><span class="line">[百度](http:&#x2F;&#x2F;baidu.com)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</p>
</blockquote>
<p>示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;超链接地址&quot; target&#x3D;&quot;_blank&quot;&gt;超链接名&lt;&#x2F;a&gt;</span><br><span class="line">&gt;</span><br><span class="line">如：</span><br><span class="line">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;1f5ac0cf6a8b&quot; target&#x3D;&quot;_blank&quot;&gt;简书&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
<h3 id="列表-↓↓↓"><a href="#列表-↓↓↓" class="headerlink" title="列表 ↓↓↓"></a><em>列表 ↓↓↓</em></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">无序列表:</span><br><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br><span class="line"></span><br><span class="line">有序列表：</span><br><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line">注意：序号跟内容之间要有空格</span><br><span class="line"></span><br><span class="line">列表嵌套：</span><br><span class="line">上一级和下一级之间敲三个空格即可</span><br></pre></td></tr></table></figure>
<h3 id="表格-↓↓↓"><a href="#表格-↓↓↓" class="headerlink" title="表格 ↓↓↓"></a><em>表格 ↓↓↓</em></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">姓名|技能|排行</span><br><span class="line">--|:--:|--:</span><br><span class="line">刘备|哭|大哥</span><br><span class="line">关羽|打|二哥</span><br><span class="line">张飞|骂|三弟</span><br></pre></td></tr></table></figure>
<h3 id="代码-↓↓↓"><a href="#代码-↓↓↓" class="headerlink" title="代码 ↓↓↓"></a><em>代码 ↓↓↓</em></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">单行代码：代码之间分别用一个反引号包起来</span><br><span class="line">如： &#96;代码内容&#96;</span><br><span class="line"></span><br><span class="line">代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</span><br><span class="line">如：</span><br><span class="line">(&#96;&#96;&#96;)</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">(&#96;&#96;&#96;)</span><br></pre></td></tr></table></figure>
<h3 id="流程图↓↓↓"><a href="#流程图↓↓↓" class="headerlink" title="流程图↓↓↓"></a><em>流程图↓↓↓</em></h3><p><a href="https://www.jianshu.com/p/c2d6c128346d" target="_blank" rel="noopener">待更</a></p>
<h3 id="空格和缩进↓↓↓"><a href="#空格和缩进↓↓↓" class="headerlink" title="空格和缩进↓↓↓"></a><em>空格和缩进↓↓↓</em></h3><p><a href="https://www.jianshu.com/p/31eade263e7a" target="_blank" rel="noopener">待更</a></p>
<h1 id="markdown插入图片"><a href="#markdown插入图片" class="headerlink" title="markdown插入图片"></a>markdown插入图片</h1><ol>
<li><pre><code>----------------   1   -----------------
![图片](https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.8/0821.jpg)

----------------   2   -----------------
&lt;img src=&apos;https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.8/0821.jpg&apos; width=&apos;50%&apos;&gt;</code></pre></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.8/0821.jpg" alt="图片" title="我的图片"><img src='https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.8/0821.jpg'></p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTex入门</title>
    <url>/posts/e4c6f5af/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="LaTex入门"><a href="#LaTex入门" class="headerlink" title="LaTex入门"></a>LaTex入门</h1><blockquote>
<p>在markdown里，用<code>$……$</code>显示latex语法,用<code>$$……$$</code>表示多行latex</p>
</blockquote>
<ol>
<li><p><strong>直接输入</strong></p>
<ol>
<li>/\ |!  :  () [] </li>
<li>=，&gt;，&lt;，直接输入</li>
<li>加减乘除 +、−、∗、/ 可直接输入</li>
</ol>
</li>
<li><p><strong>数学符号</strong></p>
<ol>
<li><p><strong>上下标</strong>：<code>^</code>和<code>_</code>，多个符号用<code>{}</code></p>
<p>$K_{n+1} = n^2 + K_{n} - K_{n-1}$</p>
</li>
<li><p><strong>导数符号</strong>：<code>&#39;</code></p>
<p>$f’(x) = x^2 \quad  f’’(x) = 2x \quad f’’^{2}(x) = 4x^2$</p>
</li>
<li><p><strong>分式</strong>：<code>\frac{分子}{分母}</code></p>
<p>$\frac{1}{2}$</p>
<p><strong>连分式：</strong><code>\cfrac</code><br>$$<br>\begin{equation}</p>
<p>  x = a_0 + \cfrac{1}{a_1 </p>
<p>​          + \cfrac{1}{a_2 </p>
<p>​          + \cfrac{1}{a_3 + \cfrac{1}{a_4} } } }</p>
<p>\end{equation}<br>$$</p>
</li>
</ol>
</li>
<li><p><strong>根式</strong>：<code>\sqrt{...}</code></p>
<p>$\sqrt{80}$</p>
<p><strong>n 次方根：</strong><code>\sqrt[n]{...}</code></p>
<p>$\sqrt[n]{x^n + x^{n-1} + \dots + x + 1}$</p>
</li>
<li><p><strong>关系符</strong></p>
<ul>
<li><p>不等号≠： <code>\ne</code></p>
</li>
<li><p>大于等于号 ≥：<code>\ge</code></p>
</li>
<li><p>小于等于号 ≤ ：<code>\le</code></p>
</li>
<li><p>约等号 ≈ ：<code>\approx</code></p>
</li>
<li><p>等价 ≡： <code>\equiv</code></p>
</li>
</ul>
<p>$\ne \ge \le \approx \equiv$</p>
</li>
<li><p><strong>算符</strong></p>
<ul>
<li>乘号 ×：<code>\times</code></li>
</ul>
</li>
</ol>
<ul>
<li><p>除号 ÷ <code>\div</code></p>
<ul>
<li>点乘 ·：<code>\cdot</code></li>
</ul>
</li>
<li><p>加减号 ±： <code>\pm</code> ∓： <code>\mp</code></p>
<ul>
<li><p>三角函数：</p>
<ul>
<li>正弦：<code>\sin</code></li>
<li>余弦：<code>\cos</code></li>
<li>正切：<code>\tan</code></li>
<li>余切：<code>\cot</code></li>
</ul>
</li>
<li><p>极限：<code>\lim</code></p>
</li>
<li><p>积分号 ∫：<code>\int</code></p>
</li>
<li><p>求和号 ∑ ：<code>\sum</code></p>
</li>
<li><p>$\exp \min \log \sup \dim \inf $</p>
<p>$\times \div \cdot \pm \mp$</p>
</li>
</ul>
</li>
</ul>
<p>$\sin \cos \tan \cot$<br>   $$<br>\lim_{x \rightarrow 0}</p>
<p>   \frac{\sin x}{x}=1<br>   $$<br>   $\sum_{k=1}^N k^2$</p>
<ol start="5">
<li><p><strong>集合</strong></p>
<ol>
<li>属于：<code>\in</code></li>
<li>不属于：<code>\notin</code></li>
</ol>
<p>$\in \notin$</p>
</li>
<li><p><strong>箭头</strong></p>
<ol>
<li>左箭头→：<code>\rightarrow</code> 或 <code>\to</code></li>
<li>右箭头← ：<code>\leftarrow</code> 或 <code>\gets</code></li>
</ol>
<p>$a\xrightarrow{x+y+z} b$</p>
</li>
<li><p><strong>括号和定界符</strong></p>
<ol>
<li>尖括号 ⟨⟩ ：<code>\langle \rangle</code></li>
<li>上括号：<code>\overbrace</code></li>
<li>下括号：<code>\underbrace</code></li>
<li>大括号：<code>\{ \}</code></li>
<li>调节大小：<code>\bigl( \Bigl( \biggl( \Biggl( \quad</code></li>
</ol>
<p>$\langle$ </p>
<p>$\overbrace {a,b,c}$</p>
<p>$\underbrace {1,2,3}$</p>
<p>${a,b,c} \neq {a,b,c}$</p>
<p>$\bigl( \Bigl( \biggl( \Biggl(  \bigr} \Bigr} \biggr} \Biggr}$</p>
</li>
<li><p><strong>字符</strong></p>
<ol>
<li>α <code>\alpha</code></li>
<li>β <code>\beta</code></li>
<li>γ <code>\gamma</code></li>
<li>θ<code>\theta</code></li>
<li>λ <code>\lambda</code></li>
<li>无穷大∞ <code>\infty</code></li>
</ol>
<p>$\alpha \beta \gamma \theta \lambda \infty$</p>
<ol start="6">
<li><p>其他</p>
<p>$\chi \delta \epsilon \eta \iota$</p>
<p>$\mu \nu o \omega \phi \pi$</p>
<p>$\psi \rho \sigma \tau \upsilon \xi \zeta$</p>
<p>$\digamma \varepsilon \varkappa \varphi \varpi \varrho \varsigma \vartheta$</p>
<p>$\Delta \Gamma \Lambda \Omega \Phi \Pi \Psi \Sigma$</p>
<p>$\Theta \Upsilon \Xi \aleph \beth \gimel$</p>
</li>
</ol>
</li>
<li><p><strong>多行公式</strong></p>
<ol>
<li><strong>对齐</strong>：<code>&amp;</code></li>
<li><strong>换行：</strong><code>\\</code></li>
</ol>
<p>$$<br>\begin{align}</p>
<p>a &amp; = b + c \</p>
<p>&amp; = d + e</p>
<p>\end{align}<br>$$</p>
</li>
</ol>
<p>$$<br>\begin{align}</p>
<p>   a &amp;=1 &amp; b &amp;=2 &amp; c &amp;=3 \</p>
<p>   d &amp;=4 &amp; e &amp;=5 &amp; f &amp;=6</p>
<p>   \end{align}<br>$$</p>
<ol start="10">
<li><p><strong>数组和矩阵</strong></p>
<ol>
<li>创建新的行：<code>\\</code></li>
<li>创建列：<code>&amp;</code></li>
<li>各种定界符的矩阵 ：<code>pmatrix（(）、bmatrix（[）、Bmatrix（{）</code></li>
</ol>
</li>
</ol>
<p>$$<br>   \begin{matrix}</p>
<p>   x &amp; y \</p>
<p>   z &amp; v</p>
<p>   \end{matrix}<br>$$</p>
<p>$$<br>A_{m,n} = \begin{pmatrix} a_{1,1} &amp; a_{1,2} &amp; \cdots &amp; a_{1,n} \ a_{2,1} &amp; a_{2,2} &amp; \cdots &amp; a_{2,n} \ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \ a_{m,1} &amp; a_{m,2} &amp; \cdots &amp; a_{m,n} \end{pmatrix}<br>$$</p>
<ol start="11">
<li><strong>字体</strong></li>
<li><strong>颜色:</strong>${\color{red} 红色}$<ol start="2">
<li><strong>加粗:</strong>$\textbf{粗}$</li>
<li><strong>斜体:</strong>$\textit{斜体}$</li>
<li><strong>下划线：</strong>$\underline{下划线}$</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>LaTex</category>
      </categories>
      <tags>
        <tag>LaTex</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab</title>
    <url>/posts/dc9cb9f1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Matlab与Linear-Algebra"><a href="#Matlab与Linear-Algebra" class="headerlink" title="Matlab与Linear Algebra"></a>Matlab与Linear Algebra</h1><ul>
<li><p>det(A)就是求A的行列式，这里要求A为方阵</p>
</li>
<li><p>inv（A）求A的逆矩阵</p>
</li>
<li><p>A的伴随矩阵就是det(A)*inv(A)</p>
</li>
<li><p>B=A’ ,” ‘ “是求矩阵转置的意思</p>
</li>
<li><p>rank(A)求A的秩</p>
</li>
<li><p>rref(A)把A化到行最简形</p>
</li>
<li><p>rrefmovie(A)显示rref每一步操作</p>
<p>但要加入下面的代码</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function rrefmovie(A,tol)</span><br><span class="line">%RREFMOVIE Movie of the computation of the reduced row echelon form.</span><br><span class="line">%   RREFMOVIE(A) produces the reduced row echelon form of A.</span><br><span class="line">%   RREFMOVIE, by itself, supplies its own 8-by-6 matrix with rank 4.</span><br><span class="line">%   RREFMOVIE(A,tol) uses the given tolerance in the rank tests.</span><br><span class="line"></span><br><span class="line">%   Copyright 1984-2004 The MathWorks, Inc.</span><br><span class="line">%   $Revision: 5.12.4.3 $  $Date: 2004&#x2F;04&#x2F;10 23:25:44 $</span><br><span class="line"></span><br><span class="line">% Sample matrix if none was provided.</span><br><span class="line"></span><br><span class="line">commandwindow</span><br><span class="line"></span><br><span class="line">Old_Format&#x3D;get(0,&#39;Format&#39;);</span><br><span class="line">if nargin &lt; 1</span><br><span class="line"></span><br><span class="line">    A &#x3D; [ 9     4     1     6    12     7</span><br><span class="line">          4     0     4    15     1    14</span><br><span class="line">          7     0     7     8    10     9</span><br><span class="line">         16     0    16     3    13     2</span><br><span class="line">          0     2    -4     0     0     0</span><br><span class="line">          0     6   -12     0     0     0</span><br><span class="line">          9     0     9     6    12     7</span><br><span class="line">          5     0     5    10     8    11];</span><br><span class="line">end</span><br><span class="line">format rat</span><br><span class="line">more off</span><br><span class="line">clc</span><br><span class="line">home</span><br><span class="line">disp(&#39;  Original matrix&#39;)</span><br><span class="line">A</span><br><span class="line">disp(&#39;Press any key to continue. . .&#39;), pause</span><br><span class="line">[m,n] &#x3D; size(A);</span><br><span class="line"></span><br><span class="line">% Compute the default tolerance if none was provided.</span><br><span class="line">if (nargin &lt; 2), tol &#x3D; max([m,n])*eps*norm(A,&#39;inf&#39;); end</span><br><span class="line"></span><br><span class="line">% Loop over the entire matrix.</span><br><span class="line">i &#x3D; 1;</span><br><span class="line">j &#x3D; 1;</span><br><span class="line">k &#x3D; 0;</span><br><span class="line">while (i &lt;&#x3D; m) &amp;&amp; (j &lt;&#x3D; n)</span><br><span class="line">   % Find value and index of largest element in the remainder of column j.</span><br><span class="line">   [p,k] &#x3D; max(abs(A(i:m,j))); k &#x3D; k+i-1;</span><br><span class="line">   if (p &lt;&#x3D; tol)</span><br><span class="line">      % The column is negligible, zero it out.</span><br><span class="line">      home</span><br><span class="line">      disp([&#39;  column &#39; int2str(j) &#39; is negligible&#39;])</span><br><span class="line">      A(i:m,j) &#x3D; zeros(m-i+1,1)</span><br><span class="line">      disp(&#39;Press any key to continue. . .&#39;), pause</span><br><span class="line">      j &#x3D; j + 1;</span><br><span class="line">   else</span><br><span class="line">      if i ~&#x3D; k</span><br><span class="line">         % Swap i-th and k-th rows.</span><br><span class="line">         home</span><br><span class="line">         disp([&#39;  swap rows &#39; int2str(i) &#39; and &#39; int2str(k) blanks(10)])</span><br><span class="line">         A([i k],:) &#x3D; A([k i],:)</span><br><span class="line">         disp(&#39;Press any key to continue. . .&#39;), pause</span><br><span class="line">      end</span><br><span class="line">      % Divide the pivot row by the pivot element.</span><br><span class="line">      home</span><br><span class="line">      disp([&#39;  pivot &#x3D; A(&#39; int2str(i) &#39;,&#39; int2str(j) &#39;)&#39; blanks(10)])</span><br><span class="line">      A(i,j:n) &#x3D; A(i,j:n)&#x2F;A(i,j)</span><br><span class="line">      disp(&#39;Press any key to continue. . .&#39;), pause</span><br><span class="line">      home</span><br><span class="line">      % Subtract multiples of the pivot row from all the other rows.</span><br><span class="line">      disp([&#39;  eliminate in column &#39; int2str(j) blanks(10)])</span><br><span class="line">      A</span><br><span class="line">      disp(&#39;Press any key to continue. . .&#39;), pause</span><br><span class="line">      for k &#x3D; 1:m</span><br><span class="line">         if k ~&#x3D; i</span><br><span class="line">            home</span><br><span class="line">            disp(&#39; &#39;)</span><br><span class="line">            A(k,j:n) &#x3D; A(k,j:n) - A(k,j)*A(i,j:n)</span><br><span class="line">         end</span><br><span class="line">      end</span><br><span class="line">      disp(&#39;Press any key to continue. . .&#39;), pause</span><br><span class="line">      i &#x3D; i + 1;</span><br><span class="line">      j &#x3D; j + 1;</span><br><span class="line">   end</span><br><span class="line">end</span><br><span class="line">%  Restore Format</span><br><span class="line">set(0,&#39;Format&#39;,Old_Format)</span><br></pre></td></tr></table></figure>



<h1 id="SEIR模型"><a href="#SEIR模型" class="headerlink" title="SEIR模型"></a>SEIR模型</h1><blockquote>
<p>save(‘data.mat’,’a’,’b’,’c’) %假如有三个变量’a’, ‘b’, ‘c’，要将它们保存在’data’数据文件中</p>
</blockquote>
<blockquote>
<p>v = load(‘data.mat’,’a’) %将’data’数据文件中’a’变量读出存到’v’中<br>画图</p>
</blockquote>
<blockquote>
<p>subplot(m,n,p)<br>m,n说明分成几行几列，p说明是第几个（左→右，上↓下）</p>
</blockquote>
<blockquote>
<p>hold on</p>
</blockquote>
<h1 id="Yalmip"><a href="#Yalmip" class="headerlink" title="Yalmip"></a>Yalmip</h1><ul>
<li>介绍</li>
</ul>
<blockquote>
<p>yalmip是由Lofberg开发的一种免费的优化求解工具，其最大特色在于集成许多外部的最优化求解器，形成一种统一的建模求解语言，提供了Matlab的调用API，减少学习者学习成本。</p>
</blockquote>
<ul>
<li>下载 Yalmip 工具箱：</li>
</ul>
<blockquote>
<p><a href="https://yalmip.github.io/" target="_blank" rel="noopener">https://yalmip.github.io/</a><br>放到toolbox文件夹下<br>设置路径。选择“添加并包含子文件夹”，将 yalmip 的路径添加进去</p>
</blockquote>
<ul>
<li>测试是否成功：</li>
</ul>
<blockquote>
<p>doc yalmip</p>
</blockquote>
<blockquote>
<p>yalmiptest</p>
</blockquote>
<blockquote>
<p>which sdpva</p>
</blockquote>
<p><a href="https://yalmip.github.io/tutorials/" target="_blank" rel="noopener">教程</a></p>
<ul>
<li>命令</li>
</ul>
<blockquote>
<p>sdpvar:实数变量</p>
</blockquote>
<blockquote>
<p>intvar：整数变量</p>
</blockquote>
<blockquote>
<p>binvar：0-1变量</p>
</blockquote>
<blockquote>
<p>check：可以检查约束条件是否被满足（检查约束条件的余值）</p>
</blockquote>
<blockquote>
<p>value：可以查看变量或表达式的值</p>
</blockquote>
<blockquote>
<p>assign: 可以给变量赋值，这个命令调试时很重要</p>
</blockquote>
<blockquote>
<p>options=sdpsettings(‘solver’,’cplex’); 设置求解方法为调用 CPLEX</p>
</blockquote>
<blockquote>
<p>optimize(constraints,f,options);  Yalmip求解的命令。</p>
</blockquote>
]]></content>
      <categories>
        <category>matlab</category>
      </categories>
      <tags>
        <tag>matlab</tag>
        <tag>linear algebra</tag>
      </tags>
  </entry>
  <entry>
    <title>为Hexo博客绑定域名</title>
    <url>/posts/7d05b322/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h1><blockquote>
<p>当我们搭建好博客的时候，GitHub Pages 会为我们生成一个URL:<code>username.github.io</code></p>
<p>但这样的链接明显过于冗长，为了便于记忆，我们可以为博客绑定自己的域名</p>
</blockquote>
<ol>
<li><p><strong>注册域名</strong></p>
<blockquote>
<p>国内的域名可以去找腾讯云或阿里云，国外的可以去找Freenom</p>
</blockquote>
</li>
<li><p><strong>DNS解析</strong></p>
<blockquote>
<p>购买好域名之后，进入到域名的管理页，进行DNS的解析</p>
</blockquote>
<blockquote>
<p>对于DNS的解析，我们只需要知道两种类型：</p>
<ul>
<li>CNAME(Canonical Name)：一般解析到一个域名</li>
<li>A(Address)：一般解析到一个确定的IP地址</li>
</ul>
</blockquote>
<p>进入到管理页后，我们按下图方式填入：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0901-2.png" alt="0901-2"></p>
<p>其中Type代表的是DNS解析的类型，Target可以通过<code>ping uesrname.github.io</code>获取：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0901-3.png" alt="0901-3"></p>
<p>（即打码部分的IP地址）</p>
</li>
<li><p><strong>GitHub Pages 设置</strong></p>
<blockquote>
<p>进入到你的博客的GitHub仓库，依次选择<code>setting-&gt;GitHub Pages-&gt;Custom domain</code>，</p>
<p>然后输入你的域名</p>
</blockquote>
</li>
<li><p><strong>Hexo的细节</strong></p>
<blockquote>
<p>完成第3步骤之后，我们已经暂时搞定了域名的绑定，已经可以通过域名直接访问博客了</p>
</blockquote>
<blockquote>
<p>不过我们需要注意到一个细节，在我们GitHub博客仓库的根目录下，多了一个<strong>CNAME</strong>文件，里面的内容是我们的域名</p>
</blockquote>
<blockquote>
<p>问题就出现在这里，每次我们通过<code>hexo clean + hexo g + hexo d</code>这三板斧提交博客的修改时，会清空掉这一CNAME文件，所以要想办法让hexo编译的时候就生成这个文件</p>
</blockquote>
<p><strong>解决方法：</strong></p>
<blockquote>
<p>复制这一CNAME文件（自己写也行），置于<code>/blog/source</code>文件夹下</p>
<p>修改 _config.yml 文件：<code>skip_render: CNAME</code></p>
</blockquote>
</li>
</ol>
<h1 id="2021-9-1更新"><a href="#2021-9-1更新" class="headerlink" title="2021/9/1更新"></a>2021/9/1更新</h1><p><code>GitHub Pages 设置</code>位置变了，请看下图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0901-4.jpg" alt="0901-4"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0901-5.png" alt="0901-5"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt之 QFileDialog + QWebEngineView</title>
    <url>/posts/76d142d4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="QFileDialog"><a href="#QFileDialog" class="headerlink" title="QFileDialog"></a>QFileDialog</h1><blockquote>
<p>基于文件读写的需要，我们需要了解QFileDialog的使用</p>
<p>以下代码结合lineEdit，演示文件读写的基本功能</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.textEdit = QTextEdit()  <span class="comment"># 创建文本框用于显示</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_code</span><span class="params">(self)</span>:</span></span><br><span class="line">    filename = QFileDialog.getOpenFileName(self, <span class="string">'Open file'</span>, <span class="string">'.'</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        self.textEdit.setText(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear_code</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.textEdit.clear()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_code</span><span class="params">(self)</span>:</span></span><br><span class="line">    data=self.textEdit.toPlainText()</span><br><span class="line">    filename = QFileDialog.getSaveFileName(self, <span class="string">'Open file'</span>, <span class="string">'.'</span>)[<span class="number">0</span>]  </span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，读写中文文本时，需要注意编码，例如添加<code>encoding=&#39;utf-8&#39;</code></p>
</blockquote>
<h1 id="QWebEngineView"><a href="#QWebEngineView" class="headerlink" title="QWebEngineView"></a>QWebEngineView</h1><blockquote>
<p>QWebEngineView可以在QT内嵌入网页，下面给一个最简单的例子，实现网易云音乐的嵌入：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span><span class="params">(QWebEngineView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, par)</span>:</span></span><br><span class="line">        super().__init__(par)</span><br><span class="line">   </span><br><span class="line">        self.load(QUrl(<span class="string">"https://music.163.com/outchain/player?type=1&amp;id=35631522&amp;auto=1&amp;height=430"</span>))</span><br></pre></td></tr></table></figure>

<p><strong>效果如下：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.8/0831-1.jpg" alt="0831-1"></p>
<blockquote>
<p>除了嵌入URL，还可以嵌入本地的页面</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地html路径</span></span><br><span class="line">self.editor_index = (os.path.split(os.path.realpath(__file__))[<span class="number">0</span>]) + <span class="string">"/XXX.html"</span></span><br><span class="line">self.load(QUrl.fromLocalFile(self.editor_index))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果在嵌入的网页中打开新的页面，需要：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重写createeditor()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createEditor</span><span class="params">(self, QWebEnginePage_WebWindowType)</span>:</span></span><br><span class="line">    new_editor = Editor(self.mainwindow)</span><br><span class="line">    self.mainwindow.create_tab(new_editor)</span><br><span class="line">    <span class="keyword">return</span> new_editor</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>PyQt</category>
      </categories>
      <tags>
        <tag>PyQt</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt之 美化篇</title>
    <url>/posts/c0e65494/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ol>
<li><p><strong>按钮美化</strong></p>
<ul>
<li><p>通过<code>qtawesome.icon</code>为按钮添加图标</p>
</li>
<li><p>通过<code>setToolTip</code>为按钮添加提示语</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.button1 &#x3D; QPushButton(qtawesome.icon(&#39;fa.file-code-o&#39;, color&#x3D;&#39;black&#39;), &quot;按钮显示的文字&quot;) </span><br><span class="line">self.button1.setToolTip(&#39;提示语&#39;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>图标可于 <a href="https://fontawesome.dashgame.com/" target="_blank" rel="noopener">https://fontawesome.dashgame.com/</a> 中筛选</p>
</blockquote>
<ul>
<li>设置按钮透明度</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">op &#x3D; QtWidgets.QGraphicsOpacityEffect()</span><br><span class="line">op.setOpacity(0.6)</span><br><span class="line">self.pushButton.setGraphicsEffect(op)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p><strong>窗口美化</strong></p>
<p>通过QSS设定窗口的背景颜色、圆角化等，再设定透明度，美化窗口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.main_widget.setStyleSheet(&#39;&#39;&#39;</span><br><span class="line">QWidget#left_widget&#123;</span><br><span class="line">background:rgb(255,228,225);</span><br><span class="line">border-top:1px solid white;</span><br><span class="line">border-bottom:1px solid white;</span><br><span class="line">border-left:1px solid white;</span><br><span class="line">border-top-left-radius:10px;</span><br><span class="line">border-bottom-left-radius:10px;</span><br><span class="line">&#125;</span><br><span class="line">QWidget#right_widget&#123;</span><br><span class="line">background:rgb(152,245,255);</span><br><span class="line">border-top-right-radius:10px;</span><br><span class="line">border-bottom-right-radius:10px;</span><br><span class="line">&#125;</span><br><span class="line">&#39;&#39;&#39;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.setWindowOpacity(0.9)  # 设置窗口透明度</span><br><span class="line">self.setAttribute(QtCore.Qt.WA_TranslucentBackground)  # 设置窗口背景透明</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>窗口边框美化</strong></p>
<p>窗口原来的边框过于简陋，因此加以隐藏</p>
<p><code>self.setWindowFlag(QtCore.Qt.FramelessWindowHint)  # 隐藏边框</code></p>
<p>因为隐藏窗口边框之后，原来的关闭、最小最大化按钮随之隐藏，我们需要自己设计这些功能按钮</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.left_close &#x3D; QtWidgets.QPushButton(&quot;&quot;)  # 关闭按钮</span><br><span class="line">self.left_visit &#x3D; QtWidgets.QPushButton(&quot;&quot;)  # 空白按钮</span><br><span class="line">self.left_mini &#x3D; QtWidgets.QPushButton(&quot;&quot;)  # 最小化按钮</span><br><span class="line"></span><br><span class="line">self.left_close.clicked.connect(self.close)</span><br><span class="line">self.left_visit.clicked.connect(self.showMaximized)</span><br><span class="line">self.left_mini.clicked.connect(self.showMinimized)</span><br></pre></td></tr></table></figure>

<p>对按钮加以美化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.left_close.setStyleSheet(</span><br><span class="line">    &#39;&#39;&#39;QPushButton&#123;background:#F76677;border-radius:5px;&#125;QPushButton:hover&#123;background:red;&#125;&#39;&#39;&#39;)</span><br><span class="line">self.left_visit.setStyleSheet(</span><br><span class="line">    &#39;&#39;&#39;QPushButton&#123;background:#F7D674;border-radius:5px;&#125;QPushButton:hover&#123;background:yellow;&#125;&#39;&#39;&#39;)</span><br><span class="line">self.left_mini.setStyleSheet(</span><br><span class="line">    &#39;&#39;&#39;QPushButton&#123;background:#6DDF6D;border-radius:5px;&#125;QPushButton:hover&#123;background:green;&#125;&#39;&#39;&#39;)</span><br><span class="line">    </span><br><span class="line">self.left_close.setFixedSize(15,15) # 设置关闭按钮的大小</span><br><span class="line">self.left_visit.setFixedSize(15, 15) # 设置按钮大小</span><br><span class="line">self.left_mini.setFixedSize(15, 15) # 设置最小化按钮大小</span><br></pre></td></tr></table></figure>

<p>考虑到隐藏窗口之后，难以拖动窗口，我们需要自己编写鼠标拖动函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def mousePressEvent(self, event):</span><br><span class="line">    try:</span><br><span class="line">        if event.button() &#x3D;&#x3D; QtCore.Qt.LeftButton:</span><br><span class="line">            self.m_flag &#x3D; True</span><br><span class="line">            self.m_Position &#x3D; event.globalPos() - self.pos()  # 获取鼠标相对窗口的位置</span><br><span class="line">            event.accept()</span><br><span class="line">            self.setCursor(QCursor(QtCore.Qt.OpenHandCursor))  # 更改鼠标图标</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">def mouseMoveEvent(self, QMouseEvent):</span><br><span class="line">    try:</span><br><span class="line">        if QtCore.Qt.LeftButton and self.m_flag:</span><br><span class="line">            self.move(QMouseEvent.globalPos() - self.m_Position)  # 更改窗口位置</span><br><span class="line">            QMouseEvent.accept()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">def mouseReleaseEvent(self, QMouseEvent):</span><br><span class="line">    try:</span><br><span class="line">        self.m_flag &#x3D; False</span><br><span class="line">        self.setCursor(QCursor(QtCore.Qt.ArrowCursor))</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>QTabWidget美化</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str &#x3D; &quot;QTabBar::tab&#123;background-color:rbg(255,0,255);&#125;&quot; + \</span><br><span class="line">	&quot;QTabBar::tab:selected&#123;background-color:rgb(255,228,225);&#125; &quot;</span><br><span class="line">self.setStyleSheet(str)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>设置QStyle样式</strong></p>
<p><code>app.setStyle(QStyleFactory.create(&quot;WindowsXP&quot;))</code></p>
</li>
<li><p><strong>添加图标</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">icon &#x3D; QtGui.QIcon()</span><br><span class="line">icon.addPixmap(QtGui.QPixmap(&quot;xxx.jpg&quot;), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line"></span><br><span class="line">mainwindow.setWindowIcon(icon)</span><br><span class="line"></span><br><span class="line">button.setIcon(icon2)</span><br><span class="line"></span><br><span class="line">tab.setIcon(icon3)</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>PyQt</category>
      </categories>
      <tags>
        <tag>PyQt</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt之嵌入VScode</title>
    <url>/posts/bb550935/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>首先，介绍一下<a href="https://microsoft.github.io/monaco-editor/" target="_blank" rel="noopener">Monaco Editor</a></p>
<blockquote>
<p>The Monaco Editor is the code editor that powers <a href="https://github.com/Microsoft/vscode" target="_blank" rel="noopener">VS Code</a>. A good page describing the code editor’s features is <a href="https://code.visualstudio.com/docs/editor/editingevolved" target="_blank" rel="noopener">here</a>.</p>
<p>It is licensed under the MIT License and supports Edge, Chrome, Firefox, Safari and Opera.</p>
<p>The Monaco editor is <strong>not</strong> supported in mobile browsers or mobile web frameworks.</p>
<p>Find more information at the <a href="https://github.com/Microsoft/monaco-editor" target="_blank" rel="noopener">Monaco Editor repo</a>.</p>
</blockquote>
<p>我们的仿vscode代码编辑器功能基于Monaco Editor（VSCode的内核）实现，通过建立本地html并通过QWebEngineView嵌入QT，使用page().runJavaScript调用js实现代码的设置，并实现代码高亮、自动换行、自动补全等功能</p>
<h1 id="嵌入QT"><a href="#嵌入QT" class="headerlink" title="嵌入QT"></a>嵌入QT</h1><p>利用<code>QWebEngineView</code>可以将网页嵌入QT，网页文件如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        html, body &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"width:100%;height:100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入base64方法,设置编辑器内容时使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./base64.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根据实际路径进行修改 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./package/dev/vs/loader.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    // <span class="comment">&lt;!-- 根据实际路径进行修改 --&gt;</span></span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">require</span>.config(&#123;<span class="attr">paths</span>: &#123;<span class="string">'vs'</span>: <span class="string">'./package/dev/vs'</span>&#125;&#125;);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">require</span>([<span class="string">'vs/editor/editor.main'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        monaco.languages.typescript.javascriptDefaults.setDiagnosticsOptions(&#123;</span><br><span class="line"><span class="actionscript">        noSemanticValidation: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">        noSyntaxValidation: <span class="literal">true</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">        editor = monaco.editor.create(<span class="built_in">document</span>.getElementById(<span class="string">'container'</span>), &#123;</span></span><br><span class="line"><span class="actionscript">            value: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">            language: <span class="string">'python'</span>,  <span class="comment">//默认语言</span></span></span><br><span class="line"><span class="actionscript">            mouseWheelZoom:<span class="literal">true</span>,     <span class="comment">// 鼠标滚轮缩放</span></span></span><br><span class="line"><span class="actionscript">            wordWrap:<span class="string">"on"</span>,           <span class="comment">// 自动换行</span></span></span><br><span class="line"><span class="actionscript">            scrollBeyondLastLine:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//theme: 'vs-dark',		// 主题</span></span></span><br><span class="line">            minimap:&#123;</span><br><span class="line"><span class="actionscript">                enabled:<span class="literal">true</span>          <span class="comment">// 显示右侧小地图</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">            editor.layout();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> res = success;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> res;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后将网页嵌入QT中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.editor_index = (os.path.split(os.path.realpath(__file__))[<span class="number">0</span>]) + <span class="string">"/vscode.html"</span></span><br><span class="line">self.load(QUrl.fromLocalFile(self.editor_index))</span><br></pre></td></tr></table></figure>

<p>最后，通过调用Monaco支持的js完成网页内容赋值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_value</span><span class="params">(self, data)</span>:</span></span><br><span class="line">    <span class="string">"""设置编辑器内容"""</span></span><br><span class="line">    data = base64.b64encode(data.encode())</span><br><span class="line">    data = data.decode()</span><br><span class="line">    self.page().runJavaScript(<span class="string">f"editor.getModels()[0].setValue(Base.decode('<span class="subst">&#123;data&#125;</span>'))"</span>)</span><br><span class="line">    print(<span class="string">'set'</span>,data)</span><br></pre></td></tr></table></figure>

<p><strong>效果:</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0909-2.png" alt="0909-2"></p>
<h1 id="在线编译"><a href="#在线编译" class="headerlink" title="在线编译"></a>在线编译</h1><p>通过以下代码调用cmd即可</p>
<blockquote>
<p>注意，需要先安装python并配置环境变量</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">os.system(f&#39;start cmd &#x2F;K python &#123;filepath&#125;\&#123;filename&#125;&#39;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PyQt</category>
      </categories>
      <tags>
        <tag>PyQt</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员的记录</title>
    <url>/posts/29f25a7d/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="程序员的固执"><a href="#程序员的固执" class="headerlink" title="程序员的固执~"></a>程序员的固执~</h1><ol>
<li>talk is cheap, show me the code.</li>
</ol>
<h1 id="属于我们的彩蛋"><a href="#属于我们的彩蛋" class="headerlink" title="属于我们的彩蛋~"></a>属于我们的彩蛋~</h1><ol>
<li><p>Python</p>
<p>import this</p>
<blockquote>
<p>The Zen of Python, by Tim Peters</p>
<p>Beautiful is better than ugly.<br>Explicit is better than implicit.<br>Simple is better than complex.<br>Complex is better than complicated.<br>Flat is better than nested.<br>Sparse is better than dense.<br>Readability counts.<br>Special cases aren’t special enough to break the rules.<br>Although practicality beats purity.<br>Errors should never pass silently.<br>Unless explicitly silenced.<br>In the face of ambiguity, refuse the temptation to guess.<br>There should be one– and preferably only one –obvious way to do it.<br>Although that way may not be obvious at first unless you’re Dutch.<br>Now is better than never.<br>Although never is often better than <em>right</em> now.<br>If the implementation is hard to explain, it’s a bad idea.<br>If the implementation is easy to explain, it may be a good idea.<br>Namespaces are one honking great idea – let’s do more of those!</p>
</blockquote>
</li>
<li><p>Matlab</p>
<ol>
<li>spy: 会出现一只可爱的狗狗</li>
<li>earthmap：一个地球</li>
<li>life：致敬生命游戏</li>
<li>xpbombs：扫雷，绝对震惊了</li>
<li>cruller：神奇的环</li>
<li>knot：3D打结</li>
<li>Lorenz：吸引子的累积</li>
<li>truss：桥在两端固定时候的震动模</li>
<li>rlc_gui：电路的GUI</li>
<li>fifteen：移动方块</li>
<li>codec：编码</li>
<li>imagesc：吓人</li>
<li>logo：matlab的图标</li>
<li>makevase：渲染一个花瓶</li>
<li>teapotdemo：带壶嘴的茶壶</li>
<li>travel：！！！TSP问题</li>
<li>xpsound：声音采样</li>
<li>xpklein：克莱因瓶</li>
<li>xpquad：超二次曲面</li>
<li>why：可以一直输入why,试试？</li>
</ol>
</li>
<li><p>Ubuntu</p>
<ol>
<li>sudo apt-get install bastet：俄罗斯方块</li>
<li>sudo apt-get install ninvaders：空间侵略者</li>
<li>sudo apt-get install pacman4console：街机之王</li>
<li>sudo apt-get install nsnake：贪吃蛇</li>
<li>sudo apt-get install greed：跑路游戏</li>
<li>sudo apt-get install bsdgames：飞行游戏</li>
<li>sudo apt-get install moon-buggy：赛车月球探险</li>
<li>ssh sshtron.zachlatta.com：电子世界争霸战（联网）</li>
<li>sudo apt-get install wormux：百战天虫</li>
<li>sudo apt-get install chromium：雷电</li>
<li>sudo apt-get install frozen-bubble：泡泡龙</li>
<li>sudo apt-get install astromenace：太空大战</li>
<li>sudo  apt-get install btanks：坦克大战</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>records</category>
      </categories>
      <tags>
        <tag>records</tag>
      </tags>
  </entry>
  <entry>
    <title>我的大三flag-上(新年解除密码限制)</title>
    <url>/posts/5114c37b/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="5a164b1cb5d1a55b04fbcfa1220a2f5bbee8cd45330bb6c6249f873575082d86">7cc8dfeba8ade86800855d351e424e8919dc98f8b22cfb9531972680d4968fc4340fe96e102542e35a431ff64199aaa6c52d768d3c3d6f0cba9320375da32a0a04a650d0af7fa3e8bfc164f82aad2b94f86021b591a50e5b47a689927596abb4c7f290908f2e5ee72586865ea38aa64ee6f9be526bda9d1ab6452b48e6c055548355988301f93f942cdf762de72eb99881c922ad515c111a256994aabec3cd021449b17e0bc6a2b0fe57c2985100b34422f467b7d22c2265a2b28030da9ad6d7aed0c004203eaf7f2c663ab48523da9a5f3282141dda614ce9a5202a8d6f2ec1f1696bd5da6aec7a1ce4ce67c86b22036266b5d304d68747731c6e961afce39ea1c807e7fd704167dc3e1906057cf41e765f3c9860592bc5e041abf93a295c3b0c7ef012bd98a2e829e93fd302650cd17a5054445964b4779cca83a9e41a46b394bafd9721115187f8d66a110c88b05af2e27b0f72759c763672deaf14482770f6957388caf2ad6eabd56c16c418dad0d4b32e5871ea9c01f9deccf0e302af24920495097ad352c1fe0fc5fccccc4c02ee6e1353a1d8e3ea4c7419c18e4b34b3fe9b65705929e02889ea591042f9b9d9953fa6cf50505cf9b7d8b701e2b64b5136badb778b8e63565f66a6643584470f379a6473eec44f2f32eedf93c5686980de9d6ebfcc9e1dd92d2a3e31b4bdafb5f44dc90554fe3b4f49e8cf3d395d878334f85af23923a51095e43d09e42ce66d3076812ed2567c3d0c637ca6880f50cdde8e044c03480c62cdfa5c62870eb5f4660c07f0d8c084075e9ea0563378a12ea5c1a58ca61be9d4623c669a07aeb9984e4016f2ae7f56fd6d2b29ac69366f622bc6d236c7b8708ce9ec99be06d3e1b3d619175bd766073410973f1b9164844fbd0716d6f0fc1a63b07e51642c985873002bb9469efc2b5f065a37465662eb484c559bf3b548ea96f0f24ee2db0b9d802571a463ece14d57f72eaabeebba0b44f8d6359d0e42be1a68ff15ae2330c9360f44779fe9603cb534cbe86c7d02095ea2f1a48a7f022e6e26b3681edf9343ee99aaebef1a38bbf08f59b705c52a47c7e3cca29c9de1fe59707c654344aae507bd9a9b044729bb634ff8e63a80d96a0f</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>records</category>
      </categories>
      <tags>
        <tag>records</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt之 QTimer + QMenuBar</title>
    <url>/posts/8f2bf65/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="QTimer"><a href="#QTimer" class="headerlink" title="QTimer"></a>QTimer</h1><blockquote>
<p>QTimer类提供了重复和单次触发信号的定时器</p>
<p>我们可以利用QTimer来做一个实时时间显示</p>
</blockquote>
<ol>
<li><p>我们首先定义一个label显示时间信息，并将其添加到你的布局中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#时间显示</span></span><br><span class="line">self.time_label=QLabel(self)</span><br><span class="line">self.time_label.setText(<span class="string">'now'</span>)</span><br><span class="line">self.XXX_layout.addWidget(self.time_label, x, x, x, x)</span><br><span class="line">self.timer = QTimer(self)</span><br><span class="line">self.timer.timeout.connect(self.showtime)  <span class="comment"># 这个通过调用槽函数来刷新时间</span></span><br><span class="line">self.timer.start()</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写QTimer绑定的showtime函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showtime</span><span class="params">(self)</span>:</span></span><br><span class="line">    datetime = QDateTime.currentDateTime()</span><br><span class="line">    text = datetime.toString()</span><br><span class="line">    self.time_label.setText(text)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h1 id="QMenuBar"><a href="#QMenuBar" class="headerlink" title="QMenuBar"></a>QMenuBar</h1><blockquote>
<p>在QT的使用中，我们通常需要设计一个菜单</p>
<p>我们以设计<em>帮助菜单</em>为例，来学习QMenuBar的使用</p>
</blockquote>
<ol>
<li><p><strong>定义菜单</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.menubar = QtWidgets.QMenuBar(self)</span><br><span class="line">self.menubar.setGeometry(QtCore.QRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">950</span>, <span class="number">25</span>))</span><br><span class="line">self.menubar.setObjectName(<span class="string">"menubar"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加菜单内容和行为</strong></p>
<blockquote>
<ul>
<li>通过QAction设置行为</li>
<li>通过.setShortcut设置快捷键</li>
<li>通过.triggered.connect连接函数</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">help_act = QAction(<span class="string">'&amp;查看帮助'</span>, self)</span><br><span class="line">help_act.setShortcut(<span class="string">'Ctrl+H'</span>)</span><br><span class="line">help_act.triggered.connect(self.help)</span><br><span class="line">help_menu = self.menubar.addMenu(<span class="string">'&amp;Help'</span>)</span><br><span class="line">help_menu.addAction(help_act)</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>PyQt</category>
      </categories>
      <tags>
        <tag>PyQt</tag>
      </tags>
  </entry>
  <entry>
    <title>cv2之调用摄像头</title>
    <url>/posts/96dbb869/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>使用CV2调用摄像头</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><blockquote>
<p>需要先设置”允许应用访问你的相机”，否则报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;[ WARN:0] global C:\Users\runneradmin\AppData\Local\Temp\pip-req-build-ep71p_ws\opencv\modules\videoio\src\cap_msmf.cpp (438) &#96;anonymous-namespace&#39;::SourceReaderCB::~SourceReaderCB terminating async callback</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">cap &#x3D; cv2.VideoCapture(0,cv2.CAP_DSHOW)  # 0：打开第一个摄像头</span><br><span class="line">while cap.isOpened():	# 摄像头打开为True:</span><br><span class="line">    ret, frame &#x3D; cap.read()  # 读取一帧数据，ret为true则成功，frame为读的图像</span><br><span class="line">    if not ret:</span><br><span class="line">        exit(&#39;read video error&#39;)</span><br><span class="line">    frame &#x3D; cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)    # 彩色转灰度</span><br><span class="line">    cv2.namedWindow(&#39;camera&#39;, cv2.WINDOW_AUTOSIZE)     # 窗口自动调节大小</span><br><span class="line">    cv2.imshow(&#39;camera&#39;, frame)</span><br><span class="line">    if cv2.waitKey(10) &amp; 0xFF &#x3D;&#x3D; ord(&#39;q&#39;):       # 按q退出</span><br><span class="line">        break</span><br><span class="line">cap.release()   # 释放摄像头q</span><br><span class="line">cv2.destroyAllWindows()  # 结束所有窗口</span><br></pre></td></tr></table></figure>



<p><strong>cv2.waitKey(1000) &amp; 0xFF == ord(‘q’) 是什么意思？</strong></p>
<blockquote>
<ul>
<li><code>cv2.waitKey(1000)</code>：在1000ms内根据键盘输入返回一个值</li>
<li><code>0xFF</code> ：一个十六进制数FF</li>
<li><code>ord(&#39;q&#39;)</code> ：q的ASCII码</li>
</ul>
</blockquote>
<p><code>cv2.imshow()</code>后面需要跟着<code>cv2.waitKey(1000) &amp; 0xFF == ord(&#39;q&#39;)</code>才能正常显示</p>
<blockquote>
<p><code>This function should be followed by cv::waitKey function which displays the image for specified . milliseconds. Otherwise, it won&#39;t display the image.</code></p>
</blockquote>
<h1 id="嵌入QT"><a href="#嵌入QT" class="headerlink" title="嵌入QT"></a>嵌入QT</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ret, frame &#x3D; cap.read()</span><br><span class="line">show &#x3D; cv2.resize(frame, (640, 480))</span><br><span class="line">show &#x3D; cv2.cvtColor(show, cv2.COLOR_BGR2RGB)</span><br><span class="line">Image &#x3D; QtGui.QImage(show.data, show.shape[1], show.shape[0], QtGui.QImage.Format_RGB888)</span><br><span class="line">self.label.setPixmap(QtGui.QPixmap.fromImage(Image))</span><br></pre></td></tr></table></figure>

<p>用timer计时，每隔一定间隔读取一次cap</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.timer &#x3D; QtCore.QTimer()</span><br><span class="line"></span><br><span class="line"># 自定义函数，通过下面这些API调用timer</span><br><span class="line">self.timer.timeout.connect(self.show_camera)</span><br><span class="line">self.timer_camera.isActive()</span><br><span class="line">self.timer_camera.start(30)</span><br><span class="line">self.timer_camera.stop()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>图像处理</category>
      </categories>
      <tags>
        <tag>图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt之 QTableWidget、QMessageBox</title>
    <url>/posts/e4c529a/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="QMessageBox"><a href="#QMessageBox" class="headerlink" title="QMessageBox"></a>QMessageBox</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不用多说</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msg</span><span class="params">(self,str)</span>:</span></span><br><span class="line">    msgBox = QMessageBox(QMessageBox.NoIcon, <span class="string">'消息'</span>, str)</span><br><span class="line">    msgBox.setWindowIcon(QIcon(<span class="string">'GitHub.png'</span>))</span><br><span class="line">    msgBox.exec()</span><br></pre></td></tr></table></figure>



<h1 id="QTableWidget"><a href="#QTableWidget" class="headerlink" title="QTableWidget"></a>QTableWidget</h1><ol>
<li><p><strong>创建table</strong></p>
<blockquote>
<p>创建了一个10*7的table</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TableSheet</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUi()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUi</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.table = QTableWidget()</span><br><span class="line">        self.table.setColumnCount(<span class="number">7</span>)</span><br><span class="line">        self.table.setRowCount(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        mainLayout = QVBoxLayout()</span><br><span class="line">        mainLayout.addWidget(self.table)</span><br><span class="line">        self.setLayout(mainLayout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    table = TableSheet()</span><br><span class="line">    table.resize(<span class="number">800</span>, <span class="number">500</span>)</span><br><span class="line">    table.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>增加表头</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.horizontalHeader = [<span class="string">"序号"</span>]+[<span class="string">"一位"</span>,<span class="string">"缺数"</span>,<span class="string">"预测值"</span>]+[<span class="string">'量变'</span>,<span class="string">'预测状态'</span>,<span class="string">'单行净胜'</span>]</span><br><span class="line">self.table.verticalHeader().setVisible(<span class="literal">False</span>)     <span class="comment"># 隐藏左侧垂直表头    self.table.setHorizontalHeaderLabels(self.horizontalHeader)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>表头样式</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.table.setStyleSheet(<span class="string">"QHeaderView::section &#123;background-color: rgb(255,228,225);color: ;&#125;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(self.table.columnCount()):</span><br><span class="line">    headItem = self.table.horizontalHeaderItem(index)</span><br><span class="line">    headItem.setFont(QFont(<span class="string">"song"</span>, <span class="number">12</span>, QFont.Bold))</span><br><span class="line">    headItem.setForeground(QBrush(Qt.blue))</span><br><span class="line">    headItem.setTextAlignment(<span class="number">0x000</span> | Qt.AlignVCenter)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>单元格编辑、选择设置</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 表格中的数据，默认只要双击就可以修改其中的数据。</span></span><br><span class="line">      <span class="comment"># 如果文档是处于预览状态或者不可编辑状态，那就需要对表格设定为不可编辑模式。</span></span><br><span class="line">      <span class="comment"># QTableWidget.NoEditTriggers 0 不能对表格内容进行修改 </span></span><br><span class="line">      <span class="comment"># QTableWidget.CurrentChanged 1 任何时候都能对单元格修改 </span></span><br><span class="line">      <span class="comment"># QTableWidget.DoubleClicked 2 双击单元格 </span></span><br><span class="line">      <span class="comment"># QTableWidget.SelectedClicked 4 单击已选中的内容 </span></span><br><span class="line">      <span class="comment"># QTableWidget.EditKeyPressed 8  编辑键被按下时，编辑开始</span></span><br><span class="line">      <span class="comment"># QTableWidget.AnyKeyPressed 16 按下任意键就能修改 </span></span><br><span class="line">      <span class="comment"># QTableWidget.AllEditTriggers 31 以上条件全包括</span></span><br><span class="line">      self.table.setEditTriggers(QTableWidget.NoEditTriggers)</span><br><span class="line">    </span><br><span class="line">      <span class="comment"># QTableWidget.SelectItems 0 选中单个单元格 </span></span><br><span class="line">      <span class="comment"># QTableWidget.SelectRows 1 选中一行 </span></span><br><span class="line">      <span class="comment"># QTableWidget.SelectColumns 2 选中一列</span></span><br><span class="line">      self.table.setSelectionBehavior(QTableWidget.SelectColumns)</span><br><span class="line">    </span><br><span class="line">      <span class="comment"># 设定的选择模式： </span></span><br><span class="line">      <span class="comment"># QTableWidget.NoSelection 不能选择 </span></span><br><span class="line">      <span class="comment"># QTableWidget.SingleSelection 选中单个目标 </span></span><br><span class="line">      <span class="comment"># QTableWidget.MultiSelection 选中多个目标 </span></span><br><span class="line">      <span class="comment"># QTableWidget.ExtendedSelection shift键的连续选择 </span></span><br><span class="line">      <span class="comment"># QTableWidget.ContiguousSelection ctrl键的不连续的多个选择</span></span><br><span class="line">      self.table.setSelectionMode(QTableWidget.SingleSelection  )</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>自动调整单元格大小</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.table.resizeColumnsToContents()</span><br><span class="line">self.table.resizeRowsToContents()</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>单元格设置</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.table.setColumnWidth(i,j) <span class="comment"># 设置第i+1列宽度j</span></span><br><span class="line">self.table.setRowHeight(i,j) <span class="comment"># 设置第i+1行高度j</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#self.table.setFrameShape(QFrame.HLine) # 设定样式</span></span><br><span class="line"><span class="comment">#self.table.setShowGrid(False)  # False不显示网格线，True显示网格线</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>插入行/列</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">row_count = self.table.rowCount()</span><br><span class="line">self.table.insertRow(row_count)</span><br><span class="line"></span><br><span class="line">col_count = self.table.columnCount()</span><br><span class="line">self.table.insertColumn(col_count)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>去除行/列</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">row_count = self.table.rowCount()</span><br><span class="line">self.table.removeRow(row_count<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">col_count = self.table.columnCount()</span><br><span class="line">self.table.removeColumn(col_count<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>清空表格</strong></p>
<blockquote>
<p>因为会连表头一起清空，需要重新设置表头</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.table.clear()       self.table.setHorizontalHeaderLabels(self.horizontalHeader)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取单元格内容</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = self.table.item(rowindex, colindex).text()</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>设置单元格内容</strong></p>
<blockquote>
<p>注意，需要确认text为str</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.table.setItem(rowindex, colindex, QTableWidgetItem(str(text)))</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>窗口美化</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.setWindowOpacity(<span class="number">0.9</span>)  <span class="comment"># 设置窗口透明度</span></span><br><span class="line">self.setWindowTitle(<span class="string">"XXX系统"</span>)</span><br><span class="line">self.setWindowIcon(QIcon(<span class="string">'GitHub.png'</span>))	<span class="comment"># 图标</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>PyQt</category>
      </categories>
      <tags>
        <tag>PyQt</tag>
      </tags>
  </entry>
  <entry>
    <title>书单&amp;影单&amp;歌单</title>
    <url>/posts/e9d60c24/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="书单（人文）"><a href="#书单（人文）" class="headerlink" title="书单（人文）"></a>书单（人文）</h1><ul>
<li><p>最好的告别</p>
</li>
<li><p>尤瓦尔赫拉利三部曲</p>
</li>
<li><p>中县干部</p>
<p>乡土中国</p>
</li>
<li><p>阿撒托斯之书(Book of Azathoth)</p>
<p> 塞拉伊诺断章(Celaeno Fragments)</p>
<p> 水神克塔亚特(Cthaat Aquadingen)</p>
<p> 尸食教典仪(Cultes des Goules)</p>
<p> 死灵之书(Necronomicon)</p>
<p> 纳克特抄本(The Pnakotic Manuscripts)</p>
<p> 拉莱耶文本(The R’lyeh Text)</p>
<p> 格拉基启示录(Revelations of Glaaki)</p>
<p> 巨噬蠕虫赞歌(Dhol Chants)</p>
<p> 波纳佩圣典(Ponape Scripture)</p>
<p> 蠕虫之秘密(De Vermis Mysteriis)</p>
<p> 格·哈恩断章(G’harne Fragments)</p>
<p> 伊波恩之书(Liber Ivonis)</p>
<p> 断罪之书(Liber-Damnatus)</p>
<p> 多基安之书(Book of Dzyan)</p>
<p> 苏塞克斯草稿(The Sussex Manuscript)</p>
<p> 埃尔特顿陶片(Eltdown Shards)</p>
<p> 玄君七章秘经(The Seven Cryptical Books of Hsan)</p>
</li>
</ul>
<h1 id="书单（技术）"><a href="#书单（技术）" class="headerlink" title="书单（技术）"></a>书单（技术）</h1><ul>
<li><input checked="" disabled="" type="checkbox"> 深入浅出程序设计竞赛（基础篇）</li>
<li><input checked="" disabled="" type="checkbox"> 大话数据结构</li>
<li><input checked="" disabled="" type="checkbox"> 算法图解</li>
<li><input checked="" disabled="" type="checkbox"> python tricks</li>
<li><input checked="" disabled="" type="checkbox"> effective python</li>
<li><input checked="" disabled="" type="checkbox"> python3 网络爬虫开发实战</li>
<li><input checked="" disabled="" type="checkbox"> GitHub入门与实践</li>
<li><input checked="" disabled="" type="checkbox"> MySQL必知必会</li>
<li><input disabled="" type="checkbox"> 图解HTTP+图解TCP/IP</li>
<li><input disabled="" type="checkbox"> python cookbook</li>
<li><input disabled="" type="checkbox"> 流畅的python</li>
<li><input disabled="" type="checkbox"> 利用python进行数据分析</li>
<li><input disabled="" type="checkbox"> flask web开发</li>
<li><input disabled="" type="checkbox"> 算法入门经典（紫书+绿书+蓝书）</li>
<li><input disabled="" type="checkbox"> 挑战程序设计竞赛</li>
<li><input disabled="" type="checkbox"> 算法导论</li>
<li><input disabled="" type="checkbox"> 算法 第四版</li>
<li><input disabled="" type="checkbox"> 深入理解计算机系统（csapp)</li>
</ul>
<h1 id="影单"><a href="#影单" class="headerlink" title="影单"></a>影单</h1><ol>
<li>汉江怪物</li>
<li>寂静岭（silent hill）</li>
<li>电锯惊魂6：霍夫曼、保险、高利贷</li>
<li>tenet</li>
<li>徒手攀岩</li>
<li>阿凡达、斯巴达300勇士</li>
<li>刺客信条</li>
</ol>
<h1 id="歌单"><a href="#歌单" class="headerlink" title="歌单"></a>歌单</h1><ul>
<li><p>李闰珉（Yiruma）</p>
<blockquote>
<p>你的心河 River Flows in You</p>
<p>恰空舞 Chaconne </p>
<p>雨的印记 Kiss the rain</p>
<p>When The Love Falls</p>
<p>Do You?</p>
<p>Love Me</p>
</blockquote>
</li>
<li><p>班得瑞</p>
<blockquote>
<p>雪之梦 snowdreams</p>
<p>安妮的仙境 Annie’s Wonderland</p>
<p>追梦人 </p>
<p>童年记忆</p>
<p>变幻的风</p>
</blockquote>
</li>
<li><p>久石让</p>
<blockquote>
<p>春天 spring</p>
<p>菊次郎的夏天 Summer</p>
<p>The Name 0f Life</p>
<p>Okuribito</p>
<p>Cave of Mind</p>
<p>Hana-Bi</p>
<p>Ponyo</p>
<p>Path 0f The Wind</p>
<p>The Wind Rises Soundtrack</p>
<p>Madness</p>
<p>Totoro Theme</p>
<p>Asia Dream Song</p>
<p>View of Stlence</p>
</blockquote>
</li>
<li><p>理查德·克莱德曼</p>
<blockquote>
<p>梦中的婚礼 Mariage d’amour</p>
<p>水边的阿狄丽娜 Ballade pour Adeline</p>
<p>命运<br>爱的协奏曲<br>秋日私语<br>爱之梦<br>梦里的故事<br>绿袖子<br>玫瑰色的人生<br>献给爱丽丝<br>摇篮曲<br>达依女士<br>埃莉娜<br>神奇世界伊甸园<br>秘密的庭院<br>拉-梅尔<br>爱的旋律<br>海边的星空<br>给母亲的信<br>德朗的微笑<br>威尼斯之旅<br>思乡曲<br>柔如彩虹<br>伤感乐曲<br>冷藏的爱<br>爱的纪念<br>爱情的故事<br>蓝色的爱<br>人鬼情未了<br>童年的回忆钢琴曲</p>
</blockquote>
</li>
<li><p>其他</p>
<blockquote>
<p>所念皆星河</p>
<p>卡农</p>
<p>帕萨卡利亚变奏 Passacaglia</p>
<p>A Thousand Years —《暮光之城4：破晓(上)》插曲</p>
<p>Always with me  —《千与千寻》片尾曲</p>
<p>花之舞 Flower Dance</p>
<p>星际安魂曲 Astral Requiem</p>
</blockquote>
</li>
<li><p>待记录</p>
<blockquote>
<p>德彪西</p>
<p>李斯特</p>
<p>马克西姆</p>
</blockquote>
</li>
</ul>
<h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><ol>
<li>8.13 GitHub使用token</li>
</ol>
]]></content>
      <categories>
        <category>records</category>
      </categories>
      <tags>
        <tag>records</tag>
      </tags>
  </entry>
  <entry>
    <title>动态二维码制作</title>
    <url>/posts/b9d139fd/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>MyQR库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> MyQR <span class="keyword">import</span> myqr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_QRcode</span><span class="params">(imgname,url)</span>:</span></span><br><span class="line">    myqr.run(words=url,</span><br><span class="line">             picture=<span class="string">f'<span class="subst">&#123;imgname&#125;</span>.jpg'</span>,</span><br><span class="line">             colorized=<span class="literal">True</span>,    <span class="comment"># True：彩色，False：黑白</span></span><br><span class="line">             save_name=<span class="string">f'<span class="subst">&#123;imgname&#125;</span>_qrcode.png'</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>package</category>
      </categories>
      <tags>
        <tag>package</tag>
      </tags>
  </entry>
  <entry>
    <title>pygame入门之二:拼图游戏</title>
    <url>/posts/33aa5907/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="游戏截图"><a href="#游戏截图" class="headerlink" title="游戏截图"></a>游戏截图</h1><p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0927-1.jpg" alt="0927-1"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0927-2.jpg" alt="0927-2"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0927-3.jpg" alt="0927-3"></p>
<h1 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#39;&#39;配置类&#39;&#39;&#39;</span><br><span class="line">class CFG:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.SCREENSIZE &#x3D; (640, 640)</span><br><span class="line">        self.PICTURE_ROOT_DIR &#x3D; os.path.join(os.getcwd(), &#39;你的图片文件夹&#39;)</span><br><span class="line">        self.FONTPATH &#x3D; os.path.join(os.getcwd(), &#39;你的字体文件&#39;) # 例如simsun.ttc</span><br><span class="line">        self.BACKGROUNDCOLOR &#x3D; (255, 255, 255)</span><br><span class="line">        self.FPS &#x3D; 30</span><br><span class="line">        self.NUMRANDOM &#x3D; 50    # 随机打乱拼图次数</span><br><span class="line"></span><br><span class="line">cfg&#x3D;CFG()</span><br></pre></td></tr></table></figure>



<h1 id="打乱拼图"><a href="#打乱拼图" class="headerlink" title="打乱拼图"></a>打乱拼图</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def newGameBoard(num_rows, num_cols, num_cells):</span><br><span class="line">    board &#x3D; [i for i in range(num_cells)]</span><br><span class="line">    # 去掉右下角的一块作为空白</span><br><span class="line">    blank_cell_idx &#x3D; num_cells - 1</span><br><span class="line">    board[blank_cell_idx] &#x3D; -1</span><br><span class="line">    for i in range(cfg.NUMRANDOM*num_rows): # n*n的拼图，打乱次数为50*n</span><br><span class="line">        direction &#x3D; random.randint(0, 3)</span><br><span class="line">        if direction &#x3D;&#x3D; 0:</span><br><span class="line">            blank_cell_idx &#x3D; moveLeft(board, blank_cell_idx, num_cols)</span><br><span class="line">        elif direction &#x3D;&#x3D; 1:</span><br><span class="line">            blank_cell_idx &#x3D; moveRight(board, blank_cell_idx, num_cols)</span><br><span class="line">        elif direction &#x3D;&#x3D; 2:</span><br><span class="line">            blank_cell_idx &#x3D; moveUp(board, blank_cell_idx, num_rows, num_cols)</span><br><span class="line">        elif direction &#x3D;&#x3D; 3:</span><br><span class="line">            blank_cell_idx &#x3D; moveDown(board, blank_cell_idx, num_cols)</span><br><span class="line">    return board, blank_cell_idx</span><br></pre></td></tr></table></figure>



<h1 id="开始界面"><a href="#开始界面" class="headerlink" title="开始界面"></a>开始界面</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#39;&#39;游戏开始界面&#39;&#39;&#39;</span><br><span class="line">def gameStart(screen, width, height):</span><br><span class="line">    screen.fill(cfg.BACKGROUNDCOLOR)</span><br><span class="line"></span><br><span class="line">    tfont &#x3D; pygame.font.Font(cfg.FONTPATH, width &#x2F;&#x2F; 4)</span><br><span class="line">    title &#x3D; tfont.render(&#39;Jigsaw&#39;, True, (255, 0, 0))</span><br><span class="line">    trect &#x3D; title.get_rect()</span><br><span class="line">    trect.midtop &#x3D; (width &#x2F; 2, height &#x2F; 10)</span><br><span class="line">    screen.blit(title, trect)</span><br><span class="line"></span><br><span class="line">    cfont &#x3D; pygame.font.Font(cfg.FONTPATH, width &#x2F;&#x2F; 20)</span><br><span class="line">    content1 &#x3D; cfont.render(&#39;Press number key to start&#39;, True, (0, 0, 255))</span><br><span class="line">    content2 &#x3D; cfont.render(&#39;Alternatives：3*3 4*4 …… 9*9&#39;, True, (0, 0, 0))</span><br><span class="line">    crect1 &#x3D; content1.get_rect()</span><br><span class="line">    crect1.midtop &#x3D; (width &#x2F; 2, height &#x2F; 2.2)</span><br><span class="line">    crect2 &#x3D; content2.get_rect()</span><br><span class="line">    crect2.midtop &#x3D; (width &#x2F; 2, height &#x2F; 1.8)</span><br><span class="line">    screen.blit(content1, crect1)</span><br><span class="line">    screen.blit(content2, crect2)</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line">        for event in pygame.event.get():</span><br><span class="line">            if (event.type &#x3D;&#x3D; pygame.QUIT) or (event.type &#x3D;&#x3D; pygame.KEYDOWN and event.key &#x3D;&#x3D; pygame.K_ESCAPE):</span><br><span class="line">                pygame.quit()</span><br><span class="line">                sys.exit()</span><br><span class="line">            elif event.type &#x3D;&#x3D; pygame.KEYDOWN:</span><br><span class="line">                for i in range(2,10):</span><br><span class="line">                    if event.key &#x3D;&#x3D; ord(str(i)):</span><br><span class="line">                        return i</span><br><span class="line">        pygame.display.update()</span><br></pre></td></tr></table></figure>





<h1 id="移动方块"><a href="#移动方块" class="headerlink" title="移动方块"></a>移动方块</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def moveRight(board, blank_cell_idx, num_cols):</span><br><span class="line">    if blank_cell_idx % num_cols &#x3D;&#x3D; 0: return blank_cell_idx</span><br><span class="line">    board[blank_cell_idx - 1], board[blank_cell_idx] &#x3D; board[blank_cell_idx], board[blank_cell_idx - 1]</span><br><span class="line">    return blank_cell_idx - 1</span><br><span class="line">    </span><br><span class="line">def moveLeft(board, blank_cell_idx, num_cols):</span><br><span class="line">    if (blank_cell_idx + 1) % num_cols &#x3D;&#x3D; 0: return blank_cell_idx</span><br><span class="line">    board[blank_cell_idx + 1], board[blank_cell_idx] &#x3D; board[blank_cell_idx], board[blank_cell_idx + 1]</span><br><span class="line">    return blank_cell_idx + 1</span><br><span class="line">    </span><br><span class="line">def moveDown(board, blank_cell_idx, num_cols):</span><br><span class="line">    if blank_cell_idx &lt; num_cols: return blank_cell_idx</span><br><span class="line">    board[blank_cell_idx - num_cols], board[blank_cell_idx] &#x3D; board[blank_cell_idx], board[blank_cell_idx - num_cols]</span><br><span class="line">    return blank_cell_idx - num_cols</span><br><span class="line">    </span><br><span class="line">def moveUp(board, blank_cell_idx, num_rows, num_cols):</span><br><span class="line">    if blank_cell_idx &gt;&#x3D; (num_rows - 1) * num_cols: return blank_cell_idx</span><br><span class="line">    board[blank_cell_idx + num_cols], board[blank_cell_idx] &#x3D; board[blank_cell_idx], board[blank_cell_idx + num_cols]</span><br><span class="line">    return blank_cell_idx + num_cols</span><br></pre></td></tr></table></figure>



<h1 id="判断游戏是否结束"><a href="#判断游戏是否结束" class="headerlink" title="判断游戏是否结束"></a>判断游戏是否结束</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def isGameOver(board, size):</span><br><span class="line">    assert isinstance(size, int)</span><br><span class="line">    num_cells &#x3D; size * size</span><br><span class="line">    for i in range(num_cells - 1):</span><br><span class="line">        if board[i] !&#x3D; i: return False</span><br><span class="line">    return True</span><br></pre></td></tr></table></figure>



<h1 id="结束界面"><a href="#结束界面" class="headerlink" title="结束界面"></a>结束界面</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def gameOver(screen, width, height):</span><br><span class="line">    screen.fill(cfg.BACKGROUNDCOLOR)</span><br><span class="line"></span><br><span class="line">    tfont &#x3D; pygame.font.Font(cfg.FONTPATH, width &#x2F;&#x2F; 8)</span><br><span class="line">    title &#x3D; tfont.render(&#39;Success!&#39;, True, (255, 0, 0))</span><br><span class="line">    trect &#x3D; title.get_rect()</span><br><span class="line">    trect.midtop &#x3D; (width &#x2F; 2, height &#x2F; 3.5)</span><br><span class="line">    screen.blit(title, trect)</span><br><span class="line"></span><br><span class="line">    cfont &#x3D; pygame.font.Font(cfg.FONTPATH, width &#x2F;&#x2F; 25)</span><br><span class="line">    content &#x3D; cfont.render(&#39;press space to try again&#39;, False, (0,0,0))</span><br><span class="line">    crect &#x3D; content.get_rect()</span><br><span class="line">    crect.midtop &#x3D; (width &#x2F; 2, height &#x2F; 2)</span><br><span class="line">    screen.blit(content, crect)</span><br><span class="line"></span><br><span class="line">    pygame.display.update()</span><br><span class="line">    while True:</span><br><span class="line">        for event in pygame.event.get():</span><br><span class="line">            if event.type &#x3D;&#x3D; pygame.QUIT:</span><br><span class="line">                pygame.quit()</span><br><span class="line">                sys.exit()</span><br><span class="line">            if event.type &#x3D;&#x3D; pygame.KEYDOWN:</span><br><span class="line">                if event.key &#x3D;&#x3D; pygame.K_ESCAPE:</span><br><span class="line">                    pygame.quit()</span><br><span class="line">                    sys.exit()</span><br><span class="line">                if event.key &#x3D;&#x3D; pygame.K_SPACE: # 按空格重新开始游戏</span><br><span class="line">                    main()</span><br><span class="line">        pygame.display.update()</span><br></pre></td></tr></table></figure>



<h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def main():</span><br><span class="line">    pygame.init()</span><br><span class="line">    clock &#x3D; pygame.time.Clock()</span><br><span class="line">    # 加载图片</span><br><span class="line">    img &#x3D; pygame.image.load(GetImage(cfg.PICTURE_ROOT_DIR))</span><br><span class="line">    img &#x3D; pygame.transform.scale(img, cfg.SCREENSIZE)</span><br><span class="line">    img_rect &#x3D; img.get_rect()</span><br><span class="line">    # 设置窗口</span><br><span class="line">    screen &#x3D; pygame.display.set_mode(cfg.SCREENSIZE)</span><br><span class="line">    pygame.display.set_caption(&#39;Jigsaw&#39;)</span><br><span class="line">    # 游戏开始界面</span><br><span class="line">    size &#x3D; gameStart(screen, img_rect.width, img_rect.height)</span><br><span class="line">    assert isinstance(size, int)</span><br><span class="line">    num_rows, num_cols &#x3D; size, size</span><br><span class="line">    num_cells &#x3D; size * size</span><br><span class="line">    # 计算Cell大小</span><br><span class="line">    cell_width &#x3D; img_rect.width &#x2F;&#x2F; num_cols</span><br><span class="line">    cell_height &#x3D; img_rect.height &#x2F;&#x2F; num_rows</span><br><span class="line">    # 避免初始化为原图</span><br><span class="line">    while True:</span><br><span class="line">        game_board, blank_cell_idx &#x3D; newGameBoard(num_rows, num_cols, num_cells)</span><br><span class="line">        if not isGameOver(game_board, size):</span><br><span class="line">            break</span><br><span class="line">    # 主循环</span><br><span class="line">    is_running &#x3D; True</span><br><span class="line">    while is_running:</span><br><span class="line">        for event in pygame.event.get():</span><br><span class="line">            if (event.type &#x3D;&#x3D; pygame.QUIT) or (event.type &#x3D;&#x3D; pygame.KEYDOWN and event.key &#x3D;&#x3D; pygame.K_ESCAPE):</span><br><span class="line">                pygame.quit()</span><br><span class="line">                sys.exit()</span><br><span class="line">            elif event.type &#x3D;&#x3D; pygame.KEYDOWN:  # wsad操作</span><br><span class="line">                if event.key &#x3D;&#x3D; pygame.K_UP or event.key &#x3D;&#x3D; ord(&#39;w&#39;):</span><br><span class="line">                    blank_cell_idx &#x3D; moveUp(game_board, blank_cell_idx, num_rows, num_cols)</span><br><span class="line">                elif event.key &#x3D;&#x3D; pygame.K_DOWN or event.key &#x3D;&#x3D; ord(&#39;s&#39;):</span><br><span class="line">                    blank_cell_idx &#x3D; moveDown(game_board, blank_cell_idx, num_cols)</span><br><span class="line">                elif event.key &#x3D;&#x3D; pygame.K_LEFT or event.key &#x3D;&#x3D; ord(&#39;a&#39;):</span><br><span class="line">                    blank_cell_idx &#x3D; moveLeft(game_board, blank_cell_idx, num_cols)</span><br><span class="line">                elif event.key &#x3D;&#x3D; pygame.K_RIGHT or event.key &#x3D;&#x3D; ord(&#39;d&#39;):</span><br><span class="line">                    blank_cell_idx &#x3D; moveRight(game_board, blank_cell_idx, num_cols)</span><br><span class="line">            elif event.type &#x3D;&#x3D; pygame.MOUSEBUTTONDOWN and event.button &#x3D;&#x3D; 1:</span><br><span class="line">                x, y &#x3D; pygame.mouse.get_pos()  # 鼠标点击</span><br><span class="line">                x_pos &#x3D; x &#x2F;&#x2F; cell_width</span><br><span class="line">                y_pos &#x3D; y &#x2F;&#x2F; cell_height</span><br><span class="line">                idx &#x3D; x_pos + y_pos * num_cols</span><br><span class="line">                if idx &#x3D;&#x3D; blank_cell_idx - 1:</span><br><span class="line">                    blank_cell_idx &#x3D; moveRight(game_board, blank_cell_idx, num_cols)</span><br><span class="line">                elif idx &#x3D;&#x3D; blank_cell_idx + 1:</span><br><span class="line">                    blank_cell_idx &#x3D; moveLeft(game_board, blank_cell_idx, num_cols)</span><br><span class="line">                elif idx &#x3D;&#x3D; blank_cell_idx + num_cols:</span><br><span class="line">                    blank_cell_idx &#x3D; moveUp(game_board, blank_cell_idx, num_rows, num_cols)</span><br><span class="line">                elif idx &#x3D;&#x3D; blank_cell_idx - num_cols:</span><br><span class="line">                    blank_cell_idx &#x3D; moveDown(game_board, blank_cell_idx, num_cols)</span><br><span class="line">        # 判断游戏是否结束</span><br><span class="line">        if isGameOver(game_board, size):</span><br><span class="line">            game_board[blank_cell_idx] &#x3D; num_cells - 1</span><br><span class="line">            is_running &#x3D; False</span><br><span class="line"></span><br><span class="line">        screen.fill(cfg.BACKGROUNDCOLOR)</span><br><span class="line">        for i in range(num_cells):</span><br><span class="line">            if game_board[i] &#x3D;&#x3D; -1:</span><br><span class="line">                continue</span><br><span class="line">            x_pos &#x3D; i &#x2F;&#x2F; num_cols</span><br><span class="line">            y_pos &#x3D; i % num_cols</span><br><span class="line">            rect &#x3D; pygame.Rect(y_pos * cell_width, x_pos * cell_height, cell_width, cell_height)</span><br><span class="line">            img_area &#x3D; pygame.Rect((game_board[i] % num_cols) * cell_width, (game_board[i] &#x2F;&#x2F; num_cols) * cell_height,</span><br><span class="line">                                   cell_width, cell_height)</span><br><span class="line">            screen.blit(img, rect, img_area)</span><br><span class="line">        for i in range(num_cols + 1):</span><br><span class="line">            pygame.draw.line(screen, (0,0,0), (i * cell_width, 0), (i * cell_width, img_rect.height))</span><br><span class="line">        for i in range(num_rows + 1):</span><br><span class="line">            pygame.draw.line(screen, (0,0,0), (0, i * cell_height), (img_rect.width, i * cell_height))</span><br><span class="line">        pygame.display.update()</span><br><span class="line">        clock.tick(cfg.FPS)</span><br><span class="line">    # 游戏结束界面</span><br><span class="line">    gameOver(screen, img_rect.width, img_rect.height)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pygame</category>
      </categories>
      <tags>
        <tag>pygame</tag>
      </tags>
  </entry>
  <entry>
    <title>logisim制作8位模型计算机</title>
    <url>/posts/5ecab096/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><ol>
<li><p><strong>CPU</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0908-1.jpg" alt="0908-1"></p>
</li>
<li><p><strong>控制器</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0908-2.jpg" alt="0908-2"></p>
</li>
<li><p><strong>时序发生器</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0908-3.jpg" alt="0908-3"></p>
</li>
<li><p><strong>指令译码器</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0908-4.jpg" alt="0908-4"></p>
</li>
<li><p><strong>ALU</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0908-5.jpg" alt="0908-5"></p>
</li>
</ol>
<h1 id="指令分析"><a href="#指令分析" class="headerlink" title="指令分析"></a>指令分析</h1><blockquote>
<p>指令存放于ROM内</p>
</blockquote>
<ol>
<li>09H:将09位置的存储器的值（20H）存入A寄存器</li>
<li>1aH:将10位置的存储器的值（11H）加上A的值，存入A寄存器</li>
<li>1bH:将11位置的存储器的值（12H）加上A的值，存入A寄存器</li>
<li>2cH:将11位置的存储器的值（13H）与A的值做减法，存入A寄存器</li>
<li>2dH:将12位置的存储器的值（14H）与A的值做减法，存入A寄存器</li>
<li>eeH:输出A寄存器中的值</li>
<li>ffH:停机</li>
</ol>
<h1 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h1><blockquote>
<p>按指令计算: 20H + 11H + 12H - 13H - 14H = 1CH (如图，显示”1C”)</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0908-6.jpg" alt="0908-6"></p>
]]></content>
      <categories>
        <category>logisim</category>
      </categories>
      <tags>
        <tag>logisim</tag>
      </tags>
  </entry>
  <entry>
    <title>pygame入门之四:线的艺术</title>
    <url>/posts/c138c5a8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="太极"><a href="#太极" class="headerlink" title="太极"></a>太极</h1><p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0929-1.jpg" alt="0929-1"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import math</span><br><span class="line">import pygame</span><br><span class="line"></span><br><span class="line">white&#x3D;255,255,255</span><br><span class="line">black&#x3D;0,0,0</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">pygame.display.set_caption(&quot;TaiChi&quot;)</span><br><span class="line">screen &#x3D; pygame.display.set_mode([800,800])</span><br><span class="line">screen.fill(white)</span><br><span class="line"></span><br><span class="line">def draw():</span><br><span class="line">    pygame.draw.circle(screen,black,[400,400],300,0)</span><br><span class="line">    pygame.draw.rect(screen, white,[100,400,700,400],0)</span><br><span class="line">    pygame.draw.circle(screen,black,[250,400],150,0)</span><br><span class="line">    pygame.draw.circle(screen,white,[550,400],150,0)</span><br><span class="line">    pygame.draw.circle(screen,white,[225,400],50,0)</span><br><span class="line">    pygame.draw.circle(screen,black,[575,400],50,0)</span><br><span class="line">    pygame.draw.arc(screen,black,[100,100,600,600],math.pi,2*math.pi,1)</span><br><span class="line"></span><br><span class="line">is_running &#x3D; True</span><br><span class="line">while is_running:</span><br><span class="line">    for event in pygame.event.get():</span><br><span class="line">        if event.type &#x3D;&#x3D; pygame.QUIT:</span><br><span class="line">            is_running &#x3D; False</span><br><span class="line">        if event.type &#x3D;&#x3D; pygame.KEYDOWN and event.key &#x3D;&#x3D; ord(&#39;s&#39;):  # 按s保存图片</span><br><span class="line">            pygame.image.save(screen, &#39;TaiChi.jpg&#39;)</span><br><span class="line">    draw()</span><br><span class="line">    pygame.display.update()</span><br><span class="line">pygame.quit()</span><br></pre></td></tr></table></figure>



<h1 id="分形树"><a href="#分形树" class="headerlink" title="分形树"></a>分形树</h1><p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0929-5.jpg" alt="0929-5"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pygame</span><br><span class="line">import math</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">white&#x3D;255,255,255</span><br><span class="line">black&#x3D;0,0,0</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">pygame.display.set_caption(&quot;Tree&quot;)</span><br><span class="line">pygame.display.set_mode([600,600])</span><br><span class="line">screen &#x3D; pygame.display.get_surface()</span><br><span class="line">clock &#x3D; pygame.time.Clock()</span><br><span class="line"></span><br><span class="line">def draw(depth&#x3D;10,angle&#x3D;-90, x&#x3D;300, y&#x3D;600):</span><br><span class="line">    if depth:</span><br><span class="line">        x1,y1&#x3D;x,y</span><br><span class="line">        x2,y2 &#x3D; x1 + int(math.cos(math.radians(angle)) * depth * 10.0),y1 + int(math.sin(math.radians(angle)) * depth * 10.0)</span><br><span class="line">        color&#x3D;(random.randint(0,255),random.randint(0,255),random.randint(0,255))</span><br><span class="line">        pygame.draw.line(screen, color, (x1, y1), (x2, y2), 2)</span><br><span class="line">        draw(depth - 1,angle - 20, x2, y2,)</span><br><span class="line">        draw(depth - 1,angle + 20, x2, y2, )</span><br><span class="line"></span><br><span class="line">is_running &#x3D; True</span><br><span class="line">depth&#x3D;1</span><br><span class="line"></span><br><span class="line">while is_running:</span><br><span class="line">    for event in pygame.event.get():</span><br><span class="line">        if event.type &#x3D;&#x3D; pygame.QUIT:</span><br><span class="line">            is_running &#x3D; False</span><br><span class="line">        if event.type &#x3D;&#x3D; pygame.KEYDOWN and event.key &#x3D;&#x3D; ord(&#39;s&#39;):  # 按s保存图片</span><br><span class="line">            pygame.image.save(screen, &#39;Tree.jpg&#39;)</span><br><span class="line">    depth+&#x3D;1</span><br><span class="line">    if depth&gt;10:</span><br><span class="line">        depth%&#x3D;10</span><br><span class="line">        screen.fill(black)    # 清屏</span><br><span class="line">    draw(depth)</span><br><span class="line">    clock.tick(5)</span><br><span class="line">    pygame.display.update()</span><br><span class="line">pygame.quit()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pygame</category>
      </categories>
      <tags>
        <tag>pygame</tag>
      </tags>
  </entry>
  <entry>
    <title>pygame入门之一:贪吃蛇</title>
    <url>/posts/730e8d91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="游戏截图"><a href="#游戏截图" class="headerlink" title="游戏截图"></a>游戏截图</h1><p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0926-1.jpg" alt="0926-1"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0926-2.jpg" alt="0926-2"></p>
<h1 id="引入库"><a href="#引入库" class="headerlink" title="引入库"></a>引入库</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import copy</span><br><span class="line">import random</span><br><span class="line">import sys</span><br><span class="line">import pygame</span><br></pre></td></tr></table></figure>



<h1 id="初始化模型"><a href="#初始化模型" class="headerlink" title="初始化模型"></a>初始化模型</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 蛇模型</span><br><span class="line">snake_list &#x3D; [[10, 10]]</span><br><span class="line"></span><br><span class="line"># 食物的模型</span><br><span class="line">x &#x3D; random.randint(10, 490)</span><br><span class="line">y &#x3D; random.randint(10, 490)</span><br><span class="line">food_point &#x3D; [x, y]</span><br><span class="line">food_r, food_g, food_b &#x3D; random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)</span><br><span class="line">food_color &#x3D; pygame.Color(food_r, food_g, food_b)</span><br><span class="line"></span><br><span class="line"># 初始方向</span><br><span class="line">move_up &#x3D; False</span><br><span class="line">move_down &#x3D; False</span><br><span class="line">move_left &#x3D; False</span><br><span class="line">move_right &#x3D; True</span><br><span class="line"></span><br><span class="line"># 初始分数</span><br><span class="line">score&#x3D;0</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">screen &#x3D; pygame.display.set_mode((500, 500))    # 画布大小</span><br><span class="line">title &#x3D; pygame.display.set_caption(&#39;贪吃蛇&#39;)   # 名字</span><br><span class="line">clock &#x3D; pygame.time.Clock() # 游戏时钟</span><br></pre></td></tr></table></figure>



<h1 id="获取键盘事件"><a href="#获取键盘事件" class="headerlink" title="获取键盘事件"></a>获取键盘事件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for event in pygame.event.get():    # 获取键盘事件</span><br><span class="line">    if event.type &#x3D;&#x3D; pygame.QUIT:</span><br><span class="line">        running&#x3D;False</span><br><span class="line">        sys.exit()</span><br><span class="line">    if event.type &#x3D;&#x3D; pygame.KEYDOWN:</span><br><span class="line">        if event.key &#x3D;&#x3D; pygame.K_DOWN or event.key &#x3D;&#x3D; pygame.K_s:</span><br><span class="line">            move_up &#x3D; False</span><br><span class="line">            move_down &#x3D; True</span><br><span class="line">            move_left &#x3D; False</span><br><span class="line">            move_right &#x3D; False</span><br><span class="line">        if event.key &#x3D;&#x3D; pygame.K_UP or event.key &#x3D;&#x3D; pygame.K_w:</span><br><span class="line">            move_up &#x3D; True</span><br><span class="line">            move_down &#x3D; False</span><br><span class="line">            move_left &#x3D; False</span><br><span class="line">            move_right &#x3D; False</span><br><span class="line">        if event.key &#x3D;&#x3D; pygame.K_LEFT or event.key &#x3D;&#x3D; pygame.K_a:</span><br><span class="line">            move_up &#x3D; False</span><br><span class="line">            move_down &#x3D; False</span><br><span class="line">            move_left &#x3D; True</span><br><span class="line">            move_right &#x3D; False</span><br><span class="line">        if event.key &#x3D;&#x3D; pygame.K_RIGHT or event.key &#x3D;&#x3D; pygame.K_d:</span><br><span class="line">            move_up &#x3D; False</span><br><span class="line">            move_down &#x3D; False</span><br><span class="line">            move_left &#x3D; False</span><br><span class="line">            move_right &#x3D; True</span><br><span class="line">        if event.key &#x3D;&#x3D; pygame.K_ESCAPE:    # esc关闭</span><br><span class="line">            running&#x3D;False</span><br><span class="line">            sys.exit()</span><br><span class="line">        if event.key &#x3D;&#x3D;pygame.K_SPACE and not running:</span><br><span class="line">            running&#x3D;True</span><br><span class="line">            snake_list &#x3D; [[10, 10]]</span><br><span class="line">            score&#x3D;0</span><br></pre></td></tr></table></figure>



<h1 id="移动贪吃蛇"><a href="#移动贪吃蛇" class="headerlink" title="移动贪吃蛇"></a>移动贪吃蛇</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 身子移动</span><br><span class="line">   snake_len &#x3D; len(snake_list) - 1</span><br><span class="line">   while snake_len &gt; 0:</span><br><span class="line">       snake_list[snake_len] &#x3D; copy.deepcopy(snake_list[snake_len - 1])</span><br><span class="line">       snake_len -&#x3D; 1</span><br><span class="line"></span><br><span class="line">   # 蛇头移动</span><br><span class="line">   if move_up:</span><br><span class="line">       snake_list[snake_len][1] -&#x3D; 10</span><br><span class="line">       if snake_list[snake_len][1] &lt; 0:</span><br><span class="line">           snake_list[snake_len][1] &#x3D; 500</span><br><span class="line"></span><br><span class="line">   if move_down:</span><br><span class="line">       snake_list[snake_len][1] +&#x3D; 10</span><br><span class="line">       if snake_list[snake_len][1] &gt; 500:</span><br><span class="line">           snake_list[snake_len][1] &#x3D; 0</span><br><span class="line"></span><br><span class="line">   if move_left:</span><br><span class="line">       snake_list[snake_len][0] -&#x3D; 10</span><br><span class="line">       if snake_list[snake_len][0] &lt; 0:</span><br><span class="line">           snake_list[snake_len][0] &#x3D; 500</span><br><span class="line"></span><br><span class="line">   if move_right:</span><br><span class="line">       snake_list[snake_len][0] +&#x3D; 10</span><br><span class="line">       if snake_list[snake_len][0] &gt; 500:</span><br><span class="line">           snake_list[snake_len][0] &#x3D; 0</span><br></pre></td></tr></table></figure>



<h1 id="吃食物逻辑"><a href="#吃食物逻辑" class="headerlink" title="吃食物逻辑"></a>吃食物逻辑</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 蛇与食物碰撞检测</span><br><span class="line">if food_rect.collidepoint(snake_pos):</span><br><span class="line">    snake_list.append(food_point)</span><br><span class="line">    food_point &#x3D; [random.randint(10, 490), random.randint(10, 490)] # 重新生成食物</span><br><span class="line">    food_r, food_g, food_b &#x3D; random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)</span><br><span class="line">    food_color &#x3D; pygame.Color(food_r, food_g, food_b)</span><br><span class="line">    score+&#x3D;1</span><br><span class="line">    break</span><br></pre></td></tr></table></figure>



<h1 id="碰撞到自身逻辑"><a href="#碰撞到自身逻辑" class="headerlink" title="碰撞到自身逻辑"></a>碰撞到自身逻辑</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 吃到自己 结束游戏</span><br><span class="line">snake_head_rect &#x3D; snake_rect[0] # 蛇头</span><br><span class="line">count &#x3D; len(snake_rect)</span><br><span class="line">while count &gt; 1:</span><br><span class="line">	if snake_head_rect.colliderect(snake_rect[count - 1]): # 检测蛇头与身子的所有点</span><br><span class="line">		running&#x3D;False</span><br><span class="line">	count -&#x3D; 1</span><br></pre></td></tr></table></figure>



<h1 id="结束游戏"><a href="#结束游戏" class="headerlink" title="结束游戏"></a>结束游戏</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if not running:</span><br><span class="line">    show_text(screen, (20,200), &#39;GAME OVER!&#39;, (227, 29, 18), False, 100)</span><br><span class="line">    show_text(screen, (120,300), &#39;press space to try again&#39;, (223, 223, 223), False, 30)</span><br></pre></td></tr></table></figure>





<h1 id="显示文字函数"><a href="#显示文字函数" class="headerlink" title="显示文字函数"></a>显示文字函数</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def show_text(screen, pos, text, color, font_bold&#x3D;False, font_size&#x3D;60, font_italic&#x3D;False):</span><br><span class="line">    cur_font &#x3D; pygame.font.SysFont(&#39;宋体&#39;, font_size)</span><br><span class="line">    cur_font.set_bold(font_bold)</span><br><span class="line">    cur_font.set_italic(font_italic)</span><br><span class="line">    text_fmt &#x3D; cur_font.render(text, 1, color)</span><br><span class="line">    screen.blit(text_fmt, pos)</span><br></pre></td></tr></table></figure>



<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import copy</span><br><span class="line">import random</span><br><span class="line">import sys</span><br><span class="line">import pygame</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def show_text(screen, pos, text, color, font_bold&#x3D;False, font_size&#x3D;60, font_italic&#x3D;False):</span><br><span class="line">    cur_font &#x3D; pygame.font.SysFont(&#39;宋体&#39;, font_size)</span><br><span class="line">    cur_font.set_bold(font_bold)</span><br><span class="line">    cur_font.set_italic(font_italic)</span><br><span class="line">    text_fmt &#x3D; cur_font.render(text, 1, color)</span><br><span class="line">    screen.blit(text_fmt, pos)</span><br><span class="line"></span><br><span class="line"># 蛇模型</span><br><span class="line">snake_list &#x3D; [[10, 10]]</span><br><span class="line"></span><br><span class="line"># 食物的模型</span><br><span class="line">x &#x3D; random.randint(10, 490)</span><br><span class="line">y &#x3D; random.randint(10, 490)</span><br><span class="line">food_point &#x3D; [x, y]</span><br><span class="line">food_r, food_g, food_b &#x3D; random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)</span><br><span class="line">food_color &#x3D; pygame.Color(food_r, food_g, food_b)</span><br><span class="line"></span><br><span class="line"># 初始方向</span><br><span class="line">move_up &#x3D; False</span><br><span class="line">move_down &#x3D; False</span><br><span class="line">move_left &#x3D; False</span><br><span class="line">move_right &#x3D; True</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">screen &#x3D; pygame.display.set_mode((500, 500))    # 画布大小</span><br><span class="line">title &#x3D; pygame.display.set_caption(&#39;贪吃蛇&#39;)   # 名字</span><br><span class="line">clock &#x3D; pygame.time.Clock() # 游戏时钟</span><br><span class="line"></span><br><span class="line">running&#x3D;True    # 游戏运行标志</span><br><span class="line">score&#x3D;0</span><br><span class="line">while True:</span><br><span class="line">    clock.tick(20)  # 20fps</span><br><span class="line">    screen.fill([255, 255, 255])    # 背景填充</span><br><span class="line">    for event in pygame.event.get():    # 获取键盘事件</span><br><span class="line">        if event.type &#x3D;&#x3D; pygame.QUIT:</span><br><span class="line">            running&#x3D;False</span><br><span class="line">            sys.exit()</span><br><span class="line">        if event.type &#x3D;&#x3D; pygame.KEYDOWN:</span><br><span class="line">            if event.key &#x3D;&#x3D; pygame.K_DOWN or event.key &#x3D;&#x3D; pygame.K_s:</span><br><span class="line">                move_up &#x3D; False</span><br><span class="line">                move_down &#x3D; True</span><br><span class="line">                move_left &#x3D; False</span><br><span class="line">                move_right &#x3D; False</span><br><span class="line">            if event.key &#x3D;&#x3D; pygame.K_UP or event.key &#x3D;&#x3D; pygame.K_w:</span><br><span class="line">                move_up &#x3D; True</span><br><span class="line">                move_down &#x3D; False</span><br><span class="line">                move_left &#x3D; False</span><br><span class="line">                move_right &#x3D; False</span><br><span class="line">            if event.key &#x3D;&#x3D; pygame.K_LEFT or event.key &#x3D;&#x3D; pygame.K_a:</span><br><span class="line">                move_up &#x3D; False</span><br><span class="line">                move_down &#x3D; False</span><br><span class="line">                move_left &#x3D; True</span><br><span class="line">                move_right &#x3D; False</span><br><span class="line">            if event.key &#x3D;&#x3D; pygame.K_RIGHT or event.key &#x3D;&#x3D; pygame.K_d:</span><br><span class="line">                move_up &#x3D; False</span><br><span class="line">                move_down &#x3D; False</span><br><span class="line">                move_left &#x3D; False</span><br><span class="line">                move_right &#x3D; True</span><br><span class="line">            if event.key &#x3D;&#x3D; pygame.K_ESCAPE:    # esc关闭</span><br><span class="line">                running&#x3D;False</span><br><span class="line">                sys.exit()</span><br><span class="line">            if event.key &#x3D;&#x3D;pygame.K_SPACE and not running:</span><br><span class="line">                running&#x3D;True</span><br><span class="line">                snake_list &#x3D; [[10, 10]]</span><br><span class="line">                score&#x3D;0</span><br><span class="line"></span><br><span class="line">    # 身子移动</span><br><span class="line">    snake_len &#x3D; len(snake_list) - 1</span><br><span class="line">    while snake_len &gt; 0:</span><br><span class="line">        snake_list[snake_len] &#x3D; copy.deepcopy(snake_list[snake_len - 1])</span><br><span class="line">        snake_len -&#x3D; 1</span><br><span class="line"></span><br><span class="line">    # 蛇头移动</span><br><span class="line">    if move_up:</span><br><span class="line">        snake_list[snake_len][1] -&#x3D; 10</span><br><span class="line">        if snake_list[snake_len][1] &lt; 0:</span><br><span class="line">            snake_list[snake_len][1] &#x3D; 500</span><br><span class="line"></span><br><span class="line">    if move_down:</span><br><span class="line">        snake_list[snake_len][1] +&#x3D; 10</span><br><span class="line">        if snake_list[snake_len][1] &gt; 500:</span><br><span class="line">            snake_list[snake_len][1] &#x3D; 0</span><br><span class="line"></span><br><span class="line">    if move_left:</span><br><span class="line">        snake_list[snake_len][0] -&#x3D; 10</span><br><span class="line">        if snake_list[snake_len][0] &lt; 0:</span><br><span class="line">            snake_list[snake_len][0] &#x3D; 500</span><br><span class="line"></span><br><span class="line">    if move_right:</span><br><span class="line">        snake_list[snake_len][0] +&#x3D; 10</span><br><span class="line">        if snake_list[snake_len][0] &gt; 500:</span><br><span class="line">            snake_list[snake_len][0] &#x3D; 0</span><br><span class="line"></span><br><span class="line">    if running:</span><br><span class="line">        # 绘制得分</span><br><span class="line">        show_text(screen, (200,20), f&#39;score: &#123;score&#125;&#39;, (0, 0, 0), False, 30)</span><br><span class="line">        # 绘制食物</span><br><span class="line">        food_rect &#x3D; pygame.draw.circle(screen, food_color, food_point, 15)</span><br><span class="line">        # 绘制蛇</span><br><span class="line">        snake_rect &#x3D; []</span><br><span class="line">        for snake_pos in snake_list:</span><br><span class="line">            snake_rect.append(pygame.draw.circle(screen, food_color, snake_pos, 5))</span><br><span class="line"></span><br><span class="line">            # 蛇与食物碰撞检测</span><br><span class="line">            if food_rect.collidepoint(snake_pos):</span><br><span class="line">                snake_list.append(food_point)</span><br><span class="line">                food_point &#x3D; [random.randint(10, 490), random.randint(10, 490)] # 重新生成食物</span><br><span class="line">                food_r, food_g, food_b &#x3D; random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)</span><br><span class="line">                food_color &#x3D; pygame.Color(food_r, food_g, food_b)</span><br><span class="line">                score+&#x3D;1</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 吃到自己 结束游戏</span><br><span class="line">    snake_head_rect &#x3D; snake_rect[0] # 蛇头</span><br><span class="line">    count &#x3D; len(snake_rect)</span><br><span class="line">    while count &gt; 1:</span><br><span class="line">        if snake_head_rect.colliderect(snake_rect[count - 1]): # 检测蛇头与身子的所有点</span><br><span class="line">            running&#x3D;False</span><br><span class="line">        count -&#x3D; 1</span><br><span class="line"></span><br><span class="line">    if not running:</span><br><span class="line">        show_text(screen, (20,200), &#39;GAME OVER!&#39;, (227, 29, 18), False, 100)</span><br><span class="line">        show_text(screen, (120,300), &#39;press space to try again&#39;, (223, 223, 223), False, 30)</span><br><span class="line">    pygame.display.update()  # 绘制</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pygame</category>
      </categories>
      <tags>
        <tag>pygame</tag>
      </tags>
  </entry>
  <entry>
    <title>利用百度智能云处理图像</title>
    <url>/posts/334a03b2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近在学习PS的时候，需要上传自己的照片来完成一项作业</p>
<p>无奈照片见光死，希望能找到一个人像动漫化功能来美化一下</p>
<p>了解到<a href="https://ai.baidu.com/tech/imageprocess/selfie_anime?track=cp:ainsem|pf:pc|pp:chanpin-tuxiangzengqiang|pu:tuxiangtexiao-renxiangdongmanhua|ci:|kw:10073951" target="_blank" rel="noopener">百度大脑</a>已经开放了人像动漫化的功能，因此学习了一下云AI的调用方式，并作以下记录</p>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><blockquote>
<p><strong>人像动漫化</strong></p>
<p>运用对抗生成网络技术，结合人脸检测、头发分割、人像分割等技术，为用户量身定制千人千面的二次元动漫形象，并支持通过参数设置，生成戴口罩的二次元动漫人像</p>
</blockquote>
<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="https://ai.bdstatic.com/file/5772108AD3984D7DA45ABC4F08331DE0" alt="效果展示"></p>
<h1 id="调用接口"><a href="#调用接口" class="headerlink" title="调用接口"></a>调用接口</h1><blockquote>
<p><strong>请求示例</strong></p>
<p>HTTP 方法：<code>POST</code></p>
<p>请求URL： <code>https://aip.baidubce.com/rest/2.0/image-process/v1/style_trans</code></p>
<p>URL参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>access_token</td>
<td>通过API Key和Secret Key获取的access_token，参考”<a href="http://ai.baidu.com/docs#/Auth" target="_blank" rel="noopener">Access Token获取</a>”</td>
</tr>
</tbody></table>
<p>Header如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>Content-Type</td>
<td>application/x-www-form-urlencoded</td>
</tr>
</tbody></table>
<p>Body中放置请求参数，参数详情如下：</p>
<p><strong>请求参数</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>是否必选</th>
<th>类型</th>
<th>可选值范围</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>image</td>
<td>和url二选一</td>
<td>string</td>
<td>-</td>
<td>base64编码后大小不超过10M(参考：原图大约为8M以内），最短边至少10px，最长边最大5000px，长宽比4：1以内。<strong>注意：图片的base64编码是不包含图片头的，如<code>（data:image/jpg;base64,）</code></strong></td>
</tr>
<tr>
<td>url</td>
<td>和image二选一</td>
<td>string</td>
<td>-</td>
<td>图片完整URL，URL长度不超过1024字节，URL对应的图片base64编码后大小不超过10M(参考：原图大约为8M以内），最短边至少10px，最长边最大5000px，长宽比4：1以内,支持jpg/png/bmp格式，当image字段存在时url字段失效。</td>
</tr>
<tr>
<td>option</td>
<td>true</td>
<td>string</td>
<td>cartoon pencil  color_pencil warm wave lavender mononoke scream gothic</td>
<td>cartoon：卡通画风格 pencil：铅笔风格 color_pencil：彩色铅笔画风格 warm：彩色糖块油画风格 wave：神奈川冲浪里油画风格 lavender：薰衣草油画风格 mononoke：奇异油画风格 scream：呐喊油画风格 gothic：哥特油画风格</td>
</tr>
</tbody></table>
</blockquote>
<p><strong>代码：</strong></p>
<p>输入图片文件名，返回处理后图片的Base64编码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#39;&#39;</span><br><span class="line">人像动漫化</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">def image_process(img_name):</span><br><span class="line">    request_url &#x3D; &quot;https:&#x2F;&#x2F;aip.baidubce.com&#x2F;rest&#x2F;2.0&#x2F;image-process&#x2F;v1&#x2F;selfie_anime&quot;</span><br><span class="line">    # 二进制方式打开图片文件</span><br><span class="line">    f &#x3D; open(img_name, &#39;rb&#39;)</span><br><span class="line">    img &#x3D; base64.b64encode(f.read())</span><br><span class="line"></span><br><span class="line">    params &#x3D; &#123;&quot;image&quot;:img&#125;</span><br><span class="line">    access_token &#x3D; get_token(client_id,client_secret)</span><br><span class="line">    request_url &#x3D; request_url + &quot;?access_token&#x3D;&quot; + access_token</span><br><span class="line">    headers &#x3D; &#123;&#39;content-type&#39;: &#39;application&#x2F;x-www-form-urlencoded&#39;&#125;</span><br><span class="line">    response &#x3D; requests.post(request_url, data&#x3D;params, headers&#x3D;headers)</span><br><span class="line">    if response:</span><br><span class="line">        print (response.json())</span><br></pre></td></tr></table></figure>





<h1 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h1><p><a href="https://cloud.baidu.com/product/imageprocess/enhancement" target="_blank" rel="noopener">https://cloud.baidu.com/product/imageprocess/enhancement</a></p>
<p>这个就不多说了</p>
<h1 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h1><blockquote>
<p><strong>请求URL数据格式</strong></p>
<p>向授权服务地址<code>https://aip.baidubce.com/oauth/2.0/token</code>发送请求（推荐使用POST），并在URL中带上以下参数：</p>
<ul>
<li><strong>grant_type：</strong> 必须参数，固定为<code>client_credentials</code>；</li>
<li><strong>client_id：</strong> 必须参数，应用的<code>API Key</code>；</li>
<li><strong>client_secret：</strong> 必须参数，应用的<code>Secret Key</code>；</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#39;&#39;</span><br><span class="line">获取access_token：https:&#x2F;&#x2F;ai.baidu.com&#x2F;ai-doc&#x2F;REFERENCE&#x2F;Ck3dwjhhu</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">def get_token(client_id,client_secret):</span><br><span class="line">    # client_id 为官网获取的AK， client_secret 为官网获取的SK</span><br><span class="line">    host &#x3D; f&#39;https:&#x2F;&#x2F;aip.baidubce.com&#x2F;oauth&#x2F;2.0&#x2F;token?grant_type&#x3D;client_credentials&amp;client_id&#x3D;&#123;client_id&#125;&amp;client_secret&#x3D;&#123;client_secret&#125;&#39;</span><br><span class="line">    response &#x3D; requests.get(host)</span><br><span class="line">    if response:</span><br><span class="line">        print(response.json())</span><br><span class="line">        return response.json()[&#39;access_token&#39;]</span><br><span class="line">    else:</span><br><span class="line">        print(&#39;no response!&#39;)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>图像处理</category>
      </categories>
      <tags>
        <tag>图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>python也能溜猫中毒捏</title>
    <url>/posts/d5c49c10/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><blockquote>
<p>需要安装</p>
<ol>
<li>CV2（库名opencv-python）</li>
<li>PIL（库名Pillow）</li>
</ol>
</blockquote>
<h1 id="视频转图片"><a href="#视频转图片" class="headerlink" title="视频转图片"></a>视频转图片</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前目录下新建文件夹</span></span><br><span class="line">folder_path = <span class="string">"img_maozhongdu/"</span></span><br><span class="line">os.makedirs(folder_path)</span><br><span class="line"><span class="comment"># 进行视频的载入</span></span><br><span class="line">vc = cv2.VideoCapture(<span class="string">'maozhongdu.mp4'</span>)</span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="comment"># 判断载入的视频是否可以打开</span></span><br><span class="line">ret = vc.isOpened()</span><br><span class="line"><span class="comment"># 循环读取视频帧</span></span><br><span class="line"><span class="keyword">while</span> ret:</span><br><span class="line">    c = c + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 进行单张图片的读取,ret的值为True或者Flase,frame表示读入的图片</span></span><br><span class="line">    ret, frame = vc.read()</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        <span class="comment"># 存储为图像</span></span><br><span class="line">        cv2.imwrite(<span class="string">'img_maozhongdu/'</span>+str(c) + <span class="string">'.jpg'</span>, frame)</span><br><span class="line">        <span class="comment"># 输出图像名称</span></span><br><span class="line">        print(<span class="string">'img_maozhongdu/'</span>+str(c) + <span class="string">'.jpg'</span>)</span><br><span class="line">        <span class="comment"># 在一个给定的时间内(单位ms)等待用户按键触发,1ms</span></span><br><span class="line">        cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 视频释放</span></span><br><span class="line">vc.release()</span><br></pre></td></tr></table></figure>





<h1 id="构造字符串图片"><a href="#构造字符串图片" class="headerlink" title="构造字符串图片"></a>构造字符串图片</h1><blockquote>
<p>读取图片，转化为灰度图像，根据灰度值添加对应的字符，构造出新的图片</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 创建字符图片文件夹</span></span><br><span class="line">folder_path = <span class="string">"maozhongdu/"</span></span><br><span class="line">os.makedirs(folder_path)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">    filename = <span class="string">'img_maozhongdu/'</span> + str(i) + <span class="string">'.jpg'</span></span><br><span class="line">    <span class="comment"># 字符列表</span></span><br><span class="line">    ascii_char = list(<span class="string">"$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/|()1&#123;&#125;[]?-_+~            &lt;&gt;i!lI;:,^`'. "</span>)</span><br><span class="line">    <span class="comment"># 判断图片是否存在</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(filename):</span><br><span class="line">        <span class="comment"># 将图片转化为灰度图像,并重设大小</span></span><br><span class="line">        img_array = np.array(Image.open(filename).resize((<span class="number">70</span>, <span class="number">70</span>), Image.ANTIALIAS).convert(<span class="string">'L'</span>))</span><br><span class="line">        <span class="comment"># 创建新的图片对象</span></span><br><span class="line">        img = Image.new(<span class="string">'L'</span>, (<span class="number">560</span>, <span class="number">560</span>), <span class="number">255</span>)</span><br><span class="line">        draw_object = ImageDraw.Draw(img)</span><br><span class="line">        <span class="comment"># 设置字体</span></span><br><span class="line">        font = ImageFont.truetype(<span class="string">'consola.ttf'</span>, <span class="number">10</span>, encoding=<span class="string">'unic'</span>)</span><br><span class="line">        <span class="comment"># 根据灰度值添加对应的字符</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">70</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">70</span>):</span><br><span class="line">                x, y = k * <span class="number">8</span>, j * <span class="number">8</span></span><br><span class="line">                index = int(img_array[j][k] / <span class="number">4</span>)</span><br><span class="line">                draw_object.text((x, y), ascii_char[index], font=font, fill=<span class="number">0</span>)</span><br><span class="line">        name = <span class="string">'maozhongdu/'</span> + str(i) + <span class="string">'.jpg'</span></span><br><span class="line">        print(name)</span><br><span class="line">        <span class="comment"># 保存字符图片</span></span><br><span class="line">        img.save(name, <span class="string">'JPEG'</span>)</span><br></pre></td></tr></table></figure>



<h1 id="图片转视频"><a href="#图片转视频" class="headerlink" title="图片转视频"></a>图片转视频</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"># 设置视频编码器,这里使用使用MJPG编码器</span><br><span class="line">fourcc &#x3D; cv2.VideoWriter_fourcc(*&#39;MJPG&#39;)</span><br><span class="line"># 输出视频参数设置,包含视频文件名、编码器、帧率、视频宽高(此处参数需和字符图片大小一致)</span><br><span class="line">videoWriter &#x3D; cv2.VideoWriter(&#39;maozhongdu.avi&#39;, fourcc, 20.0, (560, 560))</span><br><span class="line"></span><br><span class="line">for i in range(1, 1000):</span><br><span class="line">    filename &#x3D; &#39;maozhongdu&#x2F;&#39; + str(i) + &#39;.jpg&#39;</span><br><span class="line">    # 判断图片是否存在</span><br><span class="line">    if os.path.exists(filename):</span><br><span class="line">        img &#x3D; cv2.imread(filename&#x3D;filename)</span><br><span class="line">        # 在一个给定的时间内(单位ms)等待用户按键触发,100ms</span><br><span class="line">        cv2.waitKey(100)</span><br><span class="line">        # 将图片写入视频中</span><br><span class="line">        videoWriter.write(img)</span><br><span class="line">        print(str(i) + &#39;.jpg&#39; + &#39; done!&#39;)</span><br><span class="line"># 视频释放</span><br><span class="line">videoWriter.release()</span><br></pre></td></tr></table></figure>



<h1 id="图片转GIF"><a href="#图片转GIF" class="headerlink" title="图片转GIF"></a>图片转GIF</h1><blockquote>
<p>图片数量比较小的情况下，建议生成gif</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line"></span><br><span class="line">gif_name = <span class="string">'maozhongdu.gif'</span></span><br><span class="line">frames=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">64</span>):	<span class="comment"># 64: 图片数量</span></span><br><span class="line">    frames.append(imageio.imread(<span class="string">f'./maozhongdu/<span class="subst">&#123;i&#125;</span>.jpg'</span>))</span><br><span class="line">imageio.mimsave(gif_name, frames, <span class="string">'GIF'</span>, duration=<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>图像处理</category>
      </categories>
      <tags>
        <tag>图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>pygame入门之三:黑客帝国-代码雨</title>
    <url>/posts/8842beb6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><ol>
<li><p><strong>随机闪烁</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0929-2.jpg" alt="0929-2"></p>
</li>
<li><p><strong>线性扫描</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0929-3.jpg" alt="0929-3"></p>
</li>
<li><p><strong>黑客帝国</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0929-4.jpg" alt="0929-4"></p>
</li>
</ol>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 参数</span><br><span class="line">SCREENSIZE&#x3D;(600,600)</span><br><span class="line">BLACK&#x3D;(0,0,0,13)</span><br><span class="line"></span><br><span class="line"># 初始化</span><br><span class="line">pygame.init()</span><br><span class="line">font &#x3D; pygame.font.SysFont(&#39;宋体&#39;, 20)</span><br><span class="line">screen &#x3D; pygame.display.set_mode(SCREENSIZE)</span><br><span class="line">surface &#x3D; pygame.Surface(SCREENSIZE, flags&#x3D;pygame.SRCALPHA)</span><br><span class="line">pygame.Surface.convert(surface)</span><br><span class="line">surface.fill(BLACK)</span><br><span class="line">screen.fill(BLACK)</span><br><span class="line"></span><br><span class="line"># 内容</span><br><span class="line">lib&#x3D;[chr(i) for i in range(48,48+10)] + [chr(i) for i in range(97,97+26)]   # [0-9 a-z]</span><br><span class="line">texts &#x3D; [font.render(l, True, (0, 255, 0)) for l in lib]</span><br><span class="line">cols &#x3D; list(range(40))  # 字体15, 窗口600</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    for event in pygame.event.get():</span><br><span class="line">        if event.type &#x3D;&#x3D; pygame.QUIT:</span><br><span class="line">            exit()</span><br><span class="line">    pygame.time.delay(33)</span><br><span class="line">    screen.blit(surface, (0, 0))</span><br><span class="line">    for i in range(n:&#x3D;len(cols)):</span><br><span class="line">        text &#x3D; random.choice(texts)</span><br><span class="line"></span><br><span class="line">        # 1 随机闪烁</span><br><span class="line">        x,y&#x3D;random.randint(0,n-1),random.randint(0,n-1)</span><br><span class="line">        screen.blit(text,(x*15,cols[y]*15))</span><br><span class="line"></span><br><span class="line">        # 2 线性扫描</span><br><span class="line">        # screen.blit(text, (i * 15, cols[i] * 15))</span><br><span class="line">        # cols[i] &#x3D; (cols[i]+1)%40</span><br><span class="line"></span><br><span class="line">        # 3 黑客帝国</span><br><span class="line">        # screen.blit(text, (i * 15, cols[i] * 15))</span><br><span class="line">        # cols[i] &#x3D; 0 if cols[i] &gt;80 or random.random() &gt; 0.95 else cols[i]+1</span><br><span class="line"></span><br><span class="line">    pygame.display.flip()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pygame</category>
      </categories>
      <tags>
        <tag>pygame</tag>
      </tags>
  </entry>
  <entry>
    <title>可视化之网络图</title>
    <url>/posts/13e75cb2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="网络图的可视化"><a href="#网络图的可视化" class="headerlink" title="网络图的可视化"></a>网络图的可视化</h1><blockquote>
<p>官方文档:<a href="https://www.osgeo.cn/networkx/reference/classes/graph.html" target="_blank" rel="noopener">https://www.osgeo.cn/networkx/reference/classes/graph.html</a><br>networkx是Python的一个包，用于构建和操作复杂的图结构、动态和功能，提供分析图的算法。</p>
<p>使用NetworkX，您可以以标准和非标准数据格式加载和存储网络，生成多种类型的随机和经典网络，分析网络结构，构建网络模型，设计新的网络算法，绘制网络，等等。</p>
</blockquote>
<ol>
<li><p><strong>库</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>绘图</strong></p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;names &#x3D; &#123;&#125;  # 人物出现次数</span><br><span class="line">&gt;relationships &#x3D; &#123;&#125;  # 关系字典</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   <span class="comment">#绘图部分</span></span><br><span class="line">   G = nx.Graph()</span><br><span class="line">   <span class="keyword">for</span> name, times <span class="keyword">in</span> names.items():</span><br><span class="line">       <span class="keyword">if</span> times&gt;=<span class="number">3</span>:</span><br><span class="line">           G.add_node(name)</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span> name, edges <span class="keyword">in</span> relationships.items():</span><br><span class="line">       <span class="keyword">for</span> v, w <span class="keyword">in</span> edges.items():</span><br><span class="line">           <span class="keyword">if</span> w &gt; <span class="number">3</span>:</span><br><span class="line">               G.add_edge(name,v,weight=w)</span><br><span class="line">   </span><br><span class="line">   pos = nx.shell_layout(G)</span><br><span class="line">nx.draw_networkx_edges(G, pos, width=[float(d[<span class="string">'weight'</span>]/<span class="number">10</span>) <span class="keyword">for</span> (u, v, d) <span class="keyword">in</span> G.edges(data=<span class="literal">True</span>)])</span><br><span class="line">   nx.draw_networkx_nodes(G, pos)</span><br><span class="line">   nx.draw_networkx_labels(G, pos, labels=<span class="literal">None</span>, font_size=<span class="number">12</span>, font_color=<span class="string">'k'</span>, font_family=<span class="string">'YouYuan'</span>,font_weight=<span class="string">'normal'</span>)</span><br><span class="line">   plt.show()</span><br></pre></td></tr></table></figure>

<p><strong>效果：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0902-1.png" alt="0902-1"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>python拓展之SortedContainers</title>
    <url>/posts/32f991c5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>sortedcontainers是一个用pure-python实现的拓展库，其内有SortedList、SortedDict、SortedSet等等，可以直接在<strong>力扣</strong>中使用</p>
<p>本文摘抄、总结于官方文档：<a href="http://www.grantjenks.com/docs/sortedcontainers/" target="_blank" rel="noopener">http://www.grantjenks.com/docs/sortedcontainers/</a></p>
<h1 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h1><p><a href="http://www.grantjenks.com/docs/sortedcontainers/" target="_blank" rel="noopener">Sorted Containers</a> is an Apache2 licensed <a href="http://www.grantjenks.com/docs/sortedcontainers/" target="_blank" rel="noopener">sorted collections library</a>, written in pure-Python, and fast as C-extensions.</p>
<p>Python’s standard library is great until you need a sorted collections type. Many will attest that you can get really far without one, but the moment you <strong>really need</strong> a sorted list, sorted dict, or sorted set, you’re faced with a dozen different implementations, most using C-extensions without great documentation and benchmarking.</p>
<p>In Python, we can do better. And we can do it in pure-Python!</p>
<h1 id="Quickstart"><a href="#Quickstart" class="headerlink" title="Quickstart"></a>Quickstart</h1><p>Installing <a href="http://www.grantjenks.com/docs/sortedcontainers/" target="_blank" rel="noopener">Sorted Containers</a> is simple with <a href="https://pypi.org/project/pip/" target="_blank" rel="noopener">pip</a>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip install sortedcontainers</span><br></pre></td></tr></table></figure>

<p>You can access documentation in the interpreter with Python’s built-in help function. The help works on modules, classes and methods in <a href="http://www.grantjenks.com/docs/sortedcontainers/" target="_blank" rel="noopener">Sorted Containers</a>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import sortedcontainers</span><br><span class="line">&gt;&gt;&gt; help(sortedcontainers)</span><br><span class="line">&gt;&gt;&gt; from sortedcontainers import SortedDict</span><br><span class="line">&gt;&gt;&gt; help(SortedDict)</span><br><span class="line">&gt;&gt;&gt; help(SortedDict.popitem)</span><br></pre></td></tr></table></figure>





<h1 id="SortedList"><a href="#SortedList" class="headerlink" title="SortedList"></a>SortedList</h1><p><code>class sortedcontainers.SortedList(iterable=None, key=None)</code></p>
<ul>
<li>Sorted list is a sorted mutable sequence.</li>
<li>Sorted list values are maintained in sorted order.</li>
<li>Sorted list values must be comparable. The total ordering of values must not change while they are stored in the sorted list.</li>
</ul>
<h2 id="iterable"><a href="#iterable" class="headerlink" title="iterable"></a>iterable</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sl &#x3D; SortedList([3, 1, 2, 5, 4])</span><br><span class="line">&gt;&gt;&gt; sl</span><br><span class="line">SortedList([1, 2, 3, 4, 5])</span><br></pre></td></tr></table></figure>



<h2 id="init-amp-key"><a href="#init-amp-key" class="headerlink" title="init &amp; key"></a>init &amp; key</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sl &#x3D; SortedList()</span><br><span class="line">&gt;&gt;&gt; isinstance(sl, SortedList)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; sl &#x3D; SortedList(key&#x3D;lambda x: -x)</span><br><span class="line">&gt;&gt;&gt; isinstance(sl, SortedList)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(sl, SortedKeyList)</span><br><span class="line">True</span><br></pre></td></tr></table></figure>



<h2 id="add-value"><a href="#add-value" class="headerlink" title="add(value)"></a>add(<em>value</em>)</h2><p>时间复杂度近似O(logn)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sl &#x3D; SortedList()</span><br><span class="line">&gt;&gt;&gt; sl.add(3)</span><br><span class="line">&gt;&gt;&gt; sl.add(1)</span><br><span class="line">&gt;&gt;&gt; sl.add(2)</span><br><span class="line">&gt;&gt;&gt; sl</span><br><span class="line">SortedList([1, 2, 3])</span><br></pre></td></tr></table></figure>



<h2 id="update-iterable"><a href="#update-iterable" class="headerlink" title="update(iterable)"></a>update(<em>iterable</em>)</h2><p>时间复杂度近似O(k*logn)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sl &#x3D; SortedList()</span><br><span class="line">&gt;&gt;&gt; sl.update([3, 1, 2])</span><br><span class="line">&gt;&gt;&gt; sl</span><br><span class="line">SortedList([1, 2, 3])</span><br></pre></td></tr></table></figure>



<h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><p>Remove all values from sorted list.</p>
<p>时间复杂度O(n)</p>
<h2 id="discard-value"><a href="#discard-value" class="headerlink" title="discard(value)"></a>discard(<em>value</em>)</h2><p>Remove value from sorted list if it is a member.</p>
<p>If value is not a member, do nothing.</p>
<p>时间复杂度近似O(logn)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sl &#x3D; SortedList([1, 2, 3, 4, 5])</span><br><span class="line">&gt;&gt;&gt; sl.discard(5)</span><br><span class="line">&gt;&gt;&gt; sl.discard(0)</span><br><span class="line">&gt;&gt;&gt; sl &#x3D;&#x3D; [1, 2, 3, 4]</span><br><span class="line">True</span><br></pre></td></tr></table></figure>



<h2 id="remove-value"><a href="#remove-value" class="headerlink" title="remove(value)"></a>remove(<em>value</em>)</h2><p>Remove value from sorted list; <strong>value must be a member</strong>.</p>
<p>If value is not a member, raise ValueError.</p>
<p>时间复杂度近似O(logn)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sl &#x3D; SortedList([1, 2, 3, 4, 5])</span><br><span class="line">&gt;&gt;&gt; sl.remove(5)</span><br><span class="line">&gt;&gt;&gt; sl &#x3D;&#x3D; [1, 2, 3, 4]</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; sl.remove(0)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ValueError: 0 not in list</span><br></pre></td></tr></table></figure>



<h2 id="pop-index-1"><a href="#pop-index-1" class="headerlink" title="pop(index=-1)"></a>pop(<em>index=-1</em>)</h2><p>Remove and return value at index in sorted list.</p>
<p>Raise <code>IndexError</code> if the sorted list is empty or index is out of range.</p>
<p>Negative indices are supported.</p>
<p>时间复杂度近似O(logn)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sl &#x3D; SortedList(&#39;abcde&#39;)</span><br><span class="line">&gt;&gt;&gt; sl.pop()</span><br><span class="line">&#39;e&#39;</span><br><span class="line">&gt;&gt;&gt; sl.pop(2)</span><br><span class="line">&#39;c&#39;</span><br><span class="line">&gt;&gt;&gt; sl</span><br><span class="line">SortedList([&#39;a&#39;, &#39;b&#39;, &#39;d&#39;])</span><br></pre></td></tr></table></figure>

<h2 id="bisect-left-value"><a href="#bisect-left-value" class="headerlink" title="bisect_left(value)"></a>bisect_left(<em>value</em>)</h2><p>Similar to the bisect module in the standard library.</p>
<p>时间复杂度近似O(logn)</p>
<p>同理bisect_right(<em>value</em>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sl &#x3D; SortedList([10, 11, 12, 13, 14])</span><br><span class="line">&gt;&gt;&gt; sl.bisect_left(12)</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h2 id="count-value"><a href="#count-value" class="headerlink" title="count(value)"></a>count(<em>value</em>)</h2><p>时间复杂度近似O(logn)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sl &#x3D; SortedList([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])</span><br><span class="line">&gt;&gt;&gt; sl.count(3)</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<h2 id="index-value-start-None-stop-None"><a href="#index-value-start-None-stop-None" class="headerlink" title="index(value, start=None, stop=None)"></a>index(<em>value</em>, <em>start=None</em>, <em>stop=None</em>)</h2><p>Return first index of value in sorted list.</p>
<p>Raise ValueError if value is not present.</p>
<p>时间复杂度近似O(logn)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sl &#x3D; SortedList(&#39;abcde&#39;)</span><br><span class="line">&gt;&gt;&gt; sl.index(&#39;d&#39;)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; sl.index(&#39;z&#39;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ValueError: &#39;z&#39; is not in list</span><br></pre></td></tr></table></figure>



<h1 id="SortedDict"><a href="#SortedDict" class="headerlink" title="SortedDict"></a>SortedDict</h1><p><code>class sortedcontainers.SortedDict(*args, **kwargs)</code></p>
<ul>
<li>Sorted dict is a sorted mutable mapping.</li>
<li>Sorted dict keys are maintained in sorted order. The design of sorted dict is simple: sorted dict inherits from dict to store items and maintains a sorted list of keys.</li>
<li>Sorted dict keys must be hashable and comparable. The hash and total ordering of keys must not change while they are stored in the sorted dict.</li>
</ul>
<h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><p>Sorted dict keys must be hashable, per the requirement for Python’s dictionaries. Keys (or the result of the key-function) must also be comparable, per the requirement for sorted lists.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d &#x3D; &#123;&#39;alpha&#39;: 1, &#39;beta&#39;: 2&#125;</span><br><span class="line">&gt;&gt;&gt; SortedDict([(&#39;alpha&#39;, 1), (&#39;beta&#39;, 2)]) &#x3D;&#x3D; d</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; SortedDict(&#123;&#39;alpha&#39;: 1, &#39;beta&#39;: 2&#125;) &#x3D;&#x3D; d</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; SortedDict(alpha&#x3D;1, beta&#x3D;2) &#x3D;&#x3D; d</span><br><span class="line">True</span><br></pre></td></tr></table></figure>



<h2 id="setdefault-key-default-None"><a href="#setdefault-key-default-None" class="headerlink" title="setdefault(key, default=None)"></a>setdefault(key, default=None)</h2><p>时间复杂度近似O(logn)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sd &#x3D; SortedDict()</span><br><span class="line">&gt;&gt;&gt; sd.setdefault(&#39;a&#39;, 1)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; sd.setdefault(&#39;a&#39;, 10)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; sd</span><br><span class="line">SortedDict(&#123;&#39;a&#39;: 1&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="clear-1"><a href="#clear-1" class="headerlink" title="clear()"></a>clear()</h2><p>Remove all values from sorted dict.</p>
<p>时间复杂度O(n)</p>
<h2 id="pop-key-default"><a href="#pop-key-default" class="headerlink" title="pop(key, default=)"></a>pop(<em>key</em>, default=<not-given>)</h2><p>Remove and return value for item identified by key.</p>
<p>If the key is not found then return default if given. If default is not given then raise <code>KeyError</code>.</p>
<p>时间复杂度近似O(logn)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sd &#x3D; SortedDict(&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;)</span><br><span class="line">&gt;&gt;&gt; sd.pop(&#39;c&#39;)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; sd.pop(&#39;z&#39;, 26)</span><br><span class="line">26</span><br><span class="line">&gt;&gt;&gt; sd.pop(&#39;y&#39;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">KeyError: &#39;y&#39;</span><br></pre></td></tr></table></figure>



<h2 id="popitem-index-1"><a href="#popitem-index-1" class="headerlink" title="popitem(index=-1)"></a>popitem(<em>index=-1</em>)</h2><p>Remove and return <code>(key, value)</code> pair at index from sorted dict.</p>
<p>Optional argument index defaults to -1, the last item in the sorted dict. Specify <code>index=0</code> for the first item in the sorted dict.</p>
<p>If the sorted dict is empty, raises <code>KeyError</code>.</p>
<p>If the index is out of range, raises <code>IndexError</code>.</p>
<p>时间复杂度近似O(logn)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sd &#x3D; SortedDict(&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;)</span><br><span class="line">&gt;&gt;&gt; sd.popitem()</span><br><span class="line">(&#39;c&#39;, 3)</span><br><span class="line">&gt;&gt;&gt; sd.popitem(0)</span><br><span class="line">(&#39;a&#39;, 1)</span><br><span class="line">&gt;&gt;&gt; sd.popitem(100)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure>



<h2 id="peekitem-index-1"><a href="#peekitem-index-1" class="headerlink" title="peekitem(index=-1)"></a>peekitem(<em>index=-1</em>)</h2><p>Return <code>(key, value)</code> pair at index in sorted dict.</p>
<p>Optional argument index defaults to -1, the last item in the sorted dict. Specify <code>index=0</code> for the first item in the sorted dict.</p>
<p>Unlike [<code>SortedDict.popitem()</code>] the sorted dict is not modified.</p>
<p>If the index is out of range, raises <code>IndexError</code>.</p>
<p>时间复杂度近似O(logn)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sd &#x3D; SortedDict(&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;)</span><br><span class="line">&gt;&gt;&gt; sd.peekitem()</span><br><span class="line">(&#39;c&#39;, 3)</span><br><span class="line">&gt;&gt;&gt; sd.peekitem(0)</span><br><span class="line">(&#39;a&#39;, 1)</span><br><span class="line">&gt;&gt;&gt; sd.peekitem(100)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure>



<h1 id="SortedSet"><a href="#SortedSet" class="headerlink" title="SortedSet"></a>SortedSet</h1><p><code>class sortedcontainers.SortedSet(iterable=None, key=None)</code></p>
<ul>
<li>Sorted set is a sorted mutable set.</li>
<li>Sorted set values are maintained in sorted order. The design of sorted set is simple: sorted set uses a set for set-operations and maintains a sorted list of values.</li>
<li>Sorted set values must be hashable and comparable. The hash and total ordering of values must not change while they are stored in the sorted set.</li>
</ul>
<h2 id="init-1"><a href="#init-1" class="headerlink" title="init"></a>init</h2><p><code>__init__(iterable=None, key=None)</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; ss &#x3D; SortedSet([3, 1, 2, 5, 4])</span><br><span class="line">&gt;&gt;&gt; ss</span><br><span class="line">SortedSet([1, 2, 3, 4, 5])</span><br><span class="line">&gt;&gt;&gt; from operator import neg</span><br><span class="line">&gt;&gt;&gt; ss &#x3D; SortedSet([3, 1, 2, 5, 4], neg)</span><br><span class="line">&gt;&gt;&gt; ss</span><br><span class="line">SortedSet([5, 4, 3, 2, 1], key&#x3D;&lt;built-in function neg&gt;)</span><br></pre></td></tr></table></figure>



<h2 id="add-value-1"><a href="#add-value-1" class="headerlink" title="add(value)"></a>add(<em>value</em>)</h2><p>Add value to sorted set.</p>
<p>时间复杂度近似O(logn)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; ss &#x3D; SortedSet()</span><br><span class="line">&gt;&gt;&gt; ss.add(3)</span><br><span class="line">&gt;&gt;&gt; ss.add(1)</span><br><span class="line">&gt;&gt;&gt; ss.add(2)</span><br><span class="line">&gt;&gt;&gt; ss</span><br><span class="line">SortedSet([1, 2, 3])</span><br></pre></td></tr></table></figure>



<h2 id="discard-value-1"><a href="#discard-value-1" class="headerlink" title="discard(value)"></a>discard(<em>value</em>)</h2><p>Remove value from sorted set if it is a member.</p>
<p>If value is not a member, do nothing.</p>
<p>时间复杂度近似O(logn)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; ss &#x3D; SortedSet([1, 2, 3, 4, 5])</span><br><span class="line">&gt;&gt;&gt; ss.discard(5)</span><br><span class="line">&gt;&gt;&gt; ss.discard(0)</span><br><span class="line">&gt;&gt;&gt; ss &#x3D;&#x3D; set([1, 2, 3, 4])</span><br><span class="line">True</span><br></pre></td></tr></table></figure>



<h2 id="remove-value-1"><a href="#remove-value-1" class="headerlink" title="remove(value)"></a>remove(<em>value</em>)</h2><p>Remove value from sorted set; <strong>value must be a member</strong>.</p>
<p>If value is not a member, raise <code>KeyError</code>.</p>
<p>时间复杂度近似O(logn)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; ss &#x3D; SortedSet([1, 2, 3, 4, 5])</span><br><span class="line">&gt;&gt;&gt; ss.remove(5)</span><br><span class="line">&gt;&gt;&gt; ss &#x3D;&#x3D; set([1, 2, 3, 4])</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; ss.remove(0)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">KeyError: 0</span><br></pre></td></tr></table></figure>



<h2 id="clear-2"><a href="#clear-2" class="headerlink" title="clear()"></a>clear()</h2><p>Remove all values from sorted set.</p>
<p>时间复杂度O(n)</p>
<h2 id="pop-index-1-1"><a href="#pop-index-1-1" class="headerlink" title="pop(index=-1)"></a>pop(<em>index=-1</em>)</h2><p>Remove and return value at index in sorted set.</p>
<p>Raise <code>IndexError</code> if the sorted set is empty or index is out of range.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; ss &#x3D; SortedSet(&#39;abcde&#39;)</span><br><span class="line">&gt;&gt;&gt; ss.pop()</span><br><span class="line">&#39;e&#39;</span><br><span class="line">&gt;&gt;&gt; ss.pop(2)</span><br><span class="line">&#39;c&#39;</span><br><span class="line">&gt;&gt;&gt; ss</span><br><span class="line">SortedSet([&#39;a&#39;, &#39;b&#39;, &#39;d&#39;])</span><br></pre></td></tr></table></figure>



<h2 id="count-value-1"><a href="#count-value-1" class="headerlink" title="count(value)"></a>count(<em>value</em>)</h2><p>Return number of occurrences of value in the sorted set.</p>
<p>时间复杂度O(1)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; ss &#x3D; SortedSet([1, 2, 3, 4, 5])</span><br><span class="line">&gt;&gt;&gt; ss.count(3)</span><br><span class="line">1</span><br></pre></td></tr></table></figure>



<h2 id="difference-iterables"><a href="#difference-iterables" class="headerlink" title="difference(*iterables)"></a>difference(*iterables)</h2><p>Return the difference of two or more sets as a new sorted set.</p>
<p>The difference method also corresponds to operator <code>-</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; ss &#x3D; SortedSet([1, 2, 3, 4, 5])</span><br><span class="line">&gt;&gt;&gt; ss.difference([4, 5, 6, 7])</span><br><span class="line">SortedSet([1, 2, 3])</span><br></pre></td></tr></table></figure>



<h2 id="difference-update-iterables"><a href="#difference-update-iterables" class="headerlink" title="difference_update(*iterables)"></a>difference_update(*iterables)</h2><p>Remove all values of iterables from this sorted set.</p>
<p>The difference_update method also corresponds to operator <code>-=</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; ss &#x3D; SortedSet([1, 2, 3, 4, 5])</span><br><span class="line">&gt;&gt;&gt; _ &#x3D; ss.difference_update([4, 5, 6, 7])</span><br><span class="line">&gt;&gt;&gt; ss</span><br><span class="line">SortedSet([1, 2, 3])</span><br></pre></td></tr></table></figure>



<h2 id="intersection-iterables"><a href="#intersection-iterables" class="headerlink" title="intersection(*iterables)"></a>intersection(*iterables)</h2><p>Return the intersection of two or more sets as a new sorted set.</p>
<p>The intersection method also corresponds to operator <code>&amp;</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; ss &#x3D; SortedSet([1, 2, 3, 4, 5])</span><br><span class="line">&gt;&gt;&gt; ss.intersection([4, 5, 6, 7])</span><br><span class="line">SortedSet([4, 5])</span><br></pre></td></tr></table></figure>



<h2 id="intersection-update-iterables"><a href="#intersection-update-iterables" class="headerlink" title="intersection_update(*iterables)"></a>intersection_update(*iterables)</h2><p>The intersection_update method also corresponds to operator <code>&amp;=</code>.</p>
<h2 id="symmetric-difference-other"><a href="#symmetric-difference-other" class="headerlink" title="symmetric_difference(other)"></a>symmetric_difference(other)</h2><p>Return the symmetric difference with other as a new sorted set.</p>
<p>The symmetric_difference method also corresponds to operator <code>^</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; ss &#x3D; SortedSet([1, 2, 3, 4, 5])</span><br><span class="line">&gt;&gt;&gt; ss.symmetric_difference([4, 5, 6, 7])</span><br><span class="line">SortedSet([1, 2, 3, 6, 7])</span><br></pre></td></tr></table></figure>



<h2 id="symmetric-difference-update-other"><a href="#symmetric-difference-update-other" class="headerlink" title="symmetric_difference_update(other)"></a>symmetric_difference_update(other)</h2><p>The symmetric_difference_update method also corresponds to operator <code>^=</code>.</p>
<h2 id="union-iterables"><a href="#union-iterables" class="headerlink" title="union(*iterables)"></a>union(*iterables)</h2><p>Return new sorted set with values from itself and all iterables.</p>
<p>The union method also corresponds to operator <code>|</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; ss &#x3D; SortedSet([1, 2, 3, 4, 5])</span><br><span class="line">&gt;&gt;&gt; ss.union([4, 5, 6, 7])</span><br><span class="line">SortedSet([1, 2, 3, 4, 5, 6, 7])</span><br></pre></td></tr></table></figure>



<h2 id="update-iterables"><a href="#update-iterables" class="headerlink" title="update(*iterables)"></a>update(*iterables)</h2><p>Update the sorted set adding values from all iterables.</p>
<p>The update method also corresponds to operator <code>|=</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; ss &#x3D; SortedSet([1, 2, 3, 4, 5])</span><br><span class="line">&gt;&gt;&gt; _ &#x3D; ss.update([4, 5, 6, 7])</span><br><span class="line">&gt;&gt;&gt; ss</span><br><span class="line">SortedSet([1, 2, 3, 4, 5, 6, 7])</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
        <category>拓展</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>词云图</title>
    <url>/posts/3e5059be/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="中文词云图"><a href="#中文词云图" class="headerlink" title="中文词云图"></a>中文词云图</h1><blockquote>
<p>词云图的制作主要使用<code>wordcloud</code>库</p>
<p>官方文档：<a href="https://amueller.github.io/word_cloud/generated/wordcloud.WordCloud.html" target="_blank" rel="noopener">https://amueller.github.io/word_cloud/generated/wordcloud.WordCloud.html</a></p>
</blockquote>
<ol>
<li><p><strong>库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import imageio</span><br><span class="line">import jieba</span><br><span class="line">from wordcloud import WordCloud</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>jieba分词统计词频</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">word_count</span><span class="params">(filename)</span>:</span></span><br><span class="line">       <span class="keyword">with</span> open(filename, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>)<span class="keyword">as</span> f:</span><br><span class="line">           s = f.read()</span><br><span class="line">           words = jieba.cut(s, cut_all=<span class="literal">False</span>)</span><br><span class="line">           word_dict = &#123;&#125;</span><br><span class="line">           word_list = <span class="string">''</span></span><br><span class="line">           <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">               <span class="keyword">if</span> (len(word) &gt; <span class="number">1</span>):</span><br><span class="line">                   word_list = word_list + <span class="string">' '</span> + word</span><br><span class="line">                   <span class="keyword">if</span> (word_dict.get(word)):</span><br><span class="line">                       word_dict[word] = word_dict[word] + <span class="number">1</span></span><br><span class="line">                   <span class="keyword">else</span>:</span><br><span class="line">                       word_dict[word] = <span class="number">1</span></span><br><span class="line">           <span class="keyword">return</span> word_dict</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>停用词的处理</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建停用词list  </span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">stopwordslist</span><span class="params">(filepath)</span>:</span></span><br><span class="line">       stopwords = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> open(filepath, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>).readlines()]</span><br><span class="line">       <span class="keyword">return</span> stopwords</span><br></pre></td></tr></table></figure>

<blockquote>
<p>然后在<strong>2.jieba分词统计词频</strong>的代码中增加停用词判断</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">	<span class="keyword">if</span> (len(word) &gt; <span class="number">1</span>) <span class="keyword">and</span> <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> stopwords:</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>生成词云图</strong></p>
<blockquote>
<p>需要注意的是，为了能够正常显示中文字体，需要配置<code>simsun.ttc</code>字体文件</p>
<p>更多字体可于本地<code>C:\Windows\Fonts</code>文件夹中寻找</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordcloud_pic</span><span class="params">(filename)</span>:</span></span><br><span class="line">    result=word_count(filename)</span><br><span class="line">    Pic = imageio.imread(<span class="string">'duck.png'</span>)    <span class="comment">#蒙版图片</span></span><br><span class="line">    w = WordCloud(width=<span class="number">1000</span>, height=<span class="number">700</span>, background_color=<span class="string">'white'</span>, mask=Pic, scale=<span class="number">15</span>,font_path=<span class="string">'simsun.ttc'</span>)</span><br><span class="line">    w.generate_from_frequencies(result)</span><br><span class="line">    filename = <span class="string">'wordcloud.png'</span></span><br><span class="line">    w.to_file(filename)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>效果展示</strong></p>
<blockquote>
<p>以<strong><em>一只特立独行的猪</em></strong>为例，演示词云图效果</p>
<p>蒙版图片duck.png：<a href="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/duck.png" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/duck.png</a></p>
<p>文本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;一只特立独行的猪</span><br><span class="line"></span><br><span class="line">&gt;插队的时候，我喂过猪，也放过牛。假如没有人来管，这两种动物也完全知道该怎样生活。它们会自由自在地闲逛，饥则食渴则饮，春天来临时还要谈谈爱情；这样一来，它们的生活层次很低，完全乏善可陈。人来了以后，给它们的生活做出了安排：每一头牛和每一口猪的生活都有了主题。就它们中的大多数而言，这种生活主题是很悲惨的：前者的主题是干活，后者的主题是长肉。我不认为这有什么可抱怨的，因为我当时的生活也不见得丰富了多少，除了八个样板戏，也没有什么消遣。有极少数的猪和牛，它们的生活另有安排。以猪为例，种猪和母猪除了吃，还有别的事可干。就我所见，它们对这些安排也不大喜欢。种猪的任务是交配，换言之，我们的政策准许它当个花花公子。但是疲惫的种猪往往摆出一种肉猪（肉猪是阉过的）才有的正人君子架势，死活不肯跳到母猪背上去。母猪的任务是生崽儿，但有些母猪却要把猪崽儿吃掉。总的来说，人的安排使猪痛苦不堪。但它们还是接受了：猪总是猪啊。</span><br><span class="line">&gt;对生活做种种设置是人特有的品性。不光是设置动物，也设置自己。我们知道，在古希腊有个斯巴达，那里的生活被设置得了无生趣，其目的就是要使男人成为亡命战士，使女人成为生育机器，前者像些斗鸡，后者像些母猪。这两类动物是很特别的，但我以为，它们肯定不喜欢自己的生活。但不喜欢又能怎么样？人也好，动物也罢，都很难改变自己的命运。</span><br><span class="line">&gt;以下谈到的一只猪有些与众不同。我喂猪时，它已经有四五岁了，从名分上说，它是肉猪，但长得又黑又瘦，两眼炯炯有光。这家伙像山羊一样敏捷，一米高的猪栏一跳就过；它还能跳上猪圈的房顶，这一点又像是猫——所以它总是到处游逛，根本就不在圈里待着。所有喂过猪的知青都把它当宠儿来对待，它也是我的宠儿——因为它只对知青好，容许他们走到三米之内，要是别的人，它早就跑了。它是公的，原本该劁掉。不过你去试试看，哪怕你把劁猪刀藏在身后，它也能嗅出来，朝你瞪大眼睛，嗷嗷地吼起来。我总是用细米糠熬的粥喂它，等它吃够了以后，才把糠兑到野草里喂别的猪。其他猪看了嫉妒，一起嚷起来。这时候整个猪场一片鬼哭狼嚎，但我和它都不在乎。吃饱了以后，它就跳上房顶去晒太阳，或者模仿各种声音。它会学汽车响、拖拉机响，学得都很像；有时整天不见踪影，我估计它到附近的村寨里找母猪去了。我们这里也有母猪，都关在圈里，被过度的生育搞得走了形，又脏又臭，它对它们不感兴趣；村寨里的母猪好看一些。它有很多精彩的事迹，但我喂猪的时间短，知道得有限，索性就不写了。总而言之，所有喂过猪的知青都喜欢它，喜欢它特立独行的派头儿，还说它活得潇洒。但老乡们就不这么浪漫，他们说，这猪不正经。领导则痛恨它，这一点以后还要谈到。我对它则不止是喜欢——我尊敬它，常常不顾自己虚长十几岁这一现实，把它叫做“猪兄”。如前所述，这位猪兄会模仿各种声音。我想它也学过人说话，但没有学会——假如学会了，我们就可以做倾心之谈。但这不能怪它。人和猪的音色差得太远了。</span><br><span class="line">&gt;后来，猪兄学会了汽笛叫，这个本领给它招来了麻烦。我们那里有座糖厂，中午要鸣一次汽笛，让工人换班。我们队下地干活时，听见这次汽笛响就收工回来。我的猪兄每天上午十点钟总要跳到房上学汽笛，地里的人听见它叫就回来——这可比糖厂鸣笛早了一个半小时。坦白地说，这不能全怪猪兄，它毕竟不是锅炉，叫起来和汽笛还有些区别，但老乡们却硬说听不出来。领导上因此开了一个会，把它定成了破坏春耕的坏分子，要对它采取专政手段——会议的精神我已经知道了，但我不为它担忧——因为假如专政是指绳索和杀猪刀的话，那是一点门都没有的。以前的领导也不是没试过，一百人也逮不住它。狗也没用：猪兄跑起来像颗鱼雷，能把狗撞出一丈开外。谁知这回是动了真格的，指导员带了二十几个人，手拿五四式手枪；副指导员带了十几人，手持看青的火枪，分两路在猪场外的空地上兜捕它。这就使我陷入了内心的矛盾：按我和它的交情，我该舞起两把杀猪刀冲出去，和它并肩战斗，但我又觉得这样做太过惊世骇俗——它毕竟是只猪啊；还有一个理由，我不敢对抗领导，我怀疑这才是问题之所在。总之，我在一边看着。猪兄的镇定使我佩服之极：它很冷静地躲在手枪和火枪的连线之内，任凭人喊狗咬，不离那条线。这样，拿手枪的人开火就会把拿火枪的打死，反之亦然；两头同时开火，两头都会被打死。至于它，因为目标小，多半没事。就这样连兜了几个圈子，它找到了一个空子，一头撞出去了，跑得潇洒至极。以后我在甘蔗地里还见过它一次，它长出了獠牙，还认识我，但已不容我走近了。这种冷淡使我痛心，但我也赞成它对心怀叵测的人保持距离。</span><br><span class="line">&gt;我已经四十岁了，除了这只猪，还没见过谁敢于如此无视对生活的设置。相反，我倒见过很多想要设置别人生活的人，还有对被设置的生活安之若素的人。因为这个缘故，我一直怀念这只特立独行的猪。</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0901-1.png" alt="0901-1"></p>
<h1 id="英文词云图"><a href="#英文词云图" class="headerlink" title="英文词云图"></a>英文词云图</h1><p>和中文不同的地方在于，不能直接用<strong>jieba分词</strong>再统计词频</p>
<p>这里，可以利用<strong>字典树(Trie)</strong>进行英文单词的词频统计</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前缀树节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.word = <span class="literal">False</span>   <span class="comment"># 遍历到次节点时是否是完整的单词</span></span><br><span class="line">        self.child = &#123;&#125;     <span class="comment"># 子节点字典 [字符：节点]</span></span><br><span class="line">        self.count = <span class="number">0</span>      <span class="comment"># 到此是完整单词的次数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前缀树生成并统计</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root = TrieNode()</span><br><span class="line">        self.stat = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Insert</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        cur = self.root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> w <span class="keyword">not</span> <span class="keyword">in</span> cur.child:</span><br><span class="line">                cur.child[w] = TrieNode()</span><br><span class="line">            cur = cur.child[w]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cur.word:</span><br><span class="line">            cur.count = <span class="number">1</span></span><br><span class="line">            cur.word = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        self.stat[word] = cur.count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Trie_output</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.stat</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Trie_input</span><span class="params">(self, text_src)</span>:</span></span><br><span class="line">        fo = open(text_src, <span class="string">"r"</span>)</span><br><span class="line">        text = fo.read()</span><br><span class="line">        </span><br><span class="line">        text = text.lower()</span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> text:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> ch.islower():</span><br><span class="line">                text = text.replace(ch,<span class="string">' '</span>)</span><br><span class="line">        wordList = text.split()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> wordList:</span><br><span class="line">            self.Insert(word)</span><br><span class="line">        </span><br><span class="line">        fo.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计字符串文本中各单词（不区分大小写）出现的次数</span></span><br><span class="line"><span class="comment"># 使用前缀树实现，统计信息以[单词：频数]的字典进行保存</span></span><br><span class="line"><span class="comment"># 时间复杂度为 O(n*m) 其中n为单词数，m为单词的平均长度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Trie_word_count</span><span class="params">(text_src)</span>:</span></span><br><span class="line">    t = Trie()</span><br><span class="line">    t.Trie_input(text_src)</span><br><span class="line">    <span class="keyword">return</span> t.Trie_output()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(Trie_word_count("./essay_text.txt"))</span></span><br></pre></td></tr></table></figure>

<p>(Trie代码来源:我的队友lzx同学)</p>
]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构之前缀树</title>
    <url>/posts/55a50eac/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>前缀树，也叫字典树，Trie</p>
<blockquote>
<p><strong>前缀树</strong> 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。</p>
</blockquote>
<p>可以简单地认为，Trie是一种26叉树，每一个节点都有26个子节点，对应a-z。</p>
<p>单词不存储于字典树的节点内，而是字典树<strong>从根节点到该节点的路径</strong></p>
<p>在具体实现上，python使用<strong>字典</strong>性能更好，而C++则是使用<strong>数组</strong>性能更好</p>
<details>
    <summary>字典树练习题集</summary>
    https://leetcode-cn.com/tag/trie/problemset/
</details>



<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root&#x3D;&#123;&#125;</span><br><span class="line">def insert(word):</span><br><span class="line">    cur &#x3D; root</span><br><span class="line">    for w in word:</span><br><span class="line">        if w not in cur:</span><br><span class="line">            cur[w]&#x3D;&#123;&#125;</span><br><span class="line">        cur &#x3D; cur[w]</span><br><span class="line">    cur[&#39;#&#39;]&#x3D;&#39;#&#39;</span><br></pre></td></tr></table></figure>





<h1 id="实现-Trie-前缀树"><a href="#实现-Trie-前缀树" class="headerlink" title="实现 Trie (前缀树)"></a><a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree/" target="_blank" rel="noopener">实现 Trie (前缀树)</a></h1><blockquote>
<p>模板</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Trie:</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.root&#x3D;&#123;&#125;</span><br><span class="line"></span><br><span class="line">    def insert(self, word: str) -&gt; None:</span><br><span class="line">        cur&#x3D;self.root</span><br><span class="line">        for w in word:  # in 判断键是否在字典中</span><br><span class="line">            if w not in cur:</span><br><span class="line">                cur[w]&#x3D;&#123;&#125;</span><br><span class="line">            cur &#x3D; cur[w]</span><br><span class="line">        cur[&#39;#&#39;]&#x3D;&#39;#&#39;</span><br><span class="line"></span><br><span class="line">    def search(self, word: str) -&gt; bool:</span><br><span class="line">        cur &#x3D; self.root</span><br><span class="line">        for w in word:</span><br><span class="line">            if w not in cur:</span><br><span class="line">                return False</span><br><span class="line">            cur &#x3D; cur[w]</span><br><span class="line">        return cur.get(&#39;#&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def startsWith(self, prefix: str) -&gt; bool:</span><br><span class="line">        cur &#x3D; self.root</span><br><span class="line">        for w in prefix:</span><br><span class="line">            if w not in cur:</span><br><span class="line">                return False</span><br><span class="line">            cur &#x3D; cur[w]</span><br><span class="line">        return True</span><br></pre></td></tr></table></figure>



<h1 id="添加与搜索单词-数据结构设计"><a href="#添加与搜索单词-数据结构设计" class="headerlink" title="添加与搜索单词 - 数据结构设计"></a><a href="https://leetcode-cn.com/problems/design-add-and-search-words-data-structure/" target="_blank" rel="noopener">添加与搜索单词 - 数据结构设计</a></h1><blockquote>
<p>注意<code>if cur[c]==&#39;#&#39;:continue</code>，不能忘了</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class WordDictionary:</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.root&#x3D;&#123;&#125;</span><br><span class="line"></span><br><span class="line">    def addWord(self, word: str) -&gt; None:</span><br><span class="line">        cur&#x3D;self.root</span><br><span class="line">        for w in word:</span><br><span class="line">            if w not in cur:</span><br><span class="line">                cur[w]&#x3D;&#123;&#125;</span><br><span class="line">            cur &#x3D; cur[w]</span><br><span class="line">        cur[&#39;#&#39;]&#x3D;&#39;#&#39;</span><br><span class="line"></span><br><span class="line">    def search(self, word: str) -&gt; bool:</span><br><span class="line">        def dfs(cur,word):</span><br><span class="line">            for i,w in enumerate(word):</span><br><span class="line">                if w&#x3D;&#x3D;&#39;.&#39;:</span><br><span class="line">                    for c in cur:</span><br><span class="line">                        if cur[c]&#x3D;&#x3D;&#39;#&#39;:continue</span><br><span class="line">                        if dfs(cur[c],word[i+1:]):return True</span><br><span class="line">                    return False</span><br><span class="line"></span><br><span class="line">                if w not in cur:</span><br><span class="line">                    return False</span><br><span class="line">                cur&#x3D;cur[w]</span><br><span class="line">            return &#39;#&#39; in cur</span><br><span class="line">        return dfs(self.root,word)</span><br></pre></td></tr></table></figure>





<h1 id="词典中最长的单词"><a href="#词典中最长的单词" class="headerlink" title="词典中最长的单词"></a><a href="https://leetcode-cn.com/problems/longest-word-in-dictionary/" target="_blank" rel="noopener">词典中最长的单词</a></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def longestWord(self, words: List[str]) -&gt; str:</span><br><span class="line">        root&#x3D;&#123;&#125;</span><br><span class="line">        def insert(word):</span><br><span class="line">            cur &#x3D; root</span><br><span class="line">            for w in word:</span><br><span class="line">                if w not in cur:</span><br><span class="line">                    cur[w]&#x3D;&#123;&#125;</span><br><span class="line">                cur&#x3D; cur[w]</span><br><span class="line">            cur[&#39;#&#39;] &#x3D; &#39;#&#39;</span><br><span class="line">        </span><br><span class="line">        def helper(word):</span><br><span class="line">            &#39;&#39;&#39;判断该单词是否由words词典中其他单词逐步添加一个字母组成&#39;&#39;&#39;</span><br><span class="line">            cur&#x3D;root</span><br><span class="line">            for w in word:</span><br><span class="line">                cur&#x3D;cur[w]</span><br><span class="line">                if &#39;#&#39; not in cur:</span><br><span class="line">                    return False</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">        for w in words:</span><br><span class="line">            insert(w)</span><br><span class="line">        </span><br><span class="line">        res&#x3D;0   # 最大长度</span><br><span class="line">        for w in words:</span><br><span class="line">            if helper(w):</span><br><span class="line">                res&#x3D;max(res,len(w))</span><br><span class="line">        </span><br><span class="line">        ans&#x3D;[]</span><br><span class="line">        for w in words:</span><br><span class="line">            if helper(w) and len(w)&#x3D;&#x3D;res:</span><br><span class="line">                ans.append(w)</span><br><span class="line">        </span><br><span class="line">        ans.sort()</span><br><span class="line">        return &quot;&quot; if not ans else ans[0]</span><br></pre></td></tr></table></figure>



<h1 id="字典序排数"><a href="#字典序排数" class="headerlink" title="字典序排数"></a><a href="https://leetcode-cn.com/problems/lexicographical-numbers/" target="_blank" rel="noopener">字典序排数</a></h1><blockquote>
<p>字典树+DFS</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def lexicalOrder(self, n: int) -&gt; List[int]:</span><br><span class="line">        root&#x3D;&#123;&#125;</span><br><span class="line">        def insert(word):</span><br><span class="line">            cur&#x3D;root</span><br><span class="line">            for w in word:</span><br><span class="line">                if w not in cur:</span><br><span class="line">                    cur[w]&#x3D;&#123;&#125;</span><br><span class="line">                cur&#x3D;cur[w]</span><br><span class="line">            cur[&#39;#&#39;]&#x3D;&#39;#&#39;</span><br><span class="line">        </span><br><span class="line">        for i in range(1,n+1):</span><br><span class="line">            insert(str(i))</span><br><span class="line">        </span><br><span class="line">        def dfs(root,path):</span><br><span class="line">            if &#39;#&#39; in root:</span><br><span class="line">                res.append(&#39;&#39;.join(path[:]))</span><br><span class="line">                if len(root)&#x3D;&#x3D;1:</span><br><span class="line">                    return</span><br><span class="line">            for r in root:</span><br><span class="line">                if r&#x3D;&#x3D;&#39;#&#39;:continue</span><br><span class="line">                path.append(r)</span><br><span class="line">                dfs(root[r],path)</span><br><span class="line">                path.pop()</span><br><span class="line">            </span><br><span class="line">        res&#x3D;[]</span><br><span class="line">        dfs(root,[])</span><br><span class="line">        return list(map(int,res))</span><br></pre></td></tr></table></figure>



<h1 id="单词替换"><a href="#单词替换" class="headerlink" title="单词替换"></a><a href="https://leetcode-cn.com/problems/replace-words/" target="_blank" rel="noopener">单词替换</a></h1><blockquote>
<p>找到一个单词的前缀直接返回，可以保证最短</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def replaceWords(self, dictionary: List[str], sentence: str) -&gt; str:</span><br><span class="line">        root&#x3D;&#123;&#125;</span><br><span class="line">        def insert(word):</span><br><span class="line">            cur&#x3D;root</span><br><span class="line">            for w in word:</span><br><span class="line">                if w not in cur:</span><br><span class="line">                    cur[w]&#x3D;&#123;&#125;</span><br><span class="line">                cur&#x3D;cur[w]</span><br><span class="line">            cur[&#39;#&#39;]&#x3D;&#39;#&#39;</span><br><span class="line">        </span><br><span class="line">        def match(word):</span><br><span class="line">            cur&#x3D;root</span><br><span class="line">            res&#x3D;&#39;&#39;</span><br><span class="line">            for w in word:</span><br><span class="line">                if w not in cur:</span><br><span class="line">                    return</span><br><span class="line">                cur&#x3D;cur[w]</span><br><span class="line">                res+&#x3D;w</span><br><span class="line">                if cur.get(&#39;#&#39;):</span><br><span class="line">                    return res</span><br><span class="line">        </span><br><span class="line">        for d in dictionary:</span><br><span class="line">            insert(d)</span><br><span class="line">        </span><br><span class="line">        res&#x3D;[]</span><br><span class="line">        for word in sentence.split():</span><br><span class="line">            tmp&#x3D;match(word)</span><br><span class="line">            if not tmp:</span><br><span class="line">                res.append(word)</span><br><span class="line">            else:</span><br><span class="line">                res.append(tmp)</span><br><span class="line">        return &#39; &#39;.join(res)</span><br></pre></td></tr></table></figure>



<h1 id="实现一个魔法字典"><a href="#实现一个魔法字典" class="headerlink" title="实现一个魔法字典"></a><a href="https://leetcode-cn.com/problems/implement-magic-dictionary/" target="_blank" rel="noopener">实现一个魔法字典</a></h1><blockquote>
<p>单词比如hello，可以构造候选单词列表：aello……zello，hallo……hzllo，然后在trie里面搜索</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MagicDictionary:</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.root&#x3D;&#123;&#125;</span><br><span class="line"></span><br><span class="line">    def buildDict(self, dictionary: List[str]) -&gt; None:</span><br><span class="line">        def insert(word):</span><br><span class="line">            cur&#x3D;self.root</span><br><span class="line">            for w in word:</span><br><span class="line">                if w not in cur:</span><br><span class="line">                    cur[w]&#x3D;&#123;&#125;</span><br><span class="line">                cur&#x3D;cur[w]</span><br><span class="line">            cur[&#39;#&#39;]&#x3D;&#39;#&#39;</span><br><span class="line">        </span><br><span class="line">        for d in dictionary:</span><br><span class="line">            insert(d)</span><br><span class="line"></span><br><span class="line">    def search(self, searchWord: str) -&gt; bool:</span><br><span class="line">        def dfs(word):</span><br><span class="line">            cur&#x3D;self.root</span><br><span class="line">            for w in word:</span><br><span class="line">                if w not in cur:</span><br><span class="line">                    return False</span><br><span class="line">                cur&#x3D;cur[w]</span><br><span class="line">            return cur.get(&#39;#&#39;)</span><br><span class="line"></span><br><span class="line">        searchWord&#x3D;list(searchWord)</span><br><span class="line">        words&#x3D;[chr(i) for i in range(ord(&#39;a&#39;),ord(&#39;z&#39;)+1)]</span><br><span class="line">        for i,w in enumerate(searchWord):</span><br><span class="line">            for x in words:</span><br><span class="line">                if x!&#x3D;w:</span><br><span class="line">                    newWord&#x3D;searchWord[:i]+[x]+searchWord[i+1:]</span><br><span class="line">                    if dfs(&#39;&#39;.join(newWord)):</span><br><span class="line">                        return True</span><br><span class="line">        </span><br><span class="line">        return False</span><br></pre></td></tr></table></figure>



<h1 id="键值映射"><a href="#键值映射" class="headerlink" title="键值映射"></a><a href="https://leetcode-cn.com/problems/map-sum-pairs/" target="_blank" rel="noopener">键值映射</a></h1><blockquote>
<p>找到根节点后，遍历多叉树累加val</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MapSum:</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.root&#x3D;&#123;&#125;</span><br><span class="line"></span><br><span class="line">    def insert(self, key: str, val: int) -&gt; None:</span><br><span class="line">        cur&#x3D;self.root</span><br><span class="line">        for k in key:</span><br><span class="line">            if k not in cur:</span><br><span class="line">                cur[k]&#x3D;&#123;&#125;</span><br><span class="line">            cur&#x3D;cur[k]</span><br><span class="line">        cur[&#39;#&#39;]&#x3D;val    #!!!</span><br><span class="line"></span><br><span class="line">    def sum(self, prefix: str) -&gt; int:</span><br><span class="line">        cur&#x3D;self.root</span><br><span class="line">        res&#x3D;[0]</span><br><span class="line">        for p in prefix:</span><br><span class="line">            if p not in cur:</span><br><span class="line">                return 0</span><br><span class="line">            cur&#x3D;cur[p]  # 找到根节点</span><br><span class="line">        </span><br><span class="line">        def dfs(root):</span><br><span class="line">            if root.get(&#39;#&#39;):</span><br><span class="line">                res[0]+&#x3D;root[&#39;#&#39;]</span><br><span class="line">            for r in root:</span><br><span class="line">                if isinstance(root[r],dict):</span><br><span class="line">                    dfs(root[r])</span><br><span class="line"></span><br><span class="line">        dfs(cur)</span><br><span class="line">        return res[0]</span><br></pre></td></tr></table></figure>



<h1 id="面试题-16-02-单词频率"><a href="#面试题-16-02-单词频率" class="headerlink" title="面试题 16.02. 单词频率"></a><a href="https://leetcode-cn.com/problems/words-frequency-lcci/" target="_blank" rel="noopener">面试题 16.02. 单词频率</a></h1><blockquote>
<p>用cur[‘#’]记录频率</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class WordsFrequency:</span><br><span class="line"></span><br><span class="line">    def __init__(self, book: List[str]):</span><br><span class="line">        self.root&#x3D;&#123;&#125;</span><br><span class="line">        def insert(word):</span><br><span class="line">            cur&#x3D;self.root</span><br><span class="line">            for w in word:</span><br><span class="line">                if w not in cur:</span><br><span class="line">                    cur[w]&#x3D;&#123;&#125;</span><br><span class="line">                cur&#x3D;cur[w]</span><br><span class="line">            if cur.get(&#39;#&#39;):</span><br><span class="line">                cur[&#39;#&#39;]+&#x3D;1</span><br><span class="line">            else:  </span><br><span class="line">                cur[&#39;#&#39;]&#x3D;1</span><br><span class="line">        for b in book:</span><br><span class="line">            insert(b)</span><br><span class="line"></span><br><span class="line">    def get(self, word: str) -&gt; int:</span><br><span class="line">        cur&#x3D;self.root</span><br><span class="line">        for w in word:</span><br><span class="line">            if w not in cur:</span><br><span class="line">                return 0</span><br><span class="line">            cur&#x3D;cur[w]</span><br><span class="line">        if cur.get(&#39;#&#39;):</span><br><span class="line">            return cur[&#39;#&#39;]</span><br><span class="line">        else:</span><br><span class="line">            return 0</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>刷题模板</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘-探索性数据分析</title>
    <url>/posts/ccf079fd/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Exploratory-Data-Analysis"><a href="#Exploratory-Data-Analysis" class="headerlink" title="Exploratory Data Analysis"></a>Exploratory Data Analysis</h1><h2 id="0-忽略警告"><a href="#0-忽略警告" class="headerlink" title="0.忽略警告"></a>0.忽略警告</h2><p>导入warnings包，利用过滤器来实现忽略警告语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import warnings</span><br><span class="line">warnings.filterwarnings(&#39;ignore&#39;)</span><br></pre></td></tr></table></figure>

<h2 id="1-简单观察数据"><a href="#1-简单观察数据" class="headerlink" title="1.简单观察数据"></a>1.简单观察数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data.head().append(data.tail())</span><br></pre></td></tr></table></figure>

<h2 id="2-观察数据形状"><a href="#2-观察数据形状" class="headerlink" title="2.观察数据形状"></a>2.观察数据形状</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data.shape</span><br></pre></td></tr></table></figure>

<h2 id="3-总览数据概况"><a href="#3-总览数据概况" class="headerlink" title="3.总览数据概况"></a>3.总览数据概况</h2><p>观察均值、极值、数量等</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data.describe()</span><br></pre></td></tr></table></figure>

<h2 id="4-缺失值检测"><a href="#4-缺失值检测" class="headerlink" title="4.缺失值检测"></a>4.缺失值检测</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data.isnull().sum()</span><br></pre></td></tr></table></figure>

<h2 id="5-nan可视化"><a href="#5-nan可视化" class="headerlink" title="5.nan可视化"></a>5.nan可视化</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">missing &#x3D; data.isnull().sum()</span><br><span class="line">missing &#x3D; missing[missing &gt; 0]</span><br><span class="line">missing.sort_values(inplace&#x3D;True)</span><br><span class="line">missing.plot.bar()</span><br></pre></td></tr></table></figure>

<h2 id="6-缺失值填充"><a href="#6-缺失值填充" class="headerlink" title="6.缺失值填充"></a>6.缺失值填充</h2><p>这里采用众数填充</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data &#x3D; data.fillna(data.mode().iloc[0,:])</span><br></pre></td></tr></table></figure>

<h2 id="7-检查数据类型"><a href="#7-检查数据类型" class="headerlink" title="7.检查数据类型"></a>7.检查数据类型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data.info()</span><br></pre></td></tr></table></figure>

<h2 id="8-异常值处理"><a href="#8-异常值处理" class="headerlink" title="8.异常值处理"></a>8.异常值处理</h2><p>以天池二手车价格预测数据集为例，其notRepairedDamage为字符串类型，需要转换成数值类型；异常值’-‘，用众数进行填充</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data.notRepairedDamage.replace(&#39;-&#39;, 0, inplace&#x3D;True)</span><br><span class="line">data[&#39;notRepairedDamage&#39;] &#x3D; data.notRepairedDamage.astype(&#39;float16&#39;)</span><br><span class="line">data.notRepairedDamage.value_counts()</span><br></pre></td></tr></table></figure>

<h2 id="9-离群点处理"><a href="#9-离群点处理" class="headerlink" title="9.离群点处理"></a>9.离群点处理</h2><p>通过箱线图判断离群点，以’power’, ‘v_11’, ‘v_12’, ‘v_13’, ‘v_14’为例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize&#x3D;(20,10))</span><br><span class="line">BoxPlotList &#x3D; [&#39;power&#39;, &#39;v_11&#39;, &#39;v_12&#39;, &#39;v_13&#39;, &#39;v_14&#39;, ]</span><br><span class="line">for i in range(1,len(BoxPlotList)+1):</span><br><span class="line">    plt.subplot(2,3,i)</span><br><span class="line">    plt.boxplot(data[BoxPlotList[i-1]])</span><br><span class="line">    plt.xlabel(BoxPlotList[i-1])</span><br></pre></td></tr></table></figure>

<p><strong>截断离群值</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data[&#39;power&#39;][data[&#39;power&#39;]&gt;600] &#x3D; 600</span><br><span class="line">data[&#39;power&#39;][data[&#39;power&#39;]&lt;1] &#x3D; 1</span><br><span class="line">data[&#39;v_13&#39;][data[&#39;v_13&#39;]&gt;6] &#x3D; 6</span><br><span class="line">data[&#39;v_14&#39;][data[&#39;v_14&#39;]&gt;4] &#x3D; 4</span><br></pre></td></tr></table></figure>

<h2 id="10-压缩数据"><a href="#10-压缩数据" class="headerlink" title="10.压缩数据"></a>10.压缩数据</h2><p>判断数据极值，用<code>np.iinfo(np.int8)</code>获取int8的范围，尽量将数据用更少的字节存储</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def MemoryReduce(data):</span><br><span class="line">    start_mem &#x3D; data.memory_usage().sum() </span><br><span class="line">    print(&#39;Memory usage: &#123;start_mem:.2f&#125; MB&#39;)</span><br><span class="line">    </span><br><span class="line">    for col in data.columns:</span><br><span class="line">        col_type &#x3D; data[col].dtype</span><br><span class="line">        </span><br><span class="line">        if col_type !&#x3D; object:</span><br><span class="line">            c_min &#x3D; data[col].min()</span><br><span class="line">            c_max &#x3D; data[col].max()</span><br><span class="line">            if str(col_type)[:3] &#x3D;&#x3D; &#39;int&#39;:</span><br><span class="line">                if c_min &gt; np.iinfo(np.int8).min and c_max &lt; np.iinfo(np.int8).max:</span><br><span class="line">                    data[col] &#x3D; data[col].astype(np.int8)</span><br><span class="line">                elif c_min &gt; np.iinfo(np.int16).min and c_max &lt; np.iinfo(np.int16).max:</span><br><span class="line">                    data[col] &#x3D; data[col].astype(np.int16)</span><br><span class="line">                elif c_min &gt; np.iinfo(np.int32).min and c_max &lt; np.iinfo(np.int32).max:</span><br><span class="line">                    data[col] &#x3D; data[col].astype(np.int32)</span><br><span class="line">                elif c_min &gt; np.iinfo(np.int64).min and c_max &lt; np.iinfo(np.int64).max:</span><br><span class="line">                    data[col] &#x3D; data[col].astype(np.int64)  </span><br><span class="line">            else:</span><br><span class="line">                if c_min &gt; np.finfo(np.float16).min and c_max &lt; np.finfo(np.float16).max:</span><br><span class="line">                    data[col] &#x3D; data[col].astype(np.float16)</span><br><span class="line">                elif c_min &gt; np.finfo(np.float32).min and c_max &lt; np.finfo(np.float32).max:</span><br><span class="line">                    data[col] &#x3D; data[col].astype(np.float32)</span><br><span class="line">                else:</span><br><span class="line">                    data[col] &#x3D; data[col].astype(np.float64)</span><br><span class="line">        else:</span><br><span class="line">            data[col] &#x3D; data[col].astype(&#39;category&#39;)</span><br><span class="line"></span><br><span class="line">    end_mem &#x3D; data.memory_usage().sum() </span><br><span class="line">    print(f&#39;Memory usage after optimization: &#123;end_mem:.2f&#125; MB&#39;)</span><br><span class="line">    return data</span><br><span class="line">data &#x3D; MemoryReduce(data)</span><br></pre></td></tr></table></figure>

<h2 id="11-倾斜值处理"><a href="#11-倾斜值处理" class="headerlink" title="11.倾斜值处理"></a>11.倾斜值处理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 读取每列不同取值的个数</span><br><span class="line">data.nunique()</span><br></pre></td></tr></table></figure>

<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;SaleID               200000</span><br><span class="line">&gt;name                 128660</span><br><span class="line">&gt;regDate                3898</span><br><span class="line">&gt;model                   248</span><br><span class="line">&gt;seller                    2</span><br><span class="line">&gt;offerType                 1</span><br><span class="line">&gt;creatDate               106</span><br><span class="line">&gt;dtype: int64</span><br></pre></td></tr></table></figure>
</blockquote>
<p>如上所示，seller 特征几乎均为 0，offerType 所有特征均为 0，存在严重的数据倾斜，对模型训练毫无帮助，删去</p>
<p><strong>删除特征</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data.drop([&#39;offerType&#39;, &#39;seller&#39;], axis&#x3D;1, inplace&#x3D;True)</span><br></pre></td></tr></table></figure>

<h2 id="12-预测值总体分布曲线"><a href="#12-预测值总体分布曲线" class="headerlink" title="12.预测值总体分布曲线"></a>12.预测值总体分布曲线</h2><p>无界约翰逊分布、正态分布、对数正态分布</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import scipy.stats as st</span><br><span class="line">y &#x3D; data[&#39;price&#39;]</span><br><span class="line">plt.figure(1); plt.title(&#39;Johnson SU&#39;)</span><br><span class="line">sns.distplot(y, kde&#x3D;False, fit&#x3D;st.johnsonsu)</span><br><span class="line">plt.figure(2); plt.title(&#39;Normal&#39;)</span><br><span class="line">sns.distplot(y, kde&#x3D;False, fit&#x3D;st.norm)</span><br><span class="line">plt.figure(3); plt.title(&#39;Log Normal&#39;)</span><br><span class="line">sns.distplot(y, kde&#x3D;False, fit&#x3D;st.lognorm)</span><br></pre></td></tr></table></figure>

<h2 id="13-生成数据分析报告"><a href="#13-生成数据分析报告" class="headerlink" title="13.生成数据分析报告"></a>13.生成数据分析报告</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas_profiling</span><br><span class="line"></span><br><span class="line">pfr &#x3D; pandas_profiling.ProfileReport(data)</span><br><span class="line">pfr.to_file(&quot;.&#x2F;example.html&quot;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>vizard入门</title>
    <url>/posts/a5c0b4a7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="vizard介绍"><a href="#vizard介绍" class="headerlink" title="vizard介绍"></a>vizard介绍</h1><blockquote>
<p>Vizard是一款<a href="https://baike.so.com/doc/2620688-2767199.html" target="_blank" rel="noopener">虚拟现实</a>开发平台软件，从开发至今已走过十个年头。它基于C/C++，运用新近OpenGL拓展模块开发出的高性能图形引擎。当运用Python语言执行开发时，Vizard同时自动将编写的程式转换为字节码抽象层(LAXMI)，进而运行渲染核心。</p>
</blockquote>
<h1 id="vizard入门"><a href="#vizard入门" class="headerlink" title="vizard入门"></a>vizard入门</h1><ol>
<li><p><strong>加载人物、对象、背景</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">avatar &#x3D; viz.addAvatar(&#39;xxx.cfg&#39;, pos&#x3D;(0,0,0), euler&#x3D;(0,0,0))</span><br><span class="line">viz.add(&#39;xxx.osgb&#39;,pos&#x3D;(0,0,0), euler&#x3D;(0,0,0))</span><br><span class="line">viz.addChild(&#39;xxx.obj&#39;,pos&#x3D;(-4,0,7.5))</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>鸽子随机漫步</strong></p>
<blockquote>
<p>①利用𝑣𝑖𝑧𝑎𝑐𝑡. 𝑟𝑎𝑛𝑑𝑓𝑙𝑜𝑎𝑡()生成随机位置，调用𝑣𝑖𝑧𝑎𝑐𝑡. 𝑤𝑎𝑙𝑘𝑇𝑜()实现鸽子漫步 </p>
<p>②利用𝑣𝑖𝑧𝑎𝑐𝑡. 𝑐ℎ𝑜𝑖𝑐𝑒()生成随机选择，随机更新鸽子的𝑠𝑡𝑎𝑡𝑒状态 </p>
<p>③调用𝑣𝑖𝑧𝑎𝑐𝑡. 𝑤𝑎𝑖𝑡𝑡𝑖𝑚𝑒()实现随机时间的等待 </p>
<p>④利用𝑣𝑖𝑧𝑎𝑐𝑡. 𝑠𝑒𝑞𝑢𝑒𝑛𝑐𝑒()实现上述动作序列</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pigeon &#x3D; viz.addAvatar(&#39;pigeon.cfg&#39;,pos&#x3D;(2,0,5))</span><br><span class="line">random_walk &#x3D; vizact.walkTo(pos&#x3D;[vizact.randfloat(1.5,2.5),0,vizact.randfloat(4.5,5.5)])</span><br><span class="line">random_animation &#x3D; vizact.method.state(vizact.choice([1,3],vizact.RANDOM))</span><br><span class="line">random_wait &#x3D; vizact.waittime(vizact.randfloat(2.0,8.0))</span><br><span class="line">pigeon_idle &#x3D; vizact.sequence( random_walk, random_animation, random_wait, viz.FOREVER)</span><br><span class="line">pigeon.runAction(pigeon_idle)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>人物谈话动作</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def PersonTalk():</span><br><span class="line">	female &#x3D; viz.addAvatar(&#39;vcc_female.cfg&#39;, pos&#x3D;(1,0,8), euler&#x3D;(-90,0,0))</span><br><span class="line">	male &#x3D; viz.addAvatar(&#39;vcc_male2.cfg&#39;, pos&#x3D;(0,0,8), euler&#x3D;(90,0,0))</span><br><span class="line">	female.state(14)</span><br><span class="line">	male.state(4)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>角色移动</strong></p>
<blockquote>
<p>①通过𝑣𝑖𝑧. 𝑔𝑒𝑡𝐹𝑟𝑎𝑚𝑒𝐸𝑙𝑎𝑝𝑠𝑒𝑑() ∗ 𝑠𝑝𝑒𝑒𝑑计算移动速度</p>
<p>②初始化欧拉矩阵𝑚1 = 𝑣𝑖𝑧. 𝑀𝑎𝑡𝑟𝑖𝑥. 𝑒𝑢𝑙𝑒𝑟(0,0,0) </p>
<p>③通过𝑣𝑖𝑧. 𝑘𝑒𝑦. 𝑖𝑠𝐷𝑜𝑤𝑛()分析对应鼠标事件，根据人物朝向𝑎𝑣𝑎𝑡𝑎𝑟. 𝑔𝑒𝑡𝐸𝑢𝑙𝑒𝑟()更 新𝑚1平移变换矩阵 </p>
<p>④通过𝑎𝑣𝑎𝑡𝑎𝑟. 𝑠𝑒𝑡𝑃𝑜𝑠𝑖𝑡𝑖𝑜𝑛(𝑚1. 𝑔𝑒𝑡𝑃𝑜𝑠𝑖𝑡𝑖𝑜𝑛())更新人物位置</p>
</blockquote>
<blockquote>
<p>⑤通过𝑣𝑖𝑧. 𝑘𝑒𝑦. 𝑖𝑠𝐷𝑜𝑤𝑛()分析对应鼠标事件，设置对应人物动画： </p>
<ul>
<li>前进、后退动画：𝑎𝑣𝑎𝑡𝑎𝑟. 𝑠𝑡𝑎𝑡𝑒(2)</li>
<li>左跨步动画：𝑎𝑣𝑎𝑡𝑎𝑟. 𝑠𝑡𝑎𝑡𝑒(12) </li>
<li>右跨步动画：𝑎𝑣𝑎𝑡𝑎𝑟. 𝑠𝑡𝑎𝑡𝑒(13) </li>
<li>人物静止动画：𝑎𝑣𝑎𝑡𝑎𝑟. 𝑠𝑡𝑎𝑡𝑒(1)</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def roleMove():</span><br><span class="line">	m1 &#x3D; viz.Matrix.euler(0,0,0)</span><br><span class="line">	dm &#x3D; viz.getFrameElapsed() * speed</span><br><span class="line">	temp&#x3D;avatar.getEuler()[0]*math.pi&#x2F;180	</span><br><span class="line">	if viz.key.isDown(&#39;w&#39;):</span><br><span class="line">		m1.preTrans([dm*math.sin(temp),0,dm*math.cos(temp)])</span><br><span class="line">		avatar.state(2)</span><br><span class="line">	elif viz.key.isDown(&#39;s&#39;):</span><br><span class="line">		m1.preTrans([-dm*math.sin(temp),0,-dm*math.cos(temp)])</span><br><span class="line">		avatar.state(2)</span><br><span class="line">	elif viz.key.isDown(&#39;a&#39;):</span><br><span class="line">		m1.preTrans([-dm*0.3*math.cos(temp),0,dm*0.3*math.sin(temp)])</span><br><span class="line">		avatar.state(12)</span><br><span class="line">	elif viz.key.isDown(&#39;d&#39;):</span><br><span class="line">		m1.preTrans([dm*0.3*math.cos(temp),0,-dm*0.3*math.sin(temp)])</span><br><span class="line">		avatar.state(13)</span><br><span class="line">	else:</span><br><span class="line">		avatar.state(1)</span><br><span class="line">		</span><br><span class="line">	avatar.setPosition(m1.getPosition(), viz.REL_PARENT)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取鼠标位移</strong></p>
<blockquote>
<p>通过回调函数<code>callback</code>获取</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def onMouseMove(e): </span><br><span class="line">    global mp_x,mp_y</span><br><span class="line">    mp_x&#x3D;e.dx</span><br><span class="line">    mp_y&#x3D;e.dy</span><br><span class="line">viz.callback(viz.MOUSE_MOVE_EVENT,onMouseMove)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h1 id="基于vizard实现的效果："><a href="#基于vizard实现的效果：" class="headerlink" title="基于vizard实现的效果："></a>基于vizard实现的效果：</h1><ol>
<li>时钟显示当前系统时间 </li>
<li>两个谈话小人（带动画） </li>
<li>第三人称漫游（带动画） <ol>
<li>前进（键盘 W 键）</li>
<li>后退（键盘 S 键）</li>
<li>左跨步（键盘 A 键）</li>
<li>右跨步（键盘 D 键） </li>
<li>旋转（使用鼠标左右平移）</li>
<li>上仰（使用鼠标上下平移）</li>
</ol>
</li>
<li>其他三维物体/背景  <ol>
<li>鸽子做自由漫步 </li>
<li>花瓶摆件 </li>
<li>天空背景 </li>
<li>草地背景</li>
</ol>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0909-1.jpg" alt="0909-1"></p>
]]></content>
      <categories>
        <category>vizard</category>
      </categories>
      <tags>
        <tag>vizard</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构之单调栈</title>
    <url>/posts/c7a68a05/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>栈是很基础的一种数据结构，具有后入先出(LIFO)的特性</p>
<p>单调栈也是一种栈，一般用于处理具有<strong>Next Greater Element</strong>特点的问题</p>
<h1 id="单调递减栈"><a href="#单调递减栈" class="headerlink" title="单调递减栈"></a><strong>单调递减栈</strong></h1><ol>
<li>在一个队列中针对每一个元素从它右边寻找第一个比它大的元素</li>
<li>在一个队列中针对每一个元素从它左边寻找第一个比它大的元素（从后往前遍历）</li>
</ol>
<h1 id="单调递增栈"><a href="#单调递增栈" class="headerlink" title="单调递增栈"></a><strong>单调递增栈</strong></h1><ol>
<li>在一个队列中针对每一个元素从它右边寻找第一个比它小的元素</li>
<li>在一个队列中针对每一个元素从它左边寻找第一个比它小的元素（从后往前遍历）</li>
</ol>
<h1 id="下一个更大元素-I"><a href="#下一个更大元素-I" class="headerlink" title="下一个更大元素 I"></a><a href="https://leetcode-cn.com/problems/next-greater-element-i/" target="_blank" rel="noopener">下一个更大元素 I</a></h1><blockquote>
<p>模板题</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -&gt; List[int]:</span><br><span class="line">        res&#x3D;defaultdict(int)</span><br><span class="line">        n&#x3D;len(nums2)</span><br><span class="line">        stack&#x3D;[]</span><br><span class="line">        for i in range(n-1,-1,-1):</span><br><span class="line">            while stack and stack[-1]&lt;&#x3D;nums2[i]:</span><br><span class="line">                stack.pop()</span><br><span class="line">            res[nums2[i]]&#x3D;stack[-1] if stack else -1</span><br><span class="line">            stack.append(nums2[i])</span><br><span class="line">        return [res[n] for n in nums1]</span><br></pre></td></tr></table></figure>



<h1 id="下一个更大元素-II"><a href="#下一个更大元素-II" class="headerlink" title="下一个更大元素 II"></a><a href="https://leetcode-cn.com/problems/next-greater-element-ii/" target="_blank" rel="noopener">下一个更大元素 II</a></h1><blockquote>
<p>同上，2个nums接起来做就行</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def nextGreaterElements(self, nums: List[int]) -&gt; List[int]:</span><br><span class="line">        nums&#x3D;nums[:]+nums[:]</span><br><span class="line">        n&#x3D;len(nums)</span><br><span class="line">        res&#x3D;[0]*n</span><br><span class="line">        stack&#x3D;[]</span><br><span class="line">        for i in range(n-1,-1,-1):</span><br><span class="line">            while stack and stack[-1]&lt;&#x3D;nums[i]:</span><br><span class="line">                stack.pop()</span><br><span class="line">            res[i]&#x3D;stack[-1] if stack else -1</span><br><span class="line">            stack.append(nums[i])</span><br><span class="line">        </span><br><span class="line">        return res[:n&#x2F;&#x2F;2]</span><br></pre></td></tr></table></figure>





<h1 id="每日温度"><a href="#每日温度" class="headerlink" title="每日温度"></a><a href="https://leetcode-cn.com/problems/daily-temperatures/" target="_blank" rel="noopener">每日温度</a></h1><blockquote>
<p>模板，只不过找的是下标之间的关系</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def dailyTemperatures(self, temperatures: List[int]) -&gt; List[int]:</span><br><span class="line">        n&#x3D;len(temperatures)</span><br><span class="line">        stack,res&#x3D;[],[0]*n</span><br><span class="line">        for i in range(n-1,-1,-1):</span><br><span class="line">            while stack and temperatures[stack[-1]]&lt;&#x3D;temperatures[i]:</span><br><span class="line">                stack.pop()</span><br><span class="line">            res[i]&#x3D;stack[-1]-i if stack else 0</span><br><span class="line">            stack.append(i)</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>



<h1 id="链表中的下一个更大节点"><a href="#链表中的下一个更大节点" class="headerlink" title="链表中的下一个更大节点"></a><a href="https://leetcode-cn.com/problems/next-greater-node-in-linked-list/" target="_blank" rel="noopener">链表中的下一个更大节点</a></h1><blockquote>
<p>链表转数组，然后模板</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Definition for singly-linked list.</span><br><span class="line"># class ListNode:</span><br><span class="line">#     def __init__(self, val&#x3D;0, next&#x3D;None):</span><br><span class="line">#         self.val &#x3D; val</span><br><span class="line">#         self.next &#x3D; next</span><br><span class="line">class Solution:</span><br><span class="line">    def nextLargerNodes(self, head: ListNode) -&gt; List[int]:</span><br><span class="line">        nums&#x3D;[]</span><br><span class="line">        while head:</span><br><span class="line">            nums.append(head.val)</span><br><span class="line">            head&#x3D;head.next</span><br><span class="line">        </span><br><span class="line">        n&#x3D;len(nums)</span><br><span class="line">        stack&#x3D;[]</span><br><span class="line">        res&#x3D;[0]*n</span><br><span class="line">        for i in range(n-1,-1,-1):</span><br><span class="line">            while stack and stack[-1]&lt;&#x3D;nums[i]:</span><br><span class="line">                stack.pop()</span><br><span class="line">            res[i]&#x3D;stack[-1] if stack else 0</span><br><span class="line">            stack.append(nums[i])</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>



<h1 id="商品折扣后的最终价格"><a href="#商品折扣后的最终价格" class="headerlink" title="商品折扣后的最终价格"></a><a href="https://leetcode-cn.com/problems/final-prices-with-a-special-discount-in-a-shop/" target="_blank" rel="noopener">商品折扣后的最终价格</a></h1><blockquote>
<p>单调递增栈</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def finalPrices(self, prices: List[int]) -&gt; List[int]:</span><br><span class="line">        n&#x3D;len(prices)</span><br><span class="line">        stack&#x3D;[]</span><br><span class="line">        for i in range(n):</span><br><span class="line">            while stack and prices[i]&lt;&#x3D;prices[stack[-1]]:</span><br><span class="line">                prices[stack[-1]]-&#x3D;prices[i]</span><br><span class="line">                stack.pop()</span><br><span class="line">            stack.append(i)</span><br><span class="line">        return prices</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>算法</category>
        <category>刷题模板</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>信息标记方式</title>
    <url>/posts/a9316775/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><p>xml,即 <strong>eXtensible Markup Language</strong>，是以标签对的形式（参考HTML）组织文本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">正常形式: &lt;name&gt; … &lt;&#x2F;name&gt;</span><br><span class="line"></span><br><span class="line">空元素的缩写形式: &lt;name &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">注释书写形式：&lt;!‐‐ ‐‐&gt;</span><br></pre></td></tr></table></figure>

<p>如下述语句:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;1.jpg&quot; size&#x3D;&quot;10&quot;&gt; … &lt;&#x2F;img&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>tag：整体</li>
<li>name：img</li>
<li>attribute：src、size</li>
</ul>
<p><strong>实例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;person&gt;</span><br><span class="line">	&lt;firstName&gt;Tian&lt;&#x2F;firstName&gt;</span><br><span class="line">	&lt;lastName&gt;Song&lt;&#x2F;lastName&gt;</span><br><span class="line">	&lt;address&gt;</span><br><span class="line">		&lt;streetAddr&gt;中关村南大街5号&lt;&#x2F;streetAddr&gt;</span><br><span class="line">		&lt;city&gt;北京市&lt;&#x2F;city&gt;</span><br><span class="line">		&lt;zipcode&gt;100081&lt;&#x2F;zipcode&gt;</span><br><span class="line">	&lt;&#x2F;address&gt;</span><br><span class="line">	&lt;prof&gt;Computer System&lt;&#x2F;prof&gt;&lt;prof&gt;Security&lt;&#x2F;prof&gt;</span><br><span class="line">&lt;&#x2F;person&gt;</span><br></pre></td></tr></table></figure>







<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>json，即 <strong>JavsScript Object Notation</strong>，有类型键值对</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;name&#39;:&#39;BIT&#39;	注意单引号表示字符类型，不能去掉；形式是 key:value</span><br><span class="line"></span><br><span class="line">&#39;name&#39;:[&#39;BIT&#39;,&#39;北理&#39;]			多值用[,]组织</span><br><span class="line"></span><br><span class="line">&#39;name&#39;:&#123;					  键值对嵌套用&#123;,&#125;</span><br><span class="line">	&#39;name1&#39;:&#39;BIT&#39;,</span><br><span class="line">	&#39;name2&#39;:&#39;北理&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	“firstName” : “Tian” ,</span><br><span class="line">	“lastName” : “Song” ,</span><br><span class="line">	“address” : &#123;</span><br><span class="line">		“streetAddr” : “中关村南大街5号” ,</span><br><span class="line">		“city” : “北京市” ,</span><br><span class="line">		“zipcode” : “100081”</span><br><span class="line">	&#125; ,</span><br><span class="line">	“prof” : [ “Computer System” , “Security” ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h1><p>yaml，即 <strong>YAML Ain’t Markup Language</strong>，无类型键值对</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name:BIT	无需单引号，仅字符串；形式为key:value</span><br><span class="line"></span><br><span class="line">name:		缩进表达所属关系</span><br><span class="line">	name1:BIT</span><br><span class="line">	name2:北理</span><br><span class="line"></span><br><span class="line">name:		‐ 表达并列关系</span><br><span class="line">-BIT</span><br><span class="line">-北理</span><br><span class="line"></span><br><span class="line">text: | #学校介绍			| 表达整块数据，# 表示注释</span><br><span class="line">北京理工大学简称北理，即BIT</span><br></pre></td></tr></table></figure>

<p><strong>实例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firstName : Tian</span><br><span class="line">lastName : Song</span><br><span class="line">address :</span><br><span class="line">	streetAddr : 中关村南大街5号</span><br><span class="line">	city : 北京市</span><br><span class="line">	zipcode : 100081</span><br><span class="line">prof :</span><br><span class="line">‐Computer System</span><br><span class="line">‐Security</span><br></pre></td></tr></table></figure>



<h1 id="三种信息标记形式的比较"><a href="#三种信息标记形式的比较" class="headerlink" title="三种信息标记形式的比较"></a>三种信息标记形式的比较</h1><ul>
<li>XML<ul>
<li>最早的通用信息标记语言，可扩展性好，但繁琐</li>
<li>Internet上的信息交互与传递</li>
</ul>
</li>
<li>JSON <ul>
<li>信息有类型，适合程序处理(js)，较XML简洁 </li>
<li>移动应用云端和节点的信息通信，无注释</li>
</ul>
</li>
<li><ul>
<li>YAML 信息无类型，文本信息比例最高，可读性好</li>
<li>各类系统的配置文件，有注释易读</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>信息标记</category>
      </categories>
      <tags>
        <tag>xml</tag>
        <tag>json</tag>
        <tag>yaml</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构之并查集</title>
    <url>/posts/14e058c6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n: int)</span>:</span></span><br><span class="line">        self.rank = [<span class="number">1</span>] * n</span><br><span class="line">        self.root = list(range(n))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> self.root[x] != x: self.root[x] = self.find(self.root[x])</span><br><span class="line">        <span class="keyword">return</span> self.root[x]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x: int, y: int)</span> -&gt; bool:</span></span><br><span class="line">        rootx, rooty = self.find(x), self.find(y)</span><br><span class="line">        <span class="keyword">if</span> rootx == rooty: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> self.rank[rootx] &lt; self.rank[rooty]:</span><br><span class="line">            rootx, rooty = rooty, rootx</span><br><span class="line">        self.rank[rootx] += self.rank[rooty]</span><br><span class="line">        self.root[rooty] = rootx</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>或者利用字典：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f=&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(x)</span>:</span></span><br><span class="line">	f.setdefault(x,x)</span><br><span class="line">	<span class="keyword">if</span> x!=f[x]:</span><br><span class="line">		f[x]=find(f[x])</span><br><span class="line">	<span class="keyword">return</span> f[x]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(x,y)</span>:</span></span><br><span class="line">	f[find(x)]=f[find(y)]</span><br></pre></td></tr></table></figure>







<h1 id="被围绕的区域"><a href="#被围绕的区域" class="headerlink" title="被围绕的区域"></a><a href="https://leetcode-cn.com/problems/surrounded-regions/" target="_blank" rel="noopener">被围绕的区域</a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(self, board: List[List[str]])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        f=&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(x)</span>:</span></span><br><span class="line">            f.setdefault(x,x)</span><br><span class="line">            <span class="keyword">if</span> x!=f[x]:</span><br><span class="line">                f[x]=find(f[x])</span><br><span class="line">            <span class="keyword">return</span> f[x]</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(x,y)</span>:</span></span><br><span class="line">            f[find(x)]=f[find(y)]</span><br><span class="line">        </span><br><span class="line">        row,col=len(board),len(board[<span class="number">0</span>])</span><br><span class="line">        inf=row*col</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(row):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(col):</span><br><span class="line">                <span class="keyword">if</span> board[i][j]==<span class="string">'O'</span>:</span><br><span class="line">                    <span class="keyword">if</span> i==<span class="number">0</span> <span class="keyword">or</span> i==row<span class="number">-1</span> <span class="keyword">or</span> j==<span class="number">0</span> <span class="keyword">or</span> j==col<span class="number">-1</span>:</span><br><span class="line">                        union(i*col+j,inf)  <span class="comment"># 收集所有边界O</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">for</span> x,y <span class="keyword">in</span> [(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">0</span>,<span class="number">-1</span>),(<span class="number">1</span>,<span class="number">0</span>),(<span class="number">-1</span>,<span class="number">0</span>)]:</span><br><span class="line">                            <span class="keyword">if</span> board[i+x][j+y]==<span class="string">'O'</span>:</span><br><span class="line">                                union(i*col+j,(i+x)*col+(j+y))  <span class="comment"># 连通非边界O</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(row):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(col):</span><br><span class="line">                <span class="keyword">if</span> find(i*col+j)==find(inf):</span><br><span class="line">                    board[i][j]=<span class="string">'O'</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    board[i][j]=<span class="string">'X'</span></span><br></pre></td></tr></table></figure>



<h1 id="省份数量"><a href="#省份数量" class="headerlink" title="省份数量"></a><a href="https://leetcode-cn.com/problems/number-of-provinces/" target="_blank" rel="noopener">省份数量</a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findCircleNum</span><span class="params">(self, isConnected: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        f=&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(x)</span>:</span></span><br><span class="line">            f.setdefault(x,x)</span><br><span class="line">            <span class="keyword">if</span> x!=f[x]:</span><br><span class="line">                f[x]=find(f[x])</span><br><span class="line">            <span class="keyword">return</span> f[x]</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(x,y)</span>:</span></span><br><span class="line">            f[find(x)]=f[find(y)]</span><br><span class="line">        </span><br><span class="line">        row,col=len(isConnected),len(isConnected[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(row):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(col):</span><br><span class="line">                <span class="keyword">if</span> isConnected[i][j]:</span><br><span class="line">                    union(i,j)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> f.keys():</span><br><span class="line">            f[k]=find(f[k])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> len(set(f.values()))</span><br></pre></td></tr></table></figure>



<h1 id="冗余连接"><a href="#冗余连接" class="headerlink" title="冗余连接"></a><a href="https://leetcode-cn.com/problems/redundant-connection/" target="_blank" rel="noopener">冗余连接</a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findRedundantConnection</span><span class="params">(self, edges: List[List[int]])</span> -&gt; List[int]:</span></span><br><span class="line">        f=&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(x)</span>:</span></span><br><span class="line">            f.setdefault(x,x)</span><br><span class="line">            <span class="keyword">if</span> x!=f[x]:</span><br><span class="line">                f[x]=find(f[x])</span><br><span class="line">            <span class="keyword">return</span> f[x]</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(x,y)</span>:</span></span><br><span class="line">            f[find(x)]=f[find(y)]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> tmp <span class="keyword">in</span> edges:</span><br><span class="line">            <span class="keyword">if</span> find(tmp[<span class="number">0</span>])!=find(tmp[<span class="number">1</span>]):</span><br><span class="line">                union(tmp[<span class="number">0</span>],tmp[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> [tmp[<span class="number">0</span>],tmp[<span class="number">1</span>]]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>刷题模板</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习之KNN</title>
    <url>/posts/f2b0b6a6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>KNN即k近邻法，k-nearest neighbor，是1967年由Cover T和Hart P提出的一种基本分类与回归方法，也是机器学习的基础算法之一。</p>
<p>本文参考教程：<a href="https://book.douban.com/subject/24703171/" target="_blank" rel="noopener">《机器学习实战》</a></p>
<h1 id="KNN算法原理"><a href="#KNN算法原理" class="headerlink" title="KNN算法原理"></a>KNN算法原理</h1><p>​        在一个样本数据集合，也称作为训练样本集，并且样本集中每个数据都存在标签，即我们知道样本集中每一个数据与所属分类的对应关系。输入没有标签的新数据后，将新的数据的每个特征与样本集中数据对应的特征进行比较，然后算法提取样本最相似数据(最近邻)的分类标签。一般来说，我们只选择样本数据集中前k个最相似的数据，这就是k-近邻算法中k的出处，通常k是不大于20的整数。最后，选择k个最相似数据中出现次数最多的分类，作为新数据的分类。</p>
<p>​        因此也可以说，KNN算法实际上没有进行训练，即它的训练复杂度为0；KNN近邻算法是用相似性来判断类别的，你和谁更像，那就认为你是哪种人。</p>
<p>    KNN适用于数值型和标称型的数据，其优点是精度高、对异常值不敏感、无数据输入假定，但是缺点也很明显，我们每次使用都需要遍历整个训练集，计算复杂度和空间复杂度都很高。</p>
<h1 id="KNN代码模板"><a href="#KNN代码模板" class="headerlink" title="KNN代码模板"></a>KNN代码模板</h1><p><strong>1.导入依赖</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">from collections import Counter</span><br></pre></td></tr></table></figure>

<p><strong>2.生成样本</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def createDateSet():</span><br><span class="line">    group &#x3D; np.array([[1.0,1.1],[1.0,1.0],[0,0],[0,0.1]])</span><br><span class="line">    labels &#x3D; [&#39;A&#39;,&#39;A&#39;,&#39;B&#39;,&#39;B&#39;]</span><br><span class="line">    return group,labels</span><br></pre></td></tr></table></figure>

<p><strong>3.KNN算法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def classify0(inX, dataSet, labels, k):</span><br><span class="line">    dataSetSize &#x3D; dataSet.shape[0]</span><br><span class="line">    diffMat &#x3D; np.tile(inX, (dataSetSize,1)) - dataSet</span><br><span class="line">    sqDiffMat &#x3D; diffMat**2</span><br><span class="line">    sqDistances &#x3D; sqDiffMat.sum(axis &#x3D; 1)</span><br><span class="line">    distances &#x3D; sqDistances**0.5</span><br><span class="line">    sortedDistIndicies &#x3D; np.argsort(distances)</span><br><span class="line"></span><br><span class="line">    voteIlabel &#x3D; np.array(labels)[sortedDistIndicies[:k]]</span><br><span class="line">    return Counter(voteIlabel).most_common(1)[0][0]</span><br></pre></td></tr></table></figure>

<p><strong>4.主函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def main():</span><br><span class="line">    k &#x3D; 3</span><br><span class="line">    test&#x3D;[0,0]</span><br><span class="line">    group,labels &#x3D; createDateSet()</span><br><span class="line">    result &#x3D; classify0(test, group ,labels,k)</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>



<h1 id="KNN步步推进"><a href="#KNN步步推进" class="headerlink" title="KNN步步推进"></a>KNN步步推进</h1><ul>
<li><p>仿jupyter，第一个代码框为In[ ]，第二个代码框为Out[ ]</p>
</li>
<li><p>KNN的实现很简单，但利用numpy实现会很很神奇</p>
</li>
</ul>
<blockquote>
<p><strong>1.获取样本数量</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">group &#x3D; np.array([[1.0,1.1],[1.0,1.0],[0,0],[0,0.1]])</span><br><span class="line">labels &#x3D; [&#39;A&#39;,&#39;A&#39;,&#39;B&#39;,&#39;B&#39;]</span><br><span class="line">dataSetSize &#x3D; group.shape[0]</span><br><span class="line">dataSetSize</span><br></pre></td></tr></table></figure>

<p><code>4</code></p>
<p><strong>2.获取inX与样本的坐标差值</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test&#x3D;[0,0]</span><br><span class="line">diffMat &#x3D; np.tile(test, (dataSetSize,1)) - group</span><br><span class="line">diffMat</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([[-1. , -1.1],</span><br><span class="line">       [-1. , -1. ],</span><br><span class="line">       [ 0. ,  0. ],</span><br><span class="line">       [ 0. , -0.1]])</span><br></pre></td></tr></table></figure>

<p>可以发现，利用np.tile(）重复test，一次性求出test与每个样本的坐标差值</p>
<p><strong>3.获取距离</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqDiffMat &#x3D; diffMat**2</span><br><span class="line">sqDistances &#x3D; sqDiffMat.sum(axis &#x3D; 1)</span><br><span class="line">sqDistances</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([2.21, 2.  , 0.  , 0.01])</span><br></pre></td></tr></table></figure>

<p>注意sum求和时轴的方向</p>
<p><strong>4.排序取索引</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sortedDistIndicies &#x3D; np.argsort(distances)</span><br><span class="line">sortedDistIndicies</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([2, 3, 1, 0], dtype&#x3D;int64)</span><br></pre></td></tr></table></figure>

<p><strong>5.获取前K个相邻点的标签</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">k&#x3D;3</span><br><span class="line">voteIlabel &#x3D; np.array(labels)[sortedDistIndicies[:k]]</span><br><span class="line">voteIlabel</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array([&#39;B&#39;, &#39;B&#39;, &#39;A&#39;], dtype&#x3D;&#39;&lt;U1&#39;)</span><br></pre></td></tr></table></figure>

<p>label原为列表类型，先转化成ndarray</p>
<p><strong>6.统计，返回数量最多的标签</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from collections import Counter</span><br><span class="line">cnt&#x3D;Counter(voteIlabel)</span><br><span class="line">cnt.most_common(1)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[(&#39;B&#39;, 2)]</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="KNN实战讲解"><a href="#KNN实战讲解" class="headerlink" title="KNN实战讲解"></a>KNN实战讲解</h1><p><strong>约会大作战：</strong></p>
<p>​        海伦小姐提供了一份她以前相亲经历的所有案例，总共有1000场，现在希望通过机器学习分析一下这些数据，让她以后不用见面就能先大致知道对方属于自己心目中的哪一类人。</p>
<p>    海伦小姐总共考察了三个指标，分别是：</p>
<ul>
<li><p>每年获得的飞行常客里程数</p>
</li>
<li><p>玩视频游戏所耗时间百分比</p>
</li>
<li><p>每周消费的冰淇淋公升数</p>
<p>那么怎样通过KNN来分类呢？</p>
</li>
</ul>
<ol>
<li><p><strong>获取数据</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def getDateSet():</span><br><span class="line">    df &#x3D; pd.read_excel(&#39;date.xlsx&#39;)</span><br><span class="line">    labels &#x3D; np.array(df[&#39;label&#39;])</span><br><span class="line">    df.drop(&#39;label&#39;, axis&#x3D;1, inplace&#x3D;True)</span><br><span class="line">    data &#x3D; np.array(df)</span><br><span class="line">    return data, labels</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>标准化</strong></p>
<p>因为有的特征数值绝对值特别大，因此要对数据进行<strong>归一化</strong>处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def normalization(data):</span><br><span class="line">    min_val &#x3D; data.min(0)</span><br><span class="line">    max_val &#x3D; data.max(0)</span><br><span class="line">    ranges &#x3D; max_val - min_val  # 极差</span><br><span class="line">    norm_data &#x3D; (data - min_val) &#x2F; ranges</span><br><span class="line">    return norm_data</span><br></pre></td></tr></table></figure>

<p>也可以利用<code>sklearn</code>进行归一化：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data &#x3D; MinMaxScaler().fit_transform(data)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>KNN算法</strong></p>
<p>与前文一致。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def classify0(inX, dataSet, labels, k):</span><br><span class="line">    dataSetSize &#x3D; dataSet.shape[0]</span><br><span class="line">    diffMat &#x3D; np.tile(inX, (dataSetSize,1)) - dataSet</span><br><span class="line">    sqDiffMat &#x3D; diffMat**2</span><br><span class="line">    sqDistances &#x3D; sqDiffMat.sum(axis &#x3D; 1)</span><br><span class="line">    distances &#x3D; sqDistances**0.5</span><br><span class="line">    sortedDistIndicies &#x3D; np.argsort(distances)</span><br><span class="line"></span><br><span class="line">    voteIlabel &#x3D; np.array(labels)[sortedDistIndicies[:k]]</span><br><span class="line">    return Counter(voteIlabel).most_common(1)[0][0]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>主函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def main():</span><br><span class="line">    data,labels &#x3D; getDateSet()</span><br><span class="line">    norm_data &#x3D; normalization(data)</span><br><span class="line">    test&#x3D;np.array([26052, 1.441871, 0.805124])</span><br><span class="line">    norm_test&#x3D;normalization(test)</span><br><span class="line"></span><br><span class="line">    result &#x3D; classify0(norm_test, norm_data ,labels,k&#x3D;5)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>

<p>结果为1，说明是一个极具魅力的男性。</p>
</li>
</ol>
<h1 id="KNN调包能手"><a href="#KNN调包能手" class="headerlink" title="KNN调包能手"></a>KNN调包能手</h1><p>在手码一遍KNN以后，其实对其原理以及有了充分的认识，那么以后就可以调包了【狗头】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line">from sklearn.neighbors import KNeighborsClassifier</span><br><span class="line"></span><br><span class="line">def getDateSet():</span><br><span class="line">    df &#x3D; pd.read_excel(&#39;date.xlsx&#39;)</span><br><span class="line">    labels &#x3D; np.array(df[&#39;label&#39;])</span><br><span class="line">    df.drop(&#39;label&#39;, axis&#x3D;1, inplace&#x3D;True)</span><br><span class="line">    data &#x3D; np.array(df)</span><br><span class="line">    return data, labels</span><br><span class="line"></span><br><span class="line">data,labels &#x3D; getDateSet()</span><br><span class="line"></span><br><span class="line"># 按7:3 划分训练集与测试集</span><br><span class="line">x_train, x_test , y_train, y_test &#x3D; train_test_split(data, labels, test_size &#x3D; 0.3)</span><br><span class="line"></span><br><span class="line"># k&#x3D;3</span><br><span class="line">knn &#x3D; KNeighborsClassifier(n_neighbors&#x3D;3)</span><br><span class="line">knn.fit(x_train, y_train)</span><br><span class="line">error_index &#x3D; np.nonzero(knn.predict(x_test) - y_test)[0]</span><br><span class="line">print(f&#39;预测准确率为: &#123;100*(1 - len(error_index) &#x2F; len(data))&#125;%&#39;)</span><br></pre></td></tr></table></figure>

<p>简单的训练之后，即可达到94%的准确率。</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>MNIST-深度学习里的hello world</title>
    <url>/posts/1feb8738/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MNIST介绍"><a href="#MNIST介绍" class="headerlink" title="MNIST介绍"></a>MNIST介绍</h1><p>MNIST是机器学习领域的一个经典数据集，内含60000张训练图像与10000张预测图像，每张图片为28像素*28像素的灰度图像，并被划分到10个类别中(0-9)。</p>
<p>MNIST手写数字识别，正是深度学习里的Hello World。</p>
<h1 id="加载数据集"><a href="#加载数据集" class="headerlink" title="加载数据集"></a>加载数据集</h1><p>mnist数据预加载在keras库中，其中包括4个numpy数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from keras.datasets import mnist</span><br><span class="line"></span><br><span class="line">(train_images,train_labels),(test_images,test_labels) &#x3D; mnist.load_data()</span><br><span class="line"></span><br><span class="line">print(train_images.shape,test_images.shape)</span><br><span class="line">print(train_labels[:20])</span><br></pre></td></tr></table></figure>



<h1 id="构建网络"><a href="#构建网络" class="headerlink" title="构建网络"></a>构建网络</h1><p>网络共2个dense层（即全连接层）</p>
<p>第一层网络共512个隐藏单元（hidden unit），激活函数为relu</p>
<p>第一层网络共10个隐藏单元，激活函数为softmax</p>
<p>关于指定输入数据的shape，可以看<a href="http://ducknew.cf/posts/e9e6cec8/">http://ducknew.cf/posts/e9e6cec8/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from keras import models,layers</span><br><span class="line"></span><br><span class="line">network&#x3D;models.Sequential()</span><br><span class="line">network.add(layers.Dense(512,activation&#x3D;&#39;relu&#39;,input_shape&#x3D;(28*28,)))</span><br><span class="line">network.add(layers.Dense(10,activation&#x3D;&#39;softmax&#39;))</span><br></pre></td></tr></table></figure>



<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><ul>
<li>optimizer（优化器）：该参数可指定为已预定义的优化器名，如 rmsprop 、 adagrad ，或一 个 Optimizer 类的对象</li>
<li>loss（损失函数）：该参数为模型试图最小化的目标函数，它可为预定义的损失函数名， 如 categorical_crossentropy 、 mse</li>
<li>metrics（指标列表）：对分类问题，我们一般将该列表设置为 metrics=[‘accuracy’] 。指标可以是一个预 定义指标的名字,也可以是一个用户定制的函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">network.compile(optimizer&#x3D;&#39;rmsprop&#39;,</span><br><span class="line">                loss&#x3D;&#39;categorical_crossentropy&#39;,</span><br><span class="line">                metrics&#x3D;[&#39;accuracy&#39;])</span><br></pre></td></tr></table></figure>



<h1 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h1><p>原数据shape为(60000,28,28)，类型为uint8，取值范围为【0，255】</p>
<p>转换后数据shape为(60000,28*28)，类型为float32，取值范围为【0，1】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">train_images&#x3D;train_images.reshape((60000,28*28))</span><br><span class="line">train_images &#x3D; train_images.astype(&#39;float32&#39;) &#x2F; 255</span><br><span class="line">test_images&#x3D;test_images.reshape((10000,28*28))</span><br><span class="line">test_images &#x3D; test_images.astype(&#39;float32&#39;) &#x2F; 255</span><br></pre></td></tr></table></figure>



<h1 id="准备标签"><a href="#准备标签" class="headerlink" title="准备标签"></a>准备标签</h1><p>对标签进行分类编码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from tensorflow.keras.utils import to_categorical</span><br><span class="line"></span><br><span class="line">train_labels &#x3D; to_categorical(train_labels)</span><br><span class="line">test_labels &#x3D; to_categorical(test_labels)</span><br></pre></td></tr></table></figure>



<h1 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h1><p>epochs被定义为向前和向后传播中所有批次的单次训练迭代</p>
<blockquote>
<p>举个例子</p>
<p>训练集有1000个样本，batchsize=10，那么：<br>训练完整个样本集需要：<br>100次iteration，1次epoch</p>
<p>one <strong>epoch</strong> = numbers of <strong>iterations</strong> = N = 训练样本的数量/<strong>batch_size</strong></p>
</blockquote>
<p>batch_size可以看这里: <a href="http://ducknew.cf/posts/e9e6cec8/">http://ducknew.cf/posts/e9e6cec8/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">network.fit(train_images,train_labels,epochs&#x3D;10,batch_size&#x3D;128)</span><br></pre></td></tr></table></figure>

<p>运行过程显示：</p>
<blockquote>
<p>Epoch 1/10<br>469/469 [==============================] - 15s 6ms/step - loss: 0.4178 - accuracy: 0.8784<br>Epoch 2/10<br>469/469 [==============================] - 3s 5ms/step - loss: 0.1119 - accuracy: 0.9669<br>Epoch 3/10<br>469/469 [==============================] - 2s 5ms/step - loss: 0.0711 - accuracy: 0.9784<br>Epoch 4/10<br>469/469 [==============================] - 2s 5ms/step - loss: 0.0504 - accuracy: 0.9852<br>Epoch 5/10<br>469/469 [==============================] - 3s 5ms/step - loss: 0.0376 - accuracy: 0.9888<br>Epoch 6/10<br>469/469 [==============================] - 2s 5ms/step - loss: 0.0263 - accuracy: 0.9923<br>Epoch 7/10<br>469/469 [==============================] - 2s 5ms/step - loss: 0.0201 - accuracy: 0.9942<br>Epoch 8/10<br>469/469 [==============================] - 2s 5ms/step - loss: 0.0142 - accuracy: 0.9959<br>Epoch 9/10<br>469/469 [==============================] - 3s 5ms/step - loss: 0.0116 - accuracy: 0.9968<br>Epoch 10/10<br>469/469 [==============================] - 2s 5ms/step - loss: 0.0094 - accuracy: 0.9977</p>
</blockquote>
<h1 id="评估模型"><a href="#评估模型" class="headerlink" title="评估模型"></a>评估模型</h1><p>loss是网络在测试数据上的损失，acc是网络在测试数据上的精度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test_loss,test_acc &#x3D; network.evaluate(test_images,test_labels)</span><br><span class="line">print(f&#39;test_loss: &#123;test_loss&#125;, test_acc: &#123;test_acc&#125;&#39;)</span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test_loss: 0.0742919072508812, test_acc: 0.9818999767303467</span><br></pre></td></tr></table></figure>

<p>可以发现<code>test_acc</code>&lt;训练过程中的<code>accuracy</code>，这种训练精度与测试精度之间的差距一般是<strong>过拟合（overfit）</strong>造成的。</p>
<h1 id="更多小型demo"><a href="#更多小型demo" class="headerlink" title="更多小型demo"></a>更多小型demo</h1><ul>
<li>CIFAR10 小图片分类：使用CNN和实时数据提升 </li>
<li>IMDB 电影评论观点分类：使用LSTM处理成序列的词语 </li>
<li>Reuters（路透社）新闻主题分类：使用多层感知器（MLP） </li>
<li>字符级文本生成：使用LSTM</li>
</ul>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构之树状数组</title>
    <url>/posts/18d6c63e/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="树状数组引入"><a href="#树状数组引入" class="headerlink" title="树状数组引入"></a>树状数组引入</h1><p>一个数总可写成：$num=2^i + 2^j + 2^k,i&lt;j&lt;k$(参考二进制)</p>
<p>因此可以将[1,num]区间分成</p>
<p>$len=2^i:[1,2^i]$</p>
<p>$len=2^j:[2^i+1,2^j]$</p>
<p>$len=2^k:[2^j+1,2^k]$</p>
<p>树状数组（还有块状数组）就是这样将一个区间分成不同长度(一般长为2的幂次方)来进行维护的方法</p>
<ul>
<li>树状数组也叫 Binary Indexed Tree，二进制索引树，树状数组里某个元素管理了原始输入数组多少数据是由下标决定的</li>
<li>树状数组通常用于动态的维护前缀数组</li>
<li>树状数组的特点是<strong>区间查询</strong>和<strong>单点更新</strong>均为<code>O(logn)</code></li>
</ul>
<h1 id="lowbit"><a href="#lowbit" class="headerlink" title="lowbit"></a>lowbit</h1><p>先看一个例子：<code>lowbit(44)=lowbit(101100B)=(100B)=4</code></p>
<p>可以发现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">原码：101100</span><br><span class="line">取反：010011</span><br><span class="line">加一：010100</span><br><span class="line"></span><br><span class="line">原码&amp;取反+1：000100</span><br></pre></td></tr></table></figure>

<p>所有，<code>lowbit(i)=i&amp;(~i+1)</code></p>
<p>考虑到计算机以补码的形式存储整数，所以<code>lowbit(i)=i&amp;(-i)</code></p>
<blockquote>
<ul>
<li>当x为0时结果为0</li>
<li>x为奇数时，结果为1</li>
<li>x为偶数时，结果为x中2的最大次方的因子</li>
</ul>
</blockquote>
<h1 id="树状数组和原数组"><a href="#树状数组和原数组" class="headerlink" title="树状数组和原数组"></a>树状数组和原数组</h1><p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.10/1001-1.jpg" alt="1001-1"></p>
<p>数组数组与原数组关系：(注意数组数组下标从1开始)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C[1]&#x3D;A[1]</span><br><span class="line">C[2]&#x3D;A[1]+A[2]</span><br><span class="line">C[3]&#x3D;A[3]</span><br><span class="line">C[4]&#x3D;A[1]+A[2]+A[3]+A[4]</span><br><span class="line">C[5]&#x3D;A[5]</span><br><span class="line">C[6]&#x3D;A[5]+A[6]</span><br><span class="line">C[7]&#x3D;A[7]</span><br><span class="line">C[8]&#x3D;A[1]+A[2]+A[3]+A[4]+A[5]+A[6]+A[7]+A[8]</span><br></pre></td></tr></table></figure>

<p>总结规律，可以发现</p>
<p><code>C[i]=A[i-lowbit(i)+1] + …… + A[i]</code></p>
<h1 id="单点更新，区间查询"><a href="#单点更新，区间查询" class="headerlink" title="单点更新，区间查询"></a>单点更新，区间查询</h1><p>更新时，需要同时更新<code>A[i],A[i+lowbit(i)],A[i+2*lowbit(i)]……不超过最大值</code></p>
<p>求和时，则累加<code>A[i]+A[i-lowbit(i)]+A[i-2*lowbit(i)]+……+A[1]</code></p>
<p>例如，add(3,5)，需要寻找父节点，同时对A[3],A[4],A[8]做+5，可以发现3+lowbit(3)=4,4+lowbit(4)=8</p>
<p>ask(7)时，需要寻找左上节点，同时对A[7],A[6],A[4]做累加，发现7-lowbit(7)=6,6-lowbit(6)=4</p>
<h1 id="区间更新，单点查询"><a href="#区间更新，单点查询" class="headerlink" title="区间更新，单点查询"></a>区间更新，单点查询</h1><p>用树状数组维护一个差分数组b</p>
<p>【l,r】+d：add(l,d) and add(r+1,-d)</p>
<p>查询a[x]：ans=a[x]+ask[x]</p>
<blockquote>
<p>ask[x]即为a[x]的增量</p>
</blockquote>
<h1 id="区间更新，区间查询"><a href="#区间更新，区间查询" class="headerlink" title="区间更新，区间查询"></a>区间更新，区间查询</h1><p>用2个数状数组维护</p>
<h1 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class FenwickTree:</span><br><span class="line">    def __init__(self,nums):</span><br><span class="line">        self.nums&#x3D;[0]+nums	# 为了下标从1开始</span><br><span class="line">        n&#x3D;len(nums)	# 注意是nums,原数组长度</span><br><span class="line">        for i in range(1,n+1):	# O(n)时间的建立方法</span><br><span class="line">            j&#x3D;i+self.lowbit(i)</span><br><span class="line">            if j&lt;n+1:</span><br><span class="line">                self.nums[j]+&#x3D;self.nums[i]</span><br><span class="line"></span><br><span class="line">    def lowbit(self,i):</span><br><span class="line">        return i&amp;(-i)</span><br><span class="line"></span><br><span class="line">    def update(self,idx,val):</span><br><span class="line">        prev&#x3D;self.query(idx+1)-self.query(idx)	# 原数</span><br><span class="line">        idx+&#x3D;1	# 注意</span><br><span class="line">        change&#x3D;val-prev</span><br><span class="line">        while idx&lt;len(self.nums):</span><br><span class="line">            self.nums[idx]+&#x3D;change</span><br><span class="line">            idx+&#x3D;self.lowbit(idx)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def query(self,idx):</span><br><span class="line">        res&#x3D;0</span><br><span class="line">        while idx&gt;0:</span><br><span class="line">            res+&#x3D;self.nums[idx]</span><br><span class="line">            idx-&#x3D;self.lowbit(idx)</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>

<p>或者这个由<a href="https://leetcode-cn.com/problems/queries-on-a-permutation-with-key/solution/cha-xun-dai-jian-de-pai-lie-by-leetcode-solution/" target="_blank" rel="noopener">力扣官方题解</a>给出的版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class BIT:</span><br><span class="line">    def __init__(self, n):</span><br><span class="line">        self.n &#x3D; n</span><br><span class="line">        self.a &#x3D; [0] * (n + 1)</span><br><span class="line"></span><br><span class="line">    def lowbit(x):</span><br><span class="line">        return x &amp; (-x)</span><br><span class="line"></span><br><span class="line">    def query(self, idx):</span><br><span class="line">        res &#x3D; 0</span><br><span class="line">        while idx &gt; 0:</span><br><span class="line">            res +&#x3D; self.a[idx]</span><br><span class="line">            idx -&#x3D; self.lowbit(idx)</span><br><span class="line">        return res</span><br><span class="line"></span><br><span class="line">    def add(self, idx, delta):</span><br><span class="line">        while idx &lt;&#x3D; self.n:</span><br><span class="line">            self.a[idx] +&#x3D; delta</span><br><span class="line">            idx +&#x3D; self.lowbit(idx)</span><br><span class="line"></span><br><span class="line">    def update(self,idx,val):</span><br><span class="line">        prev&#x3D;self.query(idx+1)-self.query(idx)</span><br><span class="line">        change&#x3D;prev-val</span><br><span class="line">        self.add(idx,change)</span><br></pre></td></tr></table></figure>

<p>以及我这个版本[🐕]</p>
<ol>
<li>本体</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def lowbit(i):</span><br><span class="line">    return i&amp;(-i)</span><br><span class="line"></span><br><span class="line">def query(i):   # 找左上节点,sum(nums[:i])</span><br><span class="line">    res&#x3D;0</span><br><span class="line">    while i&gt;0:</span><br><span class="line">        res+&#x3D;base[i]</span><br><span class="line">        i-&#x3D;lowbit(i)</span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line">def add(i,val):  # 找父节点,nums[i-1]+val</span><br><span class="line">    while i&lt;&#x3D;n:	 # 注意</span><br><span class="line">        base[i]+&#x3D;val</span><br><span class="line">        i+&#x3D;lowbit(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">base&#x3D;[0]*(n+1)</span><br><span class="line">for i in range(n):  # 构造BIT,O(logn)构造时间</span><br><span class="line">    add(i+1,nums[i])</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">for i,v in enumerate(nums):</span><br><span class="line">	add(i+1,v)</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>DLC</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def update(self, index: int, val: int) -&gt; None:	# set nums[i]&#x3D;val</span><br><span class="line">    prev&#x3D;self.query(index+1)-self.query(index)</span><br><span class="line">    change&#x3D;val-prev</span><br><span class="line">    self.add(index+1,change)    # 别忘了idx+1</span><br><span class="line">    </span><br><span class="line">def sumRange(self, left: int, right: int) -&gt; int:</span><br><span class="line">	return self.query(right+1)-self.query(left)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>离散化</p>
<blockquote>
<p>考虑到「树状数组」的底层是数组（线性结构），为了避免开辟多余的「树状数组」空间，需要进行「离散化」；<br>「离散化」的作用是：针对数值的大小做一个排名的「映射」，把原始数据映射到 [1, len] 这个区间，这样「树状数组」底层的数组空间会更紧凑，更易于维护</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 去重方便离散化</span><br><span class="line">s &#x3D; list(set(nums))</span><br><span class="line"></span><br><span class="line"># 借助堆离散化</span><br><span class="line">heapq.heapify(s)</span><br><span class="line">rank_map&#x3D;dict()</span><br><span class="line">rank&#x3D;1</span><br><span class="line">while s:</span><br><span class="line">    rank_map[heapq.pop(s)]&#x3D;rank</span><br><span class="line">    rank+&#x3D;1</span><br></pre></td></tr></table></figure>



<details>
    <summary>树状数组练习题库</summary>
    <a href="https://leetcode-cn.com/tag/binary-indexed-tree/problemset/" target="_blank" rel="noopener">力扣树状数组知识点题库</a>
    <p>
        https://www.luogu.com.cn/problem/P3374
    </p>
    <p>
        https://vjudge.net/problem/POJ-3468
    </p>
</details>


<details>
    <summary>参考文章</summary>
    <p>
       https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self/solution/shu-zhuang-shu-zu-by-liweiwei1419/ 
    </p>
    <p>
        https://www.cnblogs.com/xenny/p/9739600.html
    </p>
</details>





<h1 id="区域和检索-数组不可变"><a href="#区域和检索-数组不可变" class="headerlink" title="区域和检索 - 数组不可变"></a><a href="https://leetcode-cn.com/problems/range-sum-query-immutable/" target="_blank" rel="noopener">区域和检索 - 数组不可变</a></h1><blockquote>
<p>这题可以直接用前缀和做</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class NumArray:</span><br><span class="line"></span><br><span class="line">    def __init__(self, nums: List[int]):</span><br><span class="line">        self.pre&#x3D;[0,*accumulate(nums)]</span><br><span class="line"></span><br><span class="line">    def sumRange(self, left: int, right: int) -&gt; int:</span><br><span class="line">        return self.pre[right+1]-self.pre[left]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Your NumArray object will be instantiated and called as such:</span><br><span class="line"># obj &#x3D; NumArray(nums)</span><br><span class="line"># param_1 &#x3D; obj.sumRange(left,right)</span><br></pre></td></tr></table></figure>





<h1 id="区域和检索-数组可修改"><a href="#区域和检索-数组可修改" class="headerlink" title="区域和检索 - 数组可修改"></a><a href="https://leetcode-cn.com/problems/range-sum-query-mutable/" target="_blank" rel="noopener">区域和检索 - 数组可修改</a></h1><blockquote>
<p>树状数组维护前缀和，直接用前缀和会超时</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class NumArray:</span><br><span class="line"></span><br><span class="line">    def __init__(self, nums: List[int]):</span><br><span class="line">        self.n&#x3D;len(nums)</span><br><span class="line">        self.base&#x3D;[0]*(self.n+1)</span><br><span class="line">        for i in range(self.n):</span><br><span class="line">            self.add(i+1,nums[i])</span><br><span class="line">        </span><br><span class="line">    def update(self, index: int, val: int) -&gt; None:</span><br><span class="line">        prev&#x3D;self.query(index+1)-self.query(index)</span><br><span class="line">        change&#x3D;val-prev</span><br><span class="line">        self.add(index+1,change)    # 别忘了idx+1，考虑题目要求</span><br><span class="line"></span><br><span class="line">    def sumRange(self, left: int, right: int) -&gt; int:</span><br><span class="line">        return self.query(right+1)-self.query(left)</span><br><span class="line"></span><br><span class="line">    def query(self,i):</span><br><span class="line">        res&#x3D;0</span><br><span class="line">        while i&gt;0:</span><br><span class="line">            res+&#x3D;self.base[i]</span><br><span class="line">            i-&#x3D;(i&amp;-i)</span><br><span class="line">        return res</span><br><span class="line">    </span><br><span class="line">    def add(self,i,val):</span><br><span class="line">        while i&lt;&#x3D;self.n:</span><br><span class="line">            self.base[i]+&#x3D;val</span><br><span class="line">            i+&#x3D;(i&amp;-i)</span><br><span class="line"></span><br><span class="line"># Your NumArray object will be instantiated and called as such:</span><br><span class="line"># obj &#x3D; NumArray(nums)</span><br><span class="line"># obj.update(index,val)</span><br><span class="line"># param_2 &#x3D; obj.sumRange(left,right)</span><br></pre></td></tr></table></figure>



<h1 id="面试题-10-10-数字流的秩"><a href="#面试题-10-10-数字流的秩" class="headerlink" title="面试题 10.10. 数字流的秩"></a><a href="https://leetcode-cn.com/problems/rank-from-stream-lcci/" target="_blank" rel="noopener">面试题 10.10. 数字流的秩</a></h1><blockquote>
<p>朴素的想法就是用cnt[x]记录x的个数，x的秩就是sum(cnt[:x])</p>
<p>直接模拟会超时，所以用树状数组维护cnt</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class StreamRank:</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.base&#x3D;[0]*50010</span><br><span class="line">    def track(self, x: int) -&gt; None:</span><br><span class="line">        def add(i,val):</span><br><span class="line">            while i&lt;&#x3D;50010:</span><br><span class="line">                self.base[i]+&#x3D;val</span><br><span class="line">                i+&#x3D;(i&amp;-i)</span><br><span class="line"></span><br><span class="line">        add(x+1,1)</span><br><span class="line"></span><br><span class="line">    def getRankOfNumber(self, x: int) -&gt; int:</span><br><span class="line">        def query(i):</span><br><span class="line">            res&#x3D;0</span><br><span class="line">            while i&gt;0:</span><br><span class="line">                res+&#x3D;self.base[i]</span><br><span class="line">                i-&#x3D;(i&amp;-i)</span><br><span class="line">            return res</span><br><span class="line"></span><br><span class="line">        return query(x+1)</span><br></pre></td></tr></table></figure>





<h1 id="计算右侧小于当前元素的个数"><a href="#计算右侧小于当前元素的个数" class="headerlink" title="计算右侧小于当前元素的个数"></a><a href="https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self/" target="_blank" rel="noopener">计算右侧小于当前元素的个数</a></h1><p>上来就是一个<strong>单调栈</strong>，没有意外直接<strong>WA</strong>了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 错误代码示范</span><br><span class="line">class Solution:</span><br><span class="line">    def countSmaller(self, nums: List[int]) -&gt; List[int]:</span><br><span class="line">        n&#x3D;len(nums)</span><br><span class="line">        res&#x3D;[0]*n</span><br><span class="line">        stack&#x3D;[]</span><br><span class="line">        for i in range(n-1,-1,-1):</span><br><span class="line">            while stack and stack[-1]&gt;&#x3D;nums[i]:</span><br><span class="line">                stack.pop()</span><br><span class="line">            res[i]&#x3D;len(stack)</span><br><span class="line">            stack.append(nums[i])</span><br><span class="line">        </span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>

<p>因为单调栈的性质，只能用来求Next greater element，而非计数</p>
<p>这里应该用<strong>离散化</strong>+<strong>树状数组</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def countSmaller(self, nums: List[int]) -&gt; List[int]:</span><br><span class="line">        n&#x3D;len(nums)</span><br><span class="line">        # 特判</span><br><span class="line">        if n&#x3D;&#x3D; 0:</span><br><span class="line">            return []</span><br><span class="line">        if n &#x3D;&#x3D; 1:</span><br><span class="line">            return [0]</span><br><span class="line"></span><br><span class="line">        base&#x3D;[0]*(n+1)</span><br><span class="line">        def lowbit(i):</span><br><span class="line">            return i&amp;(-i)</span><br><span class="line">        </span><br><span class="line">        def query(i):</span><br><span class="line">            res&#x3D;0</span><br><span class="line">            while i&gt;0:</span><br><span class="line">                res+&#x3D;base[i]</span><br><span class="line">                i-&#x3D;lowbit(i)</span><br><span class="line">            return res</span><br><span class="line">        </span><br><span class="line">        def add(i,val):</span><br><span class="line">            while i&lt;&#x3D;n:</span><br><span class="line">                base[i]+&#x3D;val</span><br><span class="line">                i+&#x3D;lowbit(i)</span><br><span class="line">        </span><br><span class="line">        # 离散化</span><br><span class="line">        s&#x3D;list(set(nums))</span><br><span class="line">        heapq.heapify(s)</span><br><span class="line">        rank_map&#x3D;dict()</span><br><span class="line">        rank&#x3D;1</span><br><span class="line">        while s:</span><br><span class="line">            rank_map[heapq.heappop(s)]&#x3D;rank</span><br><span class="line">            rank+&#x3D;1</span><br><span class="line">        </span><br><span class="line">        # 求解</span><br><span class="line">        res&#x3D;[0]*n</span><br><span class="line">        for i in range(n-1,-1,-1):</span><br><span class="line">            rank&#x3D;rank_map[nums[i]]</span><br><span class="line">            add(rank,1)</span><br><span class="line">            res[i]&#x3D;query(rank-1)</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>



<h1 id="统计作战单位数"><a href="#统计作战单位数" class="headerlink" title="统计作战单位数"></a><a href="https://leetcode-cn.com/problems/count-number-of-teams/" target="_blank" rel="noopener">统计作战单位数</a></h1><blockquote>
<p>3元组问题，枚举中间点</p>
<p>直接枚举的时间复杂度为$O(n^2)$，显然不够好</p>
<p>用树状数组维护，可以达到O(nlogn)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def numTeams(self, rating: List[int]) -&gt; int:</span><br><span class="line">        n &#x3D; len(rating)</span><br><span class="line">        def add(i, val):</span><br><span class="line">            while i &lt;&#x3D; n:</span><br><span class="line">                base[i] +&#x3D; val</span><br><span class="line">                i +&#x3D; (i &amp; -i)</span><br><span class="line">        def query(i):</span><br><span class="line">            res &#x3D; 0</span><br><span class="line">            while i &gt; 0:</span><br><span class="line">                res +&#x3D; base[i]</span><br><span class="line">                i -&#x3D; (i &amp; -i)</span><br><span class="line">            return res</span><br><span class="line"></span><br><span class="line">        # 离散化</span><br><span class="line">        s &#x3D; list(set(rating))</span><br><span class="line">        heapq.heapify(s)</span><br><span class="line">        rank_map &#x3D; dict()</span><br><span class="line">        rank &#x3D; 1</span><br><span class="line">        while s:</span><br><span class="line">            rank_map[heapq.heappop(s)] &#x3D; rank</span><br><span class="line">            rank +&#x3D; 1</span><br><span class="line"></span><br><span class="line">		# 求解</span><br><span class="line">        i_less,i_more &#x3D; [0] * n,[0] * n</span><br><span class="line">        base &#x3D; [0] * (n + 1)</span><br><span class="line">        for i, val in enumerate(rating):</span><br><span class="line">            index &#x3D; rank_map[val]</span><br><span class="line">            i_less[i] &#x3D; query(index)</span><br><span class="line">            i_more[i] &#x3D; i - i_less[i]</span><br><span class="line">            add(index, 1)</span><br><span class="line">            </span><br><span class="line">        k_less,k_more &#x3D; [0] * n,[0] * n</span><br><span class="line">        base &#x3D; [0] * (n + 1)</span><br><span class="line">        for i in range(n - 1, -1, -1):</span><br><span class="line">            index &#x3D; rank_map[rating[i]]</span><br><span class="line">            k_less[i] &#x3D; query(index)</span><br><span class="line">            k_more[i] &#x3D; n - 1 - i - k_less[i]</span><br><span class="line">            add(index, 1)</span><br><span class="line">            </span><br><span class="line">        ans &#x3D; 0</span><br><span class="line">        for i in range(n):</span><br><span class="line">            ans +&#x3D; i_less[i] * k_more[i]</span><br><span class="line">            ans +&#x3D; i_more[i] * k_less[i]</span><br><span class="line">        return ans</span><br></pre></td></tr></table></figure>



<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>树状数组是维护区间的一个工具</p>
<p>你应该先想到一个结果数组，然后再设计树状数组去维护他</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>刷题模板</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/posts/2f57a694/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>​    正则表达式，即 <strong>regular expression</strong>, 也叫regex、RE，是用来简洁表达一组字符串的表达式</p>
<h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><table>
<thead>
<tr>
<th align="left">操作符</th>
<th>说明</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">.</td>
<td>表示任何单个字符（换行符除外）</td>
<td></td>
</tr>
<tr>
<td align="left">[]</td>
<td>字符集，对单个字符给出取值范围</td>
<td>[abc]表示a、b、c，[a‐z]表示a到z单个字符</td>
</tr>
<tr>
<td align="left">[^ ]</td>
<td>非字符集，对单个字符给出排除范围</td>
<td>[^abc]表示非a或b或c的单个字符</td>
</tr>
<tr>
<td align="left">*</td>
<td>前一个字符0次或无限次扩展</td>
<td>abc* 表示 ab、abc、abcc、abccc等</td>
</tr>
<tr>
<td align="left">+</td>
<td>前一个字符1次或无限次扩展</td>
<td>abc+ 表示 abc、abcc、abccc等</td>
</tr>
<tr>
<td align="left">?</td>
<td>前一个字符0次或1次扩展</td>
<td>abc? 表示 ab、abc</td>
</tr>
<tr>
<td align="left">|</td>
<td>左右表达式任意一个</td>
<td>abc</td>
</tr>
<tr>
<td align="left">{m}</td>
<td>扩展前一个字符m次</td>
<td>ab{2}c表示abbc</td>
</tr>
<tr>
<td align="left">{m,n}</td>
<td>扩展前一个字符m至n次（含n）</td>
<td>ab{1,2}c表示abc、abbc</td>
</tr>
<tr>
<td align="left">^</td>
<td>匹配字符串开头</td>
<td>^abc表示abc且在一个字符串的开头</td>
</tr>
<tr>
<td align="left">$</td>
<td>匹配字符串结尾</td>
<td>abc$表示abc且在一个字符串的结尾</td>
</tr>
<tr>
<td align="left">()</td>
<td>分组标记，内部只能使用 | 操作符</td>
<td>(abc)表示abc，(abc</td>
</tr>
<tr>
<td align="left">\d</td>
<td>数字，等价于[0‐9]</td>
<td></td>
</tr>
<tr>
<td align="left">\w</td>
<td>单词字符，等价于[A‐Za‐z0‐9_]</td>
<td></td>
</tr>
</tbody></table>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^[A‐Za‐z]+$					由26个字母组成的字符串</span><br><span class="line">^‐?\d+$						整数形式的字符串</span><br><span class="line">^[0‐9]*[1‐9][0‐9]*$			正整数形式的字符串</span><br><span class="line">[1‐9]\d&#123;5&#125;					中国境内邮政编码，6位</span><br><span class="line">[\u4e00‐\u9fa5]				匹配中文字符</span><br><span class="line">\d&#123;3&#125;‐\d&#123;8&#125;|\d&#123;4&#125;‐\d&#123;7&#125;		国内电话号码，010‐68913536</span><br></pre></td></tr></table></figure>



<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>哔哩哔哩支持用正则表达式来屏蔽弹幕，以下以供几个例子：</p>
<p><code>/.{20,}/</code>    屏蔽字数长度超过20的弹幕</p>
<p><code>/^(第|前)[排零一二两俩三四五六七八九十\d]个?$/</code>    屏蔽类似：第一、第2、前排、前二</p>
<p><code>/^.*(在现场|分钟|小时)$/</code>        屏蔽类似：在现场、5分钟、二小时</p>
<p><strong>无意义的弹幕十分影响观看效果，希望大家能熟练运用正则表达式，来为自己构建一个和谐的弹幕环境QAQ</strong></p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构之堆(heapq)</title>
    <url>/posts/cc0aa428/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>堆，或者说优先队列，是一颗完全二叉树</p>
<p>一般用数组存储，节点<code>i</code>的左、右子节点分别为<code>2*i+1</code>、<code>2*i+2</code></p>
<p>堆分为小根堆和大根堆（python中为小根堆），小根堆的父节点的值小于或等于子节点的值</p>
<h1 id="heapq"><a href="#heapq" class="headerlink" title="heapq"></a>heapq</h1><ol>
<li><p><strong>创建堆</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line">heap=[]</span><br><span class="line">heapq.heapify(heap)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加元素</strong></p>
<p><code>heapq.heappush(heap,num)</code></p>
</li>
<li><p><strong>弹出元素</strong></p>
<blockquote>
<p>弹出堆顶元素，对于python，是最小元素</p>
</blockquote>
<p><code>heapq.heappop(heap)</code></p>
</li>
<li><p><strong>取最值</strong></p>
<blockquote>
<p>取n个最值，返回一个列表</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">heapq.nlargest(<span class="number">2</span>,heap)</span><br><span class="line">heapq.nsmallest(<span class="number">3</span>,heap)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>堆合并</strong></p>
<p><code>heapq.merge(heap1,heap2)</code></p>
</li>
<li><p><strong>压入弹出</strong></p>
<blockquote>
<p>注意分辨两者区别，尤其 num&lt;heap[0] 的时候</p>
<ul>
<li>heapq.pushpop(heap,num)    # 先push num 再pop heap[0]</li>
<li>heapq.replace(heap,num) # 先pop heap[0] 再push num</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">heapq.pushpop(heap,num)	<span class="comment"># 先push再pop</span></span><br><span class="line">heapq.replace(heap,num) <span class="comment"># 先pop再push</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>一些注意点</strong></p>
<ol>
<li>python中的heapq为<strong>小根堆</strong>，heap[0]为<strong>最小</strong>元素（C++中默认大根堆）</li>
<li>python中可以将正整数堆取<strong>相反数</strong>，来达到大根堆的效果</li>
</ol>
</li>
</ol>
<h1 id="数组中的第K个最大元素"><a href="#数组中的第K个最大元素" class="headerlink" title="数组中的第K个最大元素"></a><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/" target="_blank" rel="noopener">数组中的第K个最大元素</a></h1><blockquote>
<p>直接调用堆就行了，虽然用排序也很方便</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findKthLargest</span><span class="params">(self, nums: List[int], k: int)</span> -&gt; int:</span></span><br><span class="line">        heapq.heapify(nums)</span><br><span class="line">        <span class="keyword">return</span> heapq.nlargest(k,nums)[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>



<h1 id="丑数-II"><a href="#丑数-II" class="headerlink" title="丑数 II"></a><a href="https://leetcode-cn.com/problems/ugly-number-ii/" target="_blank" rel="noopener">丑数 II</a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nthUglyNumber</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        heap=[<span class="number">1</span>]</span><br><span class="line">        seen=&#123;<span class="number">1</span>&#125;</span><br><span class="line">        heapq.heapify(heap)</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">            tmp=heappop(heap)</span><br><span class="line">            <span class="keyword">if</span> <span class="number">2</span>*tmp <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">                seen.add(<span class="number">2</span>*tmp)</span><br><span class="line">                heappush(heap,<span class="number">2</span>*tmp)</span><br><span class="line">            <span class="keyword">if</span> <span class="number">3</span>*tmp <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">                seen.add(<span class="number">3</span>*tmp)</span><br><span class="line">                heappush(heap,<span class="number">3</span>*tmp)</span><br><span class="line">            <span class="keyword">if</span> <span class="number">5</span>*tmp <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">                seen.add(<span class="number">5</span>*tmp)</span><br><span class="line">                heappush(heap,<span class="number">5</span>*tmp)</span><br><span class="line">        <span class="keyword">return</span> heappop(heap)</span><br></pre></td></tr></table></figure>



<h1 id="相对名次"><a href="#相对名次" class="headerlink" title="相对名次"></a><a href="https://leetcode-cn.com/problems/relative-ranks/" target="_blank" rel="noopener">相对名次</a></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def findRelativeRanks(self, score: List[int]) -&gt; List[str]:</span><br><span class="line">        n&#x3D;len(score)</span><br><span class="line">        prize&#x3D;[&quot;Gold Medal&quot;, &quot;Silver Medal&quot;, &quot;Bronze Medal&quot;]</span><br><span class="line">        rank&#x3D;&#123;i:(str(i) if i not in (1,2,3) else prize[i-1])  for i in range(1,n+1) &#125;</span><br><span class="line"></span><br><span class="line">        heapify(newscore:&#x3D;deepcopy(score))</span><br><span class="line">        dic&#x3D;&#123;&#125;</span><br><span class="line">        for i in range(1,n+1):</span><br><span class="line">            dic[heappop(newscore)]&#x3D;i</span><br><span class="line">        </span><br><span class="line">        return [rank[n+1-dic[i]] for i in score]	# n+1-dic:因为python是小根堆</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>刷题模板</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>selenium进阶之参数篇</title>
    <url>/posts/8129901/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="进阶技巧"><a href="#进阶技巧" class="headerlink" title="进阶技巧"></a>进阶技巧</h1><ol>
<li><p><strong>设定options与chrome_options</strong></p>
<blockquote>
<p>chromeOptions 是一个配置 chrome 启动时属性的类</p>
<p>位于<code># .\Lib\site-packages\selenium\webdriver\chrome\options.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;<span class="class"><span class="keyword">class</span> <span class="title">Options</span><span class="params">(object)</span>:</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">     <span class="comment"># 设置 chrome 二进制文件位置</span></span><br><span class="line">     self._binary_location = <span class="string">''</span></span><br><span class="line">     <span class="comment"># 添加启动参数</span></span><br><span class="line">     self._arguments = []</span><br><span class="line">     <span class="comment"># 添加扩展应用</span></span><br><span class="line">     self._extension_files = []</span><br><span class="line">     self._extensions = []</span><br><span class="line">     <span class="comment"># 添加实验性质的设置参数</span></span><br><span class="line">     self._experimental_options = &#123;&#125;</span><br><span class="line">     <span class="comment"># 设置调试器地址</span></span><br><span class="line">     self._debugger_address = <span class="literal">None</span></span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 无可视化界面</span></span><br><span class="line">chrome_options=Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--disable-gpu'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 规避检测</span></span><br><span class="line">options=ChromeOptions()</span><br><span class="line">options.add_experimental_option(<span class="string">'excludeSwitches'</span>,[<span class="string">'enable-automation'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 防止自动关闭浏览器</span></span><br><span class="line">options.add_experimental_option(<span class="string">"detach"</span>, <span class="literal">True</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉“正在受到自动化测试软件的控制”</span></span><br><span class="line">optiosn.add_experimental_option(<span class="string">'useAutomationExtension'</span>, <span class="literal">False</span>)	</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置user-agent</span></span><br><span class="line">options.add_argument(<span class="string">'user-agent=xxx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置无用户名密码认证的代理ip</span></span><br><span class="line">options.add_argument(<span class="string">'--proxy-server=http://ip:port'</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止图片加载,提升爬取速度</span></span><br><span class="line">prefs = &#123;<span class="string">"profile.managed_default_content_settings.images"</span>: <span class="number">2</span>&#125;</span><br><span class="line">options.add_experimental_option(<span class="string">"prefs"</span>, prefs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(chrome_options=chrome_options,options=options)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>利用<code>fake_useragent</code></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"> </span><br><span class="line">headers = &#123;</span><br><span class="line">‘User-Agent’: UserAgent().random,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>防止浏览器检测出selenium</strong></p>
<blockquote>
<p>F12，选择Console，输入<code>window.navigator.webdriver</code></p>
<ul>
<li>如果我们是正常打开的浏览器，则应该显示<code>undefined</code>或<code>false</code></li>
<li>而如果是通过selenium打开的浏览器，则会显示<code>true</code></li>
</ul>
<p>这是因为selenium在运行的时候会暴露出一些预定义的<code>Javascript</code>变量（特征字符串），例如<code>window.navigator.webdriver</code>，</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chrome = webdriver.Chrome(chrome_options=option)</span><br><span class="line">chrome.execute_cdp_cmd(<span class="string">"Page.addScriptToEvaluateOnNewDocument"</span>, &#123;</span><br><span class="line">    <span class="string">"source"</span>: <span class="string">"""</span></span><br><span class="line"><span class="string">    Object.defineProperty(navigator, 'webdriver', &#123;</span></span><br><span class="line"><span class="string">      get: () =&gt; undefined</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这段代码帮助selenium将<code>window.navigator.webdriver</code>字段定义成<code>undefined</code></p>
<p>另外也可以通过CDP(cdp命令是chrome支持的一种基于websocket的协议)来修改User-Agent</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chrome.execute_cdp_cmd(<span class="string">'Network.setUserAgentOverride'</span>, &#123;</span><br><span class="line">        <span class="string">"userAgent"</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36'</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>更多避免检测方法详见：<a href="https://stackoverflow.com/questions/33225947/can-a-website-detect-when-you-are-using-selenium-with-chromedriver" target="_blank" rel="noopener">https://stackoverflow.com/questions/33225947/can-a-website-detect-when-you-are-using-selenium-with-chromedriver</a></p>
</li>
<li><p><strong>未完待续…</strong></p>
</li>
</ol>
<p>本教程仅供<strong>学习</strong>，若被他人用于<strong>其他</strong>用途，<strong>与本人无关</strong></p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>selenium</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>selenium入门（二战CSDN）</title>
    <url>/posts/aa2659da/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="认识selenium"><a href="#认识selenium" class="headerlink" title="认识selenium"></a><strong>认识selenium</strong></h1><blockquote>
<p>selenium是一个web的自动化测试工具，selenium测试直接运行在浏览器中，就像真正的用户在操作一样。selenium主要测试你的应用程序是否能够很好地在不同浏览器和操作系统上工作。它的优点如下：免费；小巧，对于不同的语言它只是一个包；支持C,Python,java,C#多种语言的测试脚本；支持多平台：windows,linux，Mac,支持多浏览器：ie,chrome,firefox,safari；支持分布式测试用例的执行，可以把测试用例分布到不同的测试机器上执行。</p>
</blockquote>
<h1 id="用selenium玩转csdn"><a href="#用selenium玩转csdn" class="headerlink" title="用selenium玩转csdn"></a>用selenium玩转csdn</h1><blockquote>
<p>俗话说，实践是检验真理的唯一标准</p>
<p>为了能更好地为大家展示selenium的功能与特点，因此我将结合CSDN的爬取实战来为大家讲解</p>
</blockquote>
<ol>
<li><p><strong>打开网页</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">option &#x3D; webdriver.ChromeOptions()</span><br><span class="line">option.add_experimental_option(&quot;detach&quot;, True)  # 防止自动关闭浏览器</span><br><span class="line">browser &#x3D; webdriver.Chrome(options&#x3D;option)</span><br><span class="line"></span><br><span class="line">browser.get(&#39;https:&#x2F;&#x2F;www.csdn.net&#x2F;&#39;)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>模拟输入</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.8/0827-1.jpg" alt="0827-1"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input &#x3D; browser.find_element_by_id(&#39;toolbar-search-input&#39;)</span><br><span class="line">input.send_keys(keys)</span><br><span class="line">sleep(1)    # 等待输入完毕</span><br><span class="line">input.send_keys(Keys.ENTER)	# 输入回车</span><br><span class="line">browser.switch_to.window(browser.window_handles[1]) # 跳页</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>模拟点击“用户”标签</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.8/0827-2.jpg" alt="0827-2"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">li &#x3D; browser.find_element_by_xpath(&#39;&#x2F;&#x2F;div[@class&#x3D;&quot;s-nav-lt&quot;]&#x2F;ul&#x2F;li[5]&#39;)</span><br><span class="line">li.click()</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>页面控制</strong></p>
<blockquote>
<ul>
<li><code>browser.close()</code>：关闭当前窗口，若当前窗口为唯一窗口，则退出</li>
<li><code>browser.quit()</code>：关闭所有窗口并退出</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 实现关调页面0</span><br><span class="line">browser.switch_to.window(browser.window_handles[0])  # 先跳转到页面0</span><br><span class="line">browser.close()										 # 关闭当前页面</span><br><span class="line">browser.switch_to.window(browser.window_handles[0])  # 相当于回到新打开的页面(原页面1)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取用户名与头像</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.8/0827-3.jpg" alt="0827-3"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">img &#x3D; browser.find_element_by_xpath(&#39;&#x2F;&#x2F;div[@class&#x3D;&quot;item-hd&quot;]&#x2F;img&#39;).get_attribute(&#39;src&#39;)</span><br><span class="line"></span><br><span class="line">href&#x3D;browser.find_element_by_xpath(&#39;&#x2F;&#x2F;div[@class&#x3D;&quot;so-items-user&quot;]&#x2F;a&#39;).get_attribute(&#39;href&#39;)</span><br><span class="line"></span><br><span class="line">print(img,href,end&#x3D;&#39;\n&#39;)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>回顾</strong></p>
<blockquote>
<p>在之前的一系列操作中，我们模拟</p>
<ul>
<li>打开了CSDN主页面</li>
<li>输入了搜索内容</li>
<li>点击了用户标签</li>
<li>获取到了该页面下的用户头像与用户名称</li>
</ul>
</blockquote>
</li>
</ol>
<h1 id="结语与robots协议"><a href="#结语与robots协议" class="headerlink" title="结语与robots协议"></a><strong>结语与robots协议</strong></h1><blockquote>
<ul>
<li><p>不知道大家在爬取之前，是否注意到CSDN遵循了robots协议（没有关注过的可以点击这个网址:<a href="https://www.csdn.net/robots.txt" target="_blank" rel="noopener">https://www.csdn.net/robots.txt</a>)</p>
</li>
<li><p>为了不给网站的管理员带来麻烦，希望大家在爬取的时候能尽量遵循robots协议；若在学习过程中在不可避免地无法遵循robots协议，也尽量维持爬虫爬取频率与人类正常访问频率相当，不过多占用服务器资源</p>
</li>
<li><p>另外也希望大家能够多多支持大可，有什么问题都可以提交，我也会及时为大家解决。最后也欢迎大家光临我的小站 <a href="https://cheungducknew.github.io/" target="_blank" rel="noopener">https://cheungducknew.github.io/</a></p>
</li>
</ul>
</blockquote>
<p>本教程仅供<strong>学习</strong>，若被他人用于<strong>其他</strong>用途，<strong>与本人无关</strong></p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>selenium</tag>
        <tag>爬虫</tag>
        <tag>CSDN</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Keras进行LSTM实战</title>
    <url>/posts/b1460c4c/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="使用Keras进行LSTM实战"><a href="#使用Keras进行LSTM实战" class="headerlink" title="使用Keras进行LSTM实战"></a>使用Keras进行LSTM实战</h1><ol>
<li><p><strong>安装依赖</strong></p>
<blockquote>
<p>本项目采用Anaconda构建虚拟环境，配置如下:</p>
<ul>
<li>python 3.6(64 bit)</li>
<li>tensorflow 2.5.0</li>
<li>keras 2.5.0</li>
</ul>
<p>注意版本一定不能互相冲突，详情查看:<a href="https://docs.floydhub.com/guides/environments/" target="_blank" rel="noopener">https://docs.floydhub.com/guides/environments/</a></p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0906-1.png" alt="0906-1"></p>
</li>
<li><p><strong>实战模板</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> concatenate</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> read_csv</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> concat</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential,load_model</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> LSTM</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filename=<span class="string">'data.csv'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># convert series to supervised learning</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">series_to_supervised</span><span class="params">(data, n_in=<span class="number">1</span>, n_out=<span class="number">1</span>, dropnan=True)</span>:</span></span><br><span class="line">    n_vars = <span class="number">1</span> <span class="keyword">if</span> type(data) <span class="keyword">is</span> list <span class="keyword">else</span> data.shape[<span class="number">1</span>]</span><br><span class="line">    df = DataFrame(data)  <span class="comment">####Define a table.</span></span><br><span class="line">    cols, names = list(), list()  <span class="comment">#### Define two List.</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n_in, <span class="number">0</span>, <span class="number">-1</span>):  <span class="comment">####This is a loop which is carried out from n_in to 0.</span></span><br><span class="line">        cols.append(df.shift(i))  <span class="comment">##### Carry out a translation on df, and append members of to cols.</span></span><br><span class="line">        names += [(<span class="string">'var%d(t-%d)'</span> % (j + <span class="number">1</span>, i)) <span class="keyword">for</span> j <span class="keyword">in</span> range(n_vars)]</span><br><span class="line">    <span class="comment"># forecast sequence (t, t+1, ... t+n)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n_out):  <span class="comment">#### T</span></span><br><span class="line">        cols.append(df.shift(-i))</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            names += [(<span class="string">'var%d(t)'</span> % (j + <span class="number">1</span>)) <span class="keyword">for</span> j <span class="keyword">in</span> range(n_vars)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            names += [(<span class="string">'var%d(t+%d)'</span> % (j + <span class="number">1</span>, i)) <span class="keyword">for</span> j <span class="keyword">in</span> range(n_vars)]</span><br><span class="line">    <span class="comment"># put it all together</span></span><br><span class="line">    agg = concat(cols, axis=<span class="number">1</span>)</span><br><span class="line">    agg.columns = names</span><br><span class="line">    <span class="comment"># drop rows with NaN values</span></span><br><span class="line">    <span class="keyword">if</span> dropnan:</span><br><span class="line">        agg.dropna(inplace=<span class="literal">True</span>)  <span class="comment">###delete all NULL records.</span></span><br><span class="line">    <span class="keyword">return</span> agg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># load dataset</span></span><br><span class="line">dataset = read_csv(filename, header=<span class="number">0</span>, index_col=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">values = dataset.values</span><br><span class="line"><span class="comment"># ensure all data is float</span></span><br><span class="line">values = values.astype(<span class="string">'float32'</span>)</span><br><span class="line"><span class="comment"># normalize features</span></span><br><span class="line">scaler = MinMaxScaler(feature_range=(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">scaled = scaler.fit_transform(values)</span><br><span class="line"><span class="comment"># frame as supervised learning</span></span><br><span class="line">reframed = series_to_supervised(scaled, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义参数</span></span><br><span class="line">n_hours = <span class="number">1</span></span><br><span class="line">n_features = <span class="number">50</span></span><br><span class="line">SeperatePoint=<span class="number">504</span></span><br><span class="line">TheIntervalOfSample=<span class="number">10</span></span><br><span class="line">TheDimensionOfInputVector=<span class="number">50</span></span><br><span class="line">TheDimensionOfOutputVector=<span class="number">1</span></span><br><span class="line">ThePositionOfActivePower=<span class="number">23</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># split into train and test sets</span></span><br><span class="line">values = reframed.values</span><br><span class="line">n_train_hours = SeperatePoint * <span class="number">24</span> * (<span class="number">60</span>//TheIntervalOfSample)</span><br><span class="line">train = values[:n_train_hours, :]</span><br><span class="line">test = values[n_train_hours:, :]</span><br><span class="line">n_obs = n_hours * n_features</span><br><span class="line"><span class="comment"># split into input and outputs</span></span><br><span class="line">train_X, train_y = train[:, :n_obs], train[:,<span class="number">-1</span>*(TheDimensionOfInputVector-ThePositionOfActivePower)]</span><br><span class="line">test_X, test_y = test[:, :n_obs], test[:, <span class="number">-1</span>*(TheDimensionOfInputVector-ThePositionOfActivePower)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># reshape input to be 3D [samples, timesteps, features]</span></span><br><span class="line">train_X = train_X.reshape((train_X.shape[<span class="number">0</span>], n_hours, n_features))</span><br><span class="line">test_X = test_X.reshape((test_X.shape[<span class="number">0</span>], n_hours, n_features))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># design network</span></span><br><span class="line">model = Sequential()</span><br><span class="line">model.add(LSTM(TheDimensionOfInputVector, input_shape=(train_X.shape[<span class="number">1</span>], train_X.shape[<span class="number">2</span>]),return_sequences=<span class="literal">True</span>))</span><br><span class="line">model.add(LSTM(TheDimensionOfInputVector,return_sequences=<span class="literal">False</span>))</span><br><span class="line">model.add(Dense(TheDimensionOfOutputVector,activation=<span class="string">'tanh'</span>))</span><br><span class="line">model.compile(loss=<span class="string">'mae'</span>, optimizer=<span class="string">'adam'</span>, metrics=[<span class="string">'mse'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># fit network</span></span><br><span class="line">history = model.fit(train_X, train_y, epochs=<span class="number">271</span>, batch_size=train_X.shape[<span class="number">0</span>], validation_data=(test_X, test_y), verbose=<span class="number">1</span>, shuffle=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># plot history</span></span><br><span class="line">pyplot.plot(history.history[<span class="string">'loss'</span>], label=<span class="string">'train'</span>)</span><br><span class="line">pyplot.plot(history.history[<span class="string">'val_loss'</span>], label=<span class="string">'test'</span>)</span><br><span class="line">pyplot.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># make a prediction</span></span><br><span class="line">yhat = model.predict(test_X,verbose=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test_X = test_X.reshape((test_X.shape[<span class="number">0</span>], n_hours*n_features))</span><br><span class="line"><span class="comment"># invert scaling for forecast</span></span><br><span class="line">inv_yhat = concatenate((test_X[:, :ThePositionOfActivePower], yhat), axis=<span class="number">1</span>)</span><br><span class="line">inv_yhat = concatenate((inv_yhat, test_X[:, <span class="number">-1</span>*(TheDimensionOfInputVector-ThePositionOfActivePower<span class="number">-1</span>):]), axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># invert scaling for actual</span></span><br><span class="line">test_y = test_y.reshape((len(test_y), <span class="number">1</span>))</span><br><span class="line">inv_y = concatenate((test_X[:, :ThePositionOfActivePower], test_y), axis=<span class="number">1</span>)</span><br><span class="line">inv_y = concatenate((inv_y, test_X[:, <span class="number">-1</span>*(TheDimensionOfInputVector-ThePositionOfActivePower<span class="number">-1</span>):]), axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># calculate RMSE</span></span><br><span class="line">rmse = sqrt(mean_squared_error(inv_y, inv_yhat))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(dataset)</span><br><span class="line">print(<span class="string">'Test RMSE: %.3f'</span> % rmse)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>保存/加载模型</strong></p>
<ol>
<li><pre><code># 确保已经安装h5py库

model.save(&apos;Model.h5&apos;)
model = load_model(&apos;Model.h5&apos;)
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2.</span><br></pre></td></tr></table></figure>
import pickle

with open(Model.pickle&apos;,&apos;wb&apos;) as f
    pickle.dump(model,f)

with open(Model.pickle&apos;,&apos;wb&apos;) as f
    pickle.load(model,f)
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3.</span><br></pre></td></tr></table></figure>
import joblib

# value=模型名
joblib.dump(filename=&apos;LR.model&apos;,value=lr)
model = joblib.load(filename=&quot;LR.model&quot;)</code></pre></li>
</ol>
</li>
</ol>
<h1 id="待学习的demo"><a href="#待学习的demo" class="headerlink" title="待学习的demo"></a>待学习的demo</h1><blockquote>
<ul>
<li><a href="https://zybuluo.com/hanbingtao/note/581764" target="_blank" rel="noopener">https://zybuluo.com/hanbingtao/note/581764</a></li>
<li><a href="https://machinelearningmastery.com/multi-step-time-series-forecasting-long-short-term-memory-networks-python/" target="_blank" rel="noopener">https://machinelearningmastery.com/multi-step-time-series-forecasting-long-short-term-memory-networks-python/</a></li>
<li><a href="https://machinelearningmastery.com/5-step-life-cycle-long-short-term-memory-models-keras/" target="_blank" rel="noopener">https://machinelearningmastery.com/5-step-life-cycle-long-short-term-memory-models-keras/</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Xpath详解</title>
    <url>/posts/ede08e0f/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>xpath，即XML Path Language</strong></p>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><table>
<thead>
<tr>
<th>表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>nodename</td>
<td>选取此节点的所有子节点。</td>
</tr>
<tr>
<td>/</td>
<td>从根节点选取。</td>
</tr>
<tr>
<td>//</td>
<td>从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td>
</tr>
<tr>
<td>.</td>
<td>选取当前节点。</td>
</tr>
<tr>
<td>..</td>
<td>选取当前节点的父节点。</td>
</tr>
<tr>
<td>@</td>
<td>选取属性。</td>
</tr>
<tr>
<td>*</td>
<td>匹配任何元素节点。</td>
</tr>
<tr>
<td>@*</td>
<td>匹配任何属性节点。</td>
</tr>
<tr>
<td>node()</td>
<td>匹配任何类型的节点。</td>
</tr>
<tr>
<td>/title[@lang]</td>
<td>选取所有拥有名为 lang 的属性的 title 元素。</td>
</tr>
<tr>
<td>//title[@lang=’eng’]</td>
<td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>轴名称</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>attribute</td>
<td>选取当前节点的所有属性</td>
</tr>
<tr>
<td>child</td>
<td>选取当前节点的所有子元素</td>
</tr>
<tr>
<td>descendant</td>
<td>选取当前节点的所有后代元素（子、孙等）</td>
</tr>
<tr>
<td>parent</td>
<td>选取当前节点的父节点</td>
</tr>
<tr>
<td>ancestor</td>
<td>选取当前节点的所有先辈（父、祖父等）</td>
</tr>
<tr>
<td>self</td>
<td>选取当前节点</td>
</tr>
</tbody></table>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from lxml import etree</span><br><span class="line"></span><br><span class="line">texts&#x3D;&quot;&quot;&quot;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">	&lt;title&gt;xpath test&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;p&gt;计算机科学与技术&lt;&#x2F;p&gt;</span><br><span class="line">	&lt;&#x2F;div&gt;</span><br><span class="line">	&lt;div class&#x3D;&quot;algorithm&quot;&gt;</span><br><span class="line">		&lt;p&gt;快速排序&lt;&#x2F;p&gt;</span><br><span class="line">		&lt;p&gt;二分查找&lt;&#x2F;p&gt;</span><br><span class="line">		&lt;p&gt;前缀和&lt;&#x2F;p&gt;</span><br><span class="line">		&lt;p&gt;并查集&lt;&#x2F;p&gt;</span><br><span class="line">		&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.algorithm.com&#x2F;&quot; title&#x3D;&quot;算法&quot; target&#x3D;&quot;_self&quot;&gt;</span><br><span class="line">			&lt;span&gt;this is span&lt;&#x2F;span&gt;</span><br><span class="line">		如果你的区间dp时间复杂度很高，python降维打击高精度题&lt;&#x2F;a&gt;</span><br><span class="line">		&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&#x2F;go.jpg&quot; alt&#x3D;&quot;&quot; &#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;div&gt;</span><br><span class="line">	&lt;div class&#x3D;&quot;data&quot;&gt;</span><br><span class="line">		&lt;ul&gt;</span><br><span class="line">			&lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot; title&#x3D;&quot;qing&quot;&gt;有一个人前来买瓜&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">			&lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.163.com&quot; title&#x3D;&quot;qin&quot;&gt;生异形吗你们哥，哥俩&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">			&lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.126.com&quot; alt&#x3D;&quot;qi&quot;&gt;刘华强：哥们儿，这瓜多少钱一斤呐&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">			&lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.sina.com&quot; class&#x3D;&quot;du&quot;&gt;瓜摊老板：两块钱一斤&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">			&lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.dudu.com&quot; class&#x3D;&quot;du&quot;&gt;刘华强：What’s up，这瓜皮子是金子做的还是瓜这粒子是金子做的牧&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">			&lt;li&gt;&lt;b&gt;瓜摊老板：你瞧瞧现在哪有瓜呀，这都是大棚的瓜，你嫌贵我还嫌贵呢&lt;&#x2F;b&gt;&lt;&#x2F;li&gt;</span><br><span class="line">			&lt;li&gt;&lt;i&gt;刘华强：这瓜保熟吗&lt;&#x2F;i&gt;&lt;&#x2F;li&gt;</span><br><span class="line">			&lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.haha.com&quot; id&#x3D;&quot;feng&quot;&gt;瓜摊老板：我开水果摊的，能卖给你生瓜蛋子&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">		&lt;&#x2F;ul&gt;</span><br><span class="line">	&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">tree&#x3D;etree.HTML(texts)</span><br><span class="line"></span><br><span class="line">r1&#x3D;tree.xpath(&#39;&#x2F;html&#x2F;body&#x2F;div&#39;)	#直接从上往下挨着找节点</span><br><span class="line">r2&#x3D;tree.xpath(&#39;&#x2F;html&#x2F;&#x2F;div&#39;)#跳跃了一个节点来找到这个div节点的对象</span><br><span class="line">r3&#x3D;tree.xpath(&#39;&#x2F;&#x2F;div&#39;)##跳跃上面所有节点来寻找div节点的对象</span><br><span class="line"># print(r1,r2,r3)   # the same</span><br><span class="line"></span><br><span class="line">r4&#x3D;tree.xpath(&#39;&#x2F;&#x2F;div[@class&#x3D;&quot;algorithm&quot;]&#39;)</span><br><span class="line"># print(r4)</span><br><span class="line"></span><br><span class="line">r5&#x3D;tree.xpath(&#39;&#x2F;&#x2F;div[@class&#x3D;&quot;algorithm&quot;]&#x2F;p&#39;)</span><br><span class="line"># print(r5) #返回了所有的p标签</span><br><span class="line"></span><br><span class="line">r6&#x3D;tree.xpath(&#39;&#x2F;&#x2F;div[@class&#x3D;&quot;algorithm&quot;]&#x2F;p[3]&#39;)  #注意索引是从1开始的</span><br><span class="line"></span><br><span class="line">r7&#x3D;tree.xpath(&#39;&#x2F;&#x2F;div[@class&#x3D;&quot;data&quot;]&#x2F;&#x2F;li[5]&#x2F;a&#x2F;text()&#39;)   #取文本</span><br><span class="line"># print(r7)</span><br><span class="line"></span><br><span class="line">r8&#x3D;tree.xpath(&#39;&#x2F;&#x2F;li&#x2F;&#x2F;text()&#39;)</span><br><span class="line"></span><br><span class="line">r9&#x3D;tree.xpath(&#39;&#x2F;&#x2F;div[@class&#x3D;&quot;algorithm&quot;]&#x2F;img&#x2F;@src&#39;)  # @取属性</span><br><span class="line"># print(r9)</span><br><span class="line"></span><br><span class="line">print(r1,r2,r3,r4,r5,r6,r7,r8,r9,end&#x3D;&#39;\n&#39;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>xml</tag>
        <tag>xpath</tag>
      </tags>
  </entry>
  <entry>
    <title>30s入门keras</title>
    <url>/posts/e9e6cec8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="速查手册"><a href="#速查手册" class="headerlink" title="速查手册"></a>速查手册</h1><p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.10/Keras.jpg" alt="keras"></p>
<h1 id="30s理解基本概念"><a href="#30s理解基本概念" class="headerlink" title="30s理解基本概念"></a>30s理解基本概念</h1><h2 id="符号计算"><a href="#符号计算" class="headerlink" title="符号计算"></a>符号计算</h2><blockquote>
<p>Keras的底层库使用Theano或TensorFlow，这两个库也称为Keras的后端。无论是Theano还 是TensorFlow，都是一个“符号主义”的库。</p>
</blockquote>
<blockquote>
<p>符号主义的计算首先定义各种 变量，然后建立一个“计算图”，计算图规定了各个变量之间的计算关系。建立好的计算图需要编译已确 定其内部细节，然而，此时的计算图还是一个“空壳子”，里面没有任何实际的数据，只有当你把需要运 算的输入放进去后，才能在整个模型中形成数据流，从而形成输出值。 </p>
<p>Keras的模型搭建形式就是这种方法，在你搭建Keras模型完毕后，你的模型就是一个空壳子，只有实 际生成可调用的函数后（K.function），输入数据，才会形成真正的数据流。 </p>
</blockquote>
<h2 id="张量tensor"><a href="#张量tensor" class="headerlink" title="张量tensor"></a>张量tensor</h2><blockquote>
<p>张量可以看作是向量、矩阵的自然推广</p>
</blockquote>
<blockquote>
<ul>
<li><p>规模最小的张量是0阶张量，即标量，也就是一个数。 </p>
</li>
<li><p>当我们把一些数有序的排列起来，就形成了1阶张量，也就是一个向量 </p>
</li>
<li><p>如果我们继续把一组向量有序的排列起来，就形成了2阶张量，也就是一个矩阵 </p>
</li>
<li><p>把矩阵摞起来，就是3阶张量，我们可以称为一个立方体，具有3个颜色通道的彩色图片就是一个这样 的立方体</p>
</li>
</ul>
</blockquote>
<h2 id="‘th’与’tf’"><a href="#‘th’与’tf’" class="headerlink" title="‘th’与’tf’"></a>‘th’与’tf’</h2><blockquote>
<p>‘th’模式，即Theano模式</p>
<p>‘tf’模式，即TensorFlow模式</p>
<p>这两种模式在如何表示一组彩色图片的问题上发生了分歧</p>
</blockquote>
<p>Keras默认的数据组织可通过K.image_dim_ordering()函数返回，请在网络的训练和测试中保持维度顺序一 致</p>
<h2 id="batch"><a href="#batch" class="headerlink" title="batch"></a>batch</h2><blockquote>
<p>深度学习的优化算法一般为梯度下降，每次的参数更新有两种方式</p>
<ul>
<li>批梯度下降(Batch gradient descent)，遍历全部数据集算一次损失函数，然后算函数对各个参数的梯度，更新梯度，计算开销过大</li>
<li>随机梯度下降(stochastic gradient descent)，每看一个数据就算一下损失函数，然后求梯度更新参数，收敛性能不好</li>
<li>小批的梯度 下降(mini-batch gradient decent)采取折中的方法，把数据分为若干个批，按批来更新参数，一个批中的一组数据共同决定了本次梯度的方向</li>
</ul>
</blockquote>
<h1 id="30s入门keras"><a href="#30s入门keras" class="headerlink" title="30s入门keras"></a>30s入门keras</h1><h2 id="Sequential模型"><a href="#Sequential模型" class="headerlink" title="Sequential模型"></a>Sequential模型</h2><p>Keras的核心数据结构是“模型”，Keras中主要的模型是Sequential。</p>
<p>Sequential 是多个网络层的线性堆叠。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from keras.models import Sequential</span><br><span class="line"></span><br><span class="line">model &#x3D; Sequential()</span><br></pre></td></tr></table></figure>



<h2 id="堆叠网络层"><a href="#堆叠网络层" class="headerlink" title="堆叠网络层"></a>堆叠网络层</h2><p>将一些网络层通过<code>.add()</code>堆叠起来，就构成了一个模型：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from keras.layers import Dense, Activation</span><br><span class="line"></span><br><span class="line">model.add(Dense(output_dim&#x3D;64, input_dim&#x3D;100))</span><br><span class="line">model.add(Activation(&quot;relu&quot;))</span><br><span class="line">model.add(Dense(output_dim&#x3D;10))</span><br><span class="line">model.add(Activation(&quot;softmax&quot;))</span><br></pre></td></tr></table></figure>

<p>也可通过向 Sequential 模型传递一个layer的list来构造该模型：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from keras.models import Sequential</span><br><span class="line"></span><br><span class="line">model &#x3D; Sequential([</span><br><span class="line">Dense(64, input_dim&#x3D;100),</span><br><span class="line">Activation(&#39;relu&#39;),</span><br><span class="line">Dense(10),</span><br><span class="line">Activation(&#39;softmax&#39;),</span><br><span class="line">])</span><br></pre></td></tr></table></figure>



<h2 id="编译模型"><a href="#编译模型" class="headerlink" title="编译模型"></a>编译模型</h2><p>编译模型时必须指明损失函数<code>loss</code>和优化器<code>optimizer</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">model.compile(loss&#x3D;&#39;categorical_crossentropy&#39;, optimizer&#x3D;&#39;sgd&#39;, metrics&#x3D;[&#39;accuracy&#39;])</span><br></pre></td></tr></table></figure>

<p>也可<strong>定制模型</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from keras.optimizers import SGD</span><br><span class="line"></span><br><span class="line">model.compile(loss&#x3D;&#39;categorical_crossentropy&#39;, optimizer&#x3D;SGD(lr&#x3D;0.01, momentum&#x3D;0.9, nesterov&#x3D;True))</span><br></pre></td></tr></table></figure>



<h2 id="迭代训练"><a href="#迭代训练" class="headerlink" title="迭代训练"></a>迭代训练</h2><blockquote>
<p>batch_size即为mini-batch中的每批中的数据量</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">model.fit(X_train, Y_train, nb_epoch&#x3D;5, batch_size&#x3D;32)</span><br></pre></td></tr></table></figure>



<h2 id="评估模型"><a href="#评估模型" class="headerlink" title="评估模型"></a>评估模型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">loss_and_metrics &#x3D; model.evaluate(X_test, Y_test, batch_size&#x3D;32)</span><br></pre></td></tr></table></figure>



<h2 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classes &#x3D; model.predict_classes(X_test, batch_size&#x3D;32)</span><br><span class="line">proba &#x3D; model.predict_proba(X_test, batch_size&#x3D;32)</span><br></pre></td></tr></table></figure>





<h1 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h1><h2 id="指定输入shape"><a href="#指定输入shape" class="headerlink" title="指定输入shape"></a>指定输入shape</h2><p>下面的三个指定输入数据shape的方法是严格等价的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">model.add(Dense(32, input_shape&#x3D;(784,)))</span><br><span class="line">model.add(Dense(32, batch_input_shape&#x3D;(None, 784)))</span><br><span class="line">model.add(Dense(32, input_dim&#x3D;784))</span><br></pre></td></tr></table></figure>

<p>同理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">model.add(LSTM(32, input_shape&#x3D;(10, 64)))</span><br><span class="line">model.add(LSTM(32, batch_input_shape&#x3D;(None, 10, 64)))</span><br><span class="line">model.add(LSTM(32, input_length&#x3D;10, input_dim&#x3D;64))</span><br></pre></td></tr></table></figure>

<h2 id="Merge层"><a href="#Merge层" class="headerlink" title="Merge层"></a>Merge层</h2><blockquote>
<p>多个 Sequential 可经由一个Merge层合并到一个输出。Merge层的输出是一个可以被添加到新 Sequential 的层对象</p>
</blockquote>
<blockquote>
<p>Merge层支持一些预定义的合并模式，包括：</p>
<ul>
<li>sum (defualt):逐元素相加 concat :张量串联，可以通过提供 </li>
<li>concat_axis 的关键字参数指定按照哪个轴进行串联 </li>
<li>mul ：逐元素相乘 </li>
<li>ave ：张量平均 </li>
<li>dot ：张量相乘，可以通过 dot_axis 关键字参数来指定要消去的轴 </li>
<li>cos ：计算2D张量（即矩阵）中各个向量的余弦距离</li>
<li>提供关键字参数 mode:<code>mode=lambda x: x[0] - x[1]</code></li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from keras.layers import Merge</span><br><span class="line">left_branch &#x3D; Sequential()</span><br><span class="line">left_branch.add(Dense(32, input_dim&#x3D;784))</span><br><span class="line">right_branch &#x3D; Sequential()</span><br><span class="line">right_branch.add(Dense(32, input_dim&#x3D;784))</span><br><span class="line">merged &#x3D; Merge([left_branch, right_branch], mode&#x3D;&#39;concat&#39;)</span><br><span class="line">final_model &#x3D; Sequential()</span><br><span class="line">final_model.add(merged)</span><br><span class="line">final_model.add(Dense(10, activation&#x3D;&#39;softmax&#39;))</span><br></pre></td></tr></table></figure>

<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><blockquote>
<ul>
<li>优化器optimizer：该参数可指定为已预定义的优化器名，如 rmsprop 、 adagrad ，或一 个 Optimizer 类的对象</li>
<li>损失函数loss：该参数为模型试图最小化的目标函数，它可为预定义的损失函数名， 如 categorical_crossentropy 、 mse ，也可以为一个损失函数</li>
<li>指标列表metrics：对分类问题，我们一般将该列表设置为 metrics=[‘accuracy’] 。指标可以是一个预 定义指标的名字,也可以是一个用户定制的函数.指标函数应该返回单个张量,或一个完成 metric_name  - &gt; metric_value 映射的字典</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">model.compile(optimizer&#x3D;&#39;rmsprop&#39;,</span><br><span class="line">loss&#x3D;&#39;mse&#39;)</span><br></pre></td></tr></table></figure>



<h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><blockquote>
<p>Keras以Numpy数组作为输入数据和标签的数据类型</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># generate dummy data</span><br><span class="line">import numpy as np</span><br><span class="line">data &#x3D; np.random.random((1000, 784))</span><br><span class="line">labels &#x3D; np.random.randint(2, size&#x3D;(1000, 1))</span><br><span class="line"></span><br><span class="line"># train the model, iterating on the data in batches</span><br><span class="line"># of 32 samples</span><br><span class="line">model.fit(data, labels, nb_epoch&#x3D;10, batch_size&#x3D;32)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># generate dummy data</span><br><span class="line">import numpy as np</span><br><span class="line">from keras.utils.np_utils import to_categorical</span><br><span class="line">data_1 &#x3D; np.random.random((1000, 784))</span><br><span class="line">data_2 &#x3D; np.random.random((1000, 784))</span><br><span class="line"></span><br><span class="line"># these are integers between 0 and 9</span><br><span class="line">labels &#x3D; np.random.randint(10, size&#x3D;(1000, 1))</span><br><span class="line"></span><br><span class="line"># we convert the labels to a binary matrix of size (1000, 10)</span><br><span class="line"># for use with categorical_crossentropy</span><br><span class="line">labels &#x3D; to_categorical(labels, 10)</span><br><span class="line"></span><br><span class="line"># train the model</span><br><span class="line"># note that we are passing a list of Numpy arrays as training data</span><br><span class="line"># since the model has 2 inputs</span><br><span class="line">model.fit([data_1, data_2], labels, nb_epoch&#x3D;10, batch_size&#x3D;32)</span><br></pre></td></tr></table></figure>



<h2 id="查看模型"><a href="#查看模型" class="headerlink" title="查看模型"></a>查看模型</h2><ul>
<li><code>model.summary()</code>：打印出模型概况</li>
<li><code>model.get_config()</code>:返回包含模型配置信息的Python字典</li>
<li><code>model.get_weights()</code>：返回模型权重张量的列表</li>
</ul>
<h2 id="保存模型"><a href="#保存模型" class="headerlink" title="保存模型"></a>保存模型</h2><p>不推荐使用pickle来保存Keras模型！</p>
<p>可以<strong>利用h5py库</strong>，将Keras模型和权重保存在一个HDF5文件中</p>
<blockquote>
<p>该文件将包含： </p>
<ul>
<li>模型的结构，以便重构该模型 </li>
<li>模型的权重 </li>
<li>训练配置（损失函数，优化器等） </li>
<li>优化器的状态，以便于从上次训练中断的地方开始</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from keras.models import load_model</span><br><span class="line">model.save(&#39;my_model.h5&#39;) # creates a HDF5 file &#39;my_model.h5&#39;</span><br><span class="line">del model # deletes the existing model</span><br><span class="line"></span><br><span class="line"># returns a compiled model</span><br><span class="line"># identical to the previous one</span><br><span class="line">model &#x3D; load_model(&#39;my_model.h5&#39;)</span><br></pre></td></tr></table></figure>

<p><strong>只保存模型结构</strong>，而不包含其权重或配置信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># save as JSON</span><br><span class="line">json_string &#x3D; model.to_json()</span><br><span class="line"></span><br><span class="line"># save as YAML</span><br><span class="line">yaml_string &#x3D; model.to_yaml()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># model reconstruction from JSON:</span><br><span class="line">from keras.models import model_from_json</span><br><span class="line">model &#x3D; model_from_json(json_string)</span><br><span class="line"></span><br><span class="line"># model reconstruction from YAML</span><br><span class="line">model &#x3D; model_from_yaml(yaml_string)</span><br></pre></td></tr></table></figure>



<h2 id="使用预训练模型"><a href="#使用预训练模型" class="headerlink" title="使用预训练模型"></a>使用预训练模型</h2><p>通过 <code>keras.applications</code> 载入模型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from keras.applications.vgg16 impoprt VGG16</span><br><span class="line">from keras.applications.vgg19 impoprt VGG19</span><br><span class="line">from keras.applications.resnet50 impoprt ResNet50</span><br><span class="line">from keras.applications.inception_v3 impoprt InceptionV3</span><br><span class="line"></span><br><span class="line">model &#x3D; VGG16(weights&#x3D;&#39;imagenet&#39;, include_top&#x3D;True)</span><br></pre></td></tr></table></figure>

<details>
    <summary>官方文档：</summary>
    https://keras.io/zh/#30-keras
</details>

]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构之线段树</title>
    <url>/posts/5964d91b/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>树状数组是一颗<strong>多叉树</strong>，而线段树是一颗<strong>平衡二叉树</strong>，两者多用于<strong>区间</strong>的操作</p>
<p>借用<a href="https://leetcode-cn.com/problems/range-sum-query-mutable/solution/guan-yu-ge-lei-qu-jian-he-wen-ti-ru-he-x-41hv/" target="_blank" rel="noopener">宫水三叶</a>的总结：</p>
<blockquote>
<p>数组不变，求区间和：「前缀和」、「树状数组」、「线段树」</p>
<p>多次修改某个数，求区间和：「树状数组」、「线段树」</p>
<p>多次整体修改某个区间，求区间和：「线段树」、「树状数组」（看修改区间的数据范围）</p>
<p>多次将某个区间变成同一个数，求区间和：「线段树」、「树状数组」（看修改区间的数据范围</p>
</blockquote>
<blockquote>
<p>这样看来，「线段树」能解决的问题是最多的，那我们是不是无论什么情况都写「线段树」呢？</p>
<p>答案并不是，而且恰好相反，只有在我们遇到第 4 类问题，不得不写「线段树」的时候，我们才考虑线段树。</p>
<p>因为「线段树」代码很长，而且常数很大，实际表现不算很好。我们只有在不得不用的时候才考虑「线段树」。</p>
<p>总结一下，我们应该按这样的优先级进行考虑：</p>
<p><strong>简单求区间和，用「前缀和」</strong><br><strong>多次将某个区间变成同一个数，用「线段树」</strong><br><strong>其他情况，用「树状数组」</strong></p>
</blockquote>
<p>我来归纳一下：</p>
<table>
<thead>
<tr>
<th>数据结构\操作</th>
<th>区间求和</th>
<th>区间最大值</th>
<th>区间修改</th>
<th>单点修改</th>
</tr>
</thead>
<tbody><tr>
<td>前缀和</td>
<td>√</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td>树状数组</td>
<td>√</td>
<td>√</td>
<td><strong>×</strong></td>
<td>√</td>
</tr>
<tr>
<td>线段树</td>
<td>√</td>
<td>√</td>
<td><strong>√</strong></td>
<td>√</td>
</tr>
</tbody></table>
<ul>
<li>只用到区间求和：前缀和</li>
<li>区间求和+单点修改：树状数组</li>
<li>区间修改：线段树</li>
</ul>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>线段树是一棵<strong>平衡二叉树</strong>，母结点代表整个区间的和，越往下区间越小，叶节点长度为1，不可再分</p>
<p>线段树的每个<strong>节点</strong>都对应一条<strong>线段（区间）</strong>，但并不保证所有的线段（区间）都是线段树的节点</p>
<p>节点 <strong>p</strong>的左右子节点的编号分别为<strong>2p</strong>和<strong>2p+1</strong></p>
<p>假如节点<strong>p</strong>储存区间<strong>[a,b]</strong>的和，设$mid = \frac{l+r}{2}$那么两个子节点分别储存<strong>[l,mid]</strong>和<strong>[mid+1,r]</strong>的和</p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.10/1002-1.png" alt="1002-1"></p>
<h1 id="懒标记"><a href="#懒标记" class="headerlink" title="懒标记"></a><strong>懒标记</strong></h1><p><strong>区间更新</strong>是线段树的灵魂之一（我是这么理解的😀），其中<strong>懒标记</strong>是关键</p>
<p>当我们对区间修改时，如果类似于<strong>单点修改</strong>那样一个个修改，那么复杂度太高(O(nlogn))，显然不合适</p>
<p>这时我们对每个区间加一个懒标记，标志着这个区间是否进行了修改，如果进行了，那么它的子区间也要进行修改，并且把懒标记转给子结点</p>
<p>关键之处在于，我们<strong>只传递了懒标记，</strong>但<strong>并不会真的去修改</strong>这些子节点（而是在用到这个子节点的时候再修改）</p>
<p>懒标记的实质：<strong>拖延修改，能懒则懒</strong></p>
<h1 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h1><blockquote>
<p>考虑到线段树的复杂性，因此给出了一个可以运行和调试的代码，并且每个变量都采用了易于理解的全称，每个区间均为闭区间</p>
</blockquote>
<blockquote>
<p>由于使用了数组模拟，并且考虑到虚点（也就是没有区间长度的点）的存在，因此需要开4倍的空间，如果被卡空间复杂度，可以考虑换成节点模拟+动态开点</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    nums=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>]	<span class="comment"># examples</span></span><br><span class="line">    n=len(nums)</span><br><span class="line">    tree=[<span class="number">0</span>]* <span class="number">4</span>*n   <span class="comment"># TREE_SIZE</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(node,start,end)</span>:</span>  <span class="comment"># [start,end],后序创建二叉树</span></span><br><span class="line">        <span class="keyword">if</span> start==end:</span><br><span class="line">            tree[node]=nums[start]</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        mid=start+end&gt;&gt;<span class="number">1</span></span><br><span class="line">        lnode=<span class="number">2</span>*node+<span class="number">1</span></span><br><span class="line">        rnode=<span class="number">2</span>*node+<span class="number">2</span></span><br><span class="line">        build(lnode,start,mid)</span><br><span class="line">        build(rnode,mid+<span class="number">1</span>,end)</span><br><span class="line">        tree[node]=tree[lnode]+tree[rnode]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(node,start,end,idx,val)</span>:</span>	<span class="comment"># nums[idx]=&gt;val</span></span><br><span class="line">        <span class="keyword">if</span> start==end:</span><br><span class="line">            tree[node]=val</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        mid=start+end&gt;&gt;<span class="number">1</span></span><br><span class="line">        lnode=<span class="number">2</span>*node+<span class="number">1</span></span><br><span class="line">        rnode=<span class="number">2</span>*node+<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> start&lt;=idx&lt;=mid:</span><br><span class="line">            update(lnode,start,mid,idx,val)</span><br><span class="line">        <span class="keyword">elif</span> mid+<span class="number">1</span>&lt;=idx&lt;=end:</span><br><span class="line">            update(rnode,mid+<span class="number">1</span>,end,idx,val)</span><br><span class="line">        tree[node]=tree[lnode]+tree[rnode]	<span class="comment"># 修改父节点</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(node,start,end,ql,qr)</span>:</span> <span class="comment"># sum [ql,qr]</span></span><br><span class="line">        <span class="keyword">if</span> ql&gt;end <span class="keyword">or</span> qr&lt;start:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> start&gt;=ql <span class="keyword">and</span> end&lt;=qr:	<span class="comment"># 剪枝</span></span><br><span class="line">            <span class="keyword">return</span> tree[node]</span><br><span class="line">        <span class="keyword">elif</span> start==end:</span><br><span class="line">            <span class="keyword">return</span> tree[node]</span><br><span class="line"></span><br><span class="line">        mid=start+end&gt;&gt;<span class="number">1</span></span><br><span class="line">        lnode=<span class="number">2</span>*node+<span class="number">1</span></span><br><span class="line">        rnode=<span class="number">2</span>*node+<span class="number">2</span></span><br><span class="line">        lsum=query(lnode,start,mid,ql,qr)</span><br><span class="line">        rsum=query(rnode,mid+<span class="number">1</span>,end,ql,qr)</span><br><span class="line">        <span class="keyword">return</span> lsum+rsum</span><br><span class="line"></span><br><span class="line">    build(<span class="number">0</span>,<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">    print(tree)</span><br><span class="line">    update(<span class="number">0</span>,<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">4</span>,<span class="number">6</span>)	<span class="comment"># nums[4]=&gt;6</span></span><br><span class="line">    print(tree)</span><br><span class="line">    res=query(<span class="number">0</span>,<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">2</span>,<span class="number">5</span>)	<span class="comment"># sum nums [2,5]</span></span><br><span class="line">    print(res)	</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p><strong>区间更新：</strong>（这里放上了我自己总结的板子，每个人代码风格不一样，不用完全照搬）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tree=[<span class="number">0</span>]* <span class="number">4</span>*n</span><br><span class="line">   lazy=[<span class="number">0</span>]* <span class="number">4</span>*n</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(p,s,t)</span>:</span>   <span class="comment"># [s,t]</span></span><br><span class="line">       <span class="keyword">if</span> s==t:</span><br><span class="line">           tree[p]=nums[s]</span><br><span class="line">           <span class="keyword">return</span></span><br><span class="line">       m=s+t&gt;&gt;<span class="number">1</span></span><br><span class="line">       build(<span class="number">2</span>*p+<span class="number">1</span>,s,m)</span><br><span class="line">       build(<span class="number">2</span>*p+<span class="number">2</span>,m+<span class="number">1</span>,t)</span><br><span class="line">       tree[p]=tree[<span class="number">2</span>*p+<span class="number">1</span>]+tree[<span class="number">2</span>*p+<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(p,s,t,ul,ur,val)</span>:</span> <span class="comment"># [ul,ur]=val</span></span><br><span class="line">       <span class="keyword">if</span> ul&lt;=s <span class="keyword">and</span> t&lt;=ur:</span><br><span class="line">           tree[p]=(t-s+<span class="number">1</span>)*val</span><br><span class="line">           lazy[p]=val</span><br><span class="line">           <span class="keyword">return</span></span><br><span class="line">       m=s+t&gt;&gt;<span class="number">1</span></span><br><span class="line">       <span class="keyword">if</span> lazy[p] <span class="keyword">and</span> s!=t:</span><br><span class="line">           tree[<span class="number">2</span>*p+<span class="number">1</span>]=lazy[p]*(m-s+<span class="number">1</span>)</span><br><span class="line">           tree[<span class="number">2</span>*p+<span class="number">2</span>]=lazy[p]*(t-m)</span><br><span class="line">           lazy[<span class="number">2</span>*p+<span class="number">1</span>]=lazy[p]</span><br><span class="line">           lazy[<span class="number">2</span>*p+<span class="number">2</span>]=lazy[p]</span><br><span class="line">           lazy[p]=<span class="number">0</span></span><br><span class="line">       <span class="keyword">if</span> ul&lt;=m:</span><br><span class="line">           update(p*<span class="number">2</span>+<span class="number">1</span>,s,m,ul,ur,val)</span><br><span class="line">       <span class="keyword">if</span> ur&gt;m:</span><br><span class="line">           update(p*<span class="number">2</span>+<span class="number">2</span>,m+<span class="number">1</span>,t,ul,ur,val)</span><br><span class="line">       tree[p]=tree[p*<span class="number">2</span>+<span class="number">1</span>]+tree[p*<span class="number">2</span>+<span class="number">2</span>]</span><br><span class="line">       </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(p,s,t,ql,qr)</span>:</span> <span class="comment"># ask[ql,qr]</span></span><br><span class="line">       <span class="keyword">if</span> ql&lt;=s <span class="keyword">and</span> t&lt;=qr:</span><br><span class="line">           <span class="keyword">return</span> tree[p]</span><br><span class="line">       m=s+t&gt;&gt;<span class="number">1</span></span><br><span class="line">       <span class="keyword">if</span> lazy[p]:</span><br><span class="line">           tree[p*<span class="number">2</span>+<span class="number">1</span>]=lazy[p]*(m-s+<span class="number">1</span>)</span><br><span class="line">           tree[p*<span class="number">2</span>+<span class="number">2</span>]=lazy[p]*(t-m)</span><br><span class="line">           lazy[p*<span class="number">2</span>+<span class="number">1</span>]=lazy[p]</span><br><span class="line">           lazy[p*<span class="number">2</span>+<span class="number">2</span>]=lazy[p]</span><br><span class="line">           lazy[p]=<span class="number">0</span></span><br><span class="line">       res=<span class="number">0</span></span><br><span class="line">       <span class="keyword">if</span> ql&lt;=m:</span><br><span class="line">           res+=query(<span class="number">2</span>*p+<span class="number">1</span>,s,m,ql,qr)</span><br><span class="line">       <span class="keyword">if</span> qr&gt;m:</span><br><span class="line">           res+=query(<span class="number">2</span>*p+<span class="number">2</span>,m+<span class="number">1</span>,t,ql,qr)   </span><br><span class="line">       <span class="keyword">return</span> res</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(p,s,t,ul,ur,val)</span>:</span> <span class="comment"># [ul,ur]+=val</span></span><br><span class="line">       <span class="keyword">if</span> ul&lt;=s <span class="keyword">and</span> t&lt;=ur:</span><br><span class="line">           tree[p]+=(t-s+<span class="number">1</span>)*val</span><br><span class="line">           lazy[p]+=val</span><br><span class="line">           <span class="keyword">return</span></span><br><span class="line">       m=s+t&gt;&gt;<span class="number">1</span></span><br><span class="line">       <span class="keyword">if</span> lazy[p] <span class="keyword">and</span> s!=t: <span class="comment"># s==t为叶子节点</span></span><br><span class="line">           tree[<span class="number">2</span>*p+<span class="number">1</span>]+=lazy[p]*(m-s+<span class="number">1</span>)</span><br><span class="line">           tree[<span class="number">2</span>*p+<span class="number">2</span>]+=lazy[p]*(t-m)</span><br><span class="line">           lazy[<span class="number">2</span>*p+<span class="number">1</span>]+=lazy[p]</span><br><span class="line">           lazy[<span class="number">2</span>*p+<span class="number">2</span>]+=lazy[p]</span><br><span class="line">           lazy[p]=<span class="number">0</span></span><br><span class="line">       <span class="keyword">if</span> ul&lt;=m:</span><br><span class="line">           update(p*<span class="number">2</span>+<span class="number">1</span>,s,m,ul,ur,val)</span><br><span class="line">       <span class="keyword">if</span> ur&gt;m:</span><br><span class="line">           update(p*<span class="number">2</span>+<span class="number">2</span>,m+<span class="number">1</span>,t,ul,ur,val)</span><br><span class="line">       tree[p]=tree[p*<span class="number">2</span>+<span class="number">1</span>]+tree[p*<span class="number">2</span>+<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">query2</span><span class="params">(p,s,t,ql,qr)</span>:</span> <span class="comment"># ask[ql,qr]</span></span><br><span class="line">       <span class="keyword">if</span> ql&lt;=s <span class="keyword">and</span> t&lt;=qr:</span><br><span class="line">           <span class="keyword">return</span> tree[p]</span><br><span class="line">       m=s+t&gt;&gt;<span class="number">1</span></span><br><span class="line">       <span class="keyword">if</span> lazy[p]:</span><br><span class="line">           tree[p*<span class="number">2</span>+<span class="number">1</span>]+=lazy[p]*(m-s+<span class="number">1</span>)</span><br><span class="line">           tree[p*<span class="number">2</span>+<span class="number">2</span>]+=lazy[p]*(t-m)</span><br><span class="line">           lazy[p*<span class="number">2</span>+<span class="number">1</span>]+=lazy[p]</span><br><span class="line">           lazy[p*<span class="number">2</span>+<span class="number">2</span>]+=lazy[p]</span><br><span class="line">           lazy[p]=<span class="number">0</span></span><br><span class="line">       res=<span class="number">0</span></span><br><span class="line">       <span class="keyword">if</span> ql&lt;=m:</span><br><span class="line">           res+=query(<span class="number">2</span>*p+<span class="number">1</span>,s,m,ql,qr)</span><br><span class="line">       <span class="keyword">if</span> qr&gt;m:</span><br><span class="line">           res+=query(<span class="number">2</span>*p+<span class="number">2</span>,m+<span class="number">1</span>,t,ql,qr)</span><br><span class="line">       <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<p>无懒标记版本：</p>
<blockquote>
<p>这个版本可以用来代替树状数组</p>
</blockquote>
<pre><code>tree=[0]*4*n
def build(p,s,t):
    if s==t:
        tree[p]=nums[s]
        return

    m=s+t&gt;&gt;1
    build(2*p+1,s,m)
    build(2*p+2,m+1,t)
    tree[p]=tree[2*p+1]+tree[2*p+2]

def update(p,s,t,idx,val):
    if s==t:
        tree[p]=val
        return
    m=s+t&gt;&gt;1
    if s&lt;=idx&lt;=m:
        update(2*p+1,s,m,idx,val)
    if m+1&lt;=idx&lt;=t:
        update(2*p+2,m+1,t,idx,val)
    tree[p]=tree[2*p+1]+tree[2*p+2]

def query(p,s,t,ql,qr):
    if ql&lt;=s and t&lt;=qr:
        return tree[p]
    m=s+t&gt;&gt;1
    res=0
    if ql&lt;=m:
        res+=query(2*p+1,s,m,ql,qr)
    if qr&gt;m:
        res+=query(2*p+2,m+1,t,ql,qr)
    return res</code></pre><h1 id="区域和检索-数组可修改"><a href="#区域和检索-数组可修改" class="headerlink" title="区域和检索 - 数组可修改"></a><a href="https://leetcode-cn.com/problems/range-sum-query-mutable/" target="_blank" rel="noopener">区域和检索 - 数组可修改</a></h1><blockquote>
<p>同样的题，昨天用树状数组写了一遍，今天可以用线段树来写了</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums: List[int])</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(node,start,end)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> start==end:</span><br><span class="line">                self.tree[node]=nums[start]</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            mid=start+end&gt;&gt;<span class="number">1</span></span><br><span class="line">            lnode=<span class="number">2</span>*node+<span class="number">1</span></span><br><span class="line">            rnode=<span class="number">2</span>*node+<span class="number">2</span></span><br><span class="line">            build(lnode,start,mid)</span><br><span class="line">            build(rnode,mid+<span class="number">1</span>,end)</span><br><span class="line">            self.tree[node]=self.tree[lnode]+self.tree[rnode]</span><br><span class="line"></span><br><span class="line">        self.n=len(nums)</span><br><span class="line">        self.tree=[<span class="number">0</span>]*<span class="number">4</span>*self.n</span><br><span class="line">        build(<span class="number">0</span>,<span class="number">0</span>,self.n<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, index: int, val: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_update</span><span class="params">(node,start,end,idx,val)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> start==end:</span><br><span class="line">                self.tree[node]=val</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            mid=start+end&gt;&gt;<span class="number">1</span></span><br><span class="line">            lnode=<span class="number">2</span>*node+<span class="number">1</span></span><br><span class="line">            rnode=<span class="number">2</span>*node+<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> start&lt;=idx&lt;=mid:</span><br><span class="line">                _update(lnode,start,mid,idx,val)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                _update(rnode,mid+<span class="number">1</span>,end,idx,val)</span><br><span class="line">            self.tree[node]=self.tree[lnode]+self.tree[rnode]</span><br><span class="line">        </span><br><span class="line">        _update(<span class="number">0</span>,<span class="number">0</span>,self.n<span class="number">-1</span>,index,val)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumRange</span><span class="params">(self, left: int, right: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(node,start,end,ql,qr)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> start&gt;qr <span class="keyword">or</span> end&lt;ql:<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">elif</span> start&gt;=ql <span class="keyword">and</span> end&lt;=qr:<span class="keyword">return</span> self.tree[node]</span><br><span class="line">            <span class="keyword">elif</span> start==end:<span class="keyword">return</span> self.tree[node]</span><br><span class="line">            </span><br><span class="line">            mid=start+end&gt;&gt;<span class="number">1</span></span><br><span class="line">            lnode=<span class="number">2</span>*node+<span class="number">1</span></span><br><span class="line">            rnode=<span class="number">2</span>*node+<span class="number">2</span>  </span><br><span class="line">            lsum=query(lnode,start,mid,ql,qr)</span><br><span class="line">            rsum=query(rnode,mid+<span class="number">1</span>,end,ql,qr)     </span><br><span class="line">            <span class="keyword">return</span> lsum+rsum</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> query(<span class="number">0</span>,<span class="number">0</span>,self.n<span class="number">-1</span>,left,right)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your NumArray object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = NumArray(nums)</span></span><br><span class="line"><span class="comment"># obj.update(index,val)</span></span><br><span class="line"><span class="comment"># param_2 = obj.sumRange(left,right)</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>刷题模板</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫战知乎之利用XHR + 多线程</title>
    <url>/posts/f5fdaca9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="写在开始"><a href="#写在开始" class="headerlink" title="写在开始"></a>写在开始</h1><blockquote>
<p>本教程仅供<strong>学习</strong>，若被他人用于<strong>其他</strong>用途，<strong>与本人无关</strong></p>
</blockquote>
<h1 id="第二战-利用XHR"><a href="#第二战-利用XHR" class="headerlink" title="第二战-利用XHR"></a>第二战-利用XHR</h1><blockquote>
<p>使用selenium虽然可以偷懒，但如果能直接找到XHR，则可以直接从中获取内容，且更为快速</p>
<p>（当然知乎的XHR返回的内容是没有加密的，否则。。。。）</p>
</blockquote>
<ol>
<li><p><strong>什么是XHR</strong></p>
<blockquote>
<p>XHR即<strong>X</strong>ML <strong>H</strong>ttp <strong>R</strong>equest 的简写，AJAX 使用的 <code>XMLHttpRequest</code> 的对象与服务器通信，使得网页能够异步动态地加载内容</p>
</blockquote>
</li>
<li><p><strong>分析XHR</strong></p>
<blockquote>
<p>打开网址：<a href="https://www.zhihu.com/question/375762710，F12进行分析" target="_blank" rel="noopener">https://www.zhihu.com/question/375762710，F12进行分析</a></p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.8/0826-1.jpg" alt="0826-1"></p>
<blockquote>
<p>发现一个名为answer?include=data……的API内出现了我们想要的内容，分析其<strong>Request URL</strong></p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.8/0826-2.jpg" alt="0826-2"></p>
<blockquote>
<p>值得注意，里面的offset=参数是5的倍数，而questions/{}/answers?之间的是{question_id}</p>
<p>由此，我们分析得到了可以获取问题答案的XHR</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">同理，在点击展开评论后，我们也能分析得到获取评论的XHR：https:&#x2F;&#x2F;www.zhihu.com&#x2F;api&#x2F;v4&#x2F;answers&#x2F;1047398459&#x2F;root_comments?order&#x3D;normal&amp;limit&#x3D;20&amp;offset&#x3D;0&amp;status&#x3D;open</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p><strong>获取答案</strong></p>
<blockquote>
<ol>
<li><p>通过requests.get获取数据，利用json.loads解析后(可以结合etree)找到各部分(答案ID，回答者，回答内容等等)数据</p>
</li>
<li><p>利用state保证一次连接的成功</p>
</li>
<li><p>利用<code>is_end = jsonAnswer[&#39;paging&#39;][&#39;is_end&#39;]</code>作为判断结束的标志</p>
</li>
<li><p>利用<code>data[&#39;comment_count&#39;] &gt; 0</code>判断改问题是否有获取评论的必要</p>
</li>
</ol>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetAnswers</span><span class="params">(question_id)</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = <span class="string">f'https://www.zhihu.com/api/v4/questions/<span class="subst">&#123;question_id&#125;</span>/answers?include=data%5B%2A%5D.is_normal%2Cadmin_closed_comment%2Creward_info%2Cis_collapsed%2Cannotation_action%2Cannotation_detail%2Ccollapse_reason%2Cis_sticky%2Ccollapsed_by%2Csuggest_edit%2Ccomment_count%2Ccan_comment%2Ccontent%2Ceditable_content%2Cattachment%2Cvoteup_count%2Creshipment_settings%2Ccomment_permission%2Ccreated_time%2Cupdated_time%2Creview_info%2Crelevant_info%2Cquestion%2Cexcerpt2Cis_labeled%2Cpaid_info%2Cpaid_info_content%2Crelationship.is_authorized%2Cis_author%2Cvoting%2Cis_thanked%2Cis_nothelp%2Cis_recognized%3Bdata%5B%2A%5D.mark_infos%5B%2A%5D.url%3Bdata%5B%2A%5D.author.follower_count%2Cbadge%5B%2A%5D.topics%3Bdata%5B%2A%5D.settings.table_of_content.enabled&amp;limit=5&amp;offset=<span class="subst">&#123;i&#125;</span>&amp;platform=desktop&amp;sort_by=default'</span></span><br><span class="line"></span><br><span class="line">        state=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> state:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                res = requests.get(url, headers=headers, timeout=(<span class="number">3</span>, <span class="number">7</span>))</span><br><span class="line">                state=<span class="number">0</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        res.encoding = <span class="string">'utf-8'</span></span><br><span class="line">        jsonAnswer = json.loads(res.text)</span><br><span class="line">        is_end = jsonAnswer[<span class="string">'paging'</span>][<span class="string">'is_end'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> jsonAnswer[<span class="string">'data'</span>]:</span><br><span class="line">            ……</span><br><span class="line">            ……</span><br><span class="line">            ……</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> data[<span class="string">'admin_closed_comment'</span>] == <span class="literal">False</span> <span class="keyword">and</span> data[<span class="string">'can_comment'</span>][<span class="string">'status'</span>] <span class="keyword">and</span> data[<span class="string">'comment_count'</span>] &gt; <span class="number">0</span>:</span><br><span class="line">                GetComments(question_id,answer_id)</span><br><span class="line">        i += <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> is_end:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>打省略号的部分是需要用户自己选择需要的数据</p>
<p>例如answer_id：<code>str(data[&#39;id&#39;])</code></p>
<p>content: <code>&#39;&#39;.join(etree.HTML(data[&#39;content&#39;]).xpath(&#39;//p//text()&#39;))</code></p>
</blockquote>
</li>
<li><p><strong>获取评论</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetComments</span><span class="params">(question_id,answer_id)</span>:</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = <span class="string">'https://www.zhihu.com/api/v4/answers/&#123;0&#125;/root_comments?order=normal&amp;limit=20&amp;offset=&#123;1&#125;&amp;status=open'</span>.format(</span><br><span class="line">            answer_id, j)</span><br><span class="line"></span><br><span class="line">        state=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> state:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                res = requests.get(url, headers=headers, timeout=(<span class="number">3</span>, <span class="number">7</span>))</span><br><span class="line">                state=<span class="number">0</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        res.encoding = <span class="string">'utf-8'</span></span><br><span class="line">        jsonComment = json.loads(res.text)</span><br><span class="line">        is_end = jsonComment[<span class="string">'paging'</span>][<span class="string">'is_end'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> jsonComment[<span class="string">'data'</span>]:</span><br><span class="line">            ……</span><br><span class="line">            ……</span><br><span class="line">            ……</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> child_comments <span class="keyword">in</span> data[<span class="string">'child_comments'</span>]:</span><br><span class="line">                ……</span><br><span class="line">                ……</span><br><span class="line">                ……</span><br><span class="line"></span><br><span class="line">        j += <span class="number">20</span></span><br><span class="line">        <span class="keyword">if</span> is_end:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>多线程优化</strong></p>
<blockquote>
<p>(这里提醒一下，希望大家不要无限制地多开线程占用服务器资源)</p>
</blockquote>
<blockquote>
<p>go就是自己编写的爬取函数，questions是一个存储问题ID的队列</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取队列中问题ID，并运行函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(queue)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> queue.empty() <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">True</span>:</span><br><span class="line">        num=queue.get()</span><br><span class="line">        print(<span class="string">f'开始爬取问题，ID为<span class="subst">&#123;num&#125;</span>'</span>)</span><br><span class="line">        go(num)</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;num&#125;</span>号问题爬取完毕'</span>)</span><br><span class="line">        questions.task_done()</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造线程</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">10</span>):     <span class="comment"># 10 个线程</span></span><br><span class="line">    thread = Thread(target=run, args=(questions,))</span><br><span class="line">    thread.daemon = <span class="literal">True</span>  <span class="comment"># 随主线程退出而退出</span></span><br><span class="line">    thread.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程结束</span></span><br><span class="line">questions.join()</span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">f'总耗时：<span class="subst">&#123;end - start&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="6">
<li><p><strong>结语</strong></p>
<blockquote>
<p>不知道大家在爬取之前，是否注意到知乎遵循了robots协议（没有关注过的可以点击这个网址:<a href="https://www.zhihu.com/robots.txt" target="_blank" rel="noopener">https://www.zhihu.com/robots.txt</a>)</p>
<p>为了不给网站的管理员带来麻烦，希望大家在爬取的时候能尽量遵循robots协议；若在学习过程中在不可避免地无法遵循robots协议，也尽量维持爬虫爬取频率与人类正常访问频率相当，不过多占用服务器资源</p>
</blockquote>
</li>
</ol>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><blockquote>
<p>技术是无私的，非常不舍得把我这个实战代码分享了出去，毕竟以我的爬虫技术，编写这么个知乎爬虫实战的代码还是很费劲的，花了很多心血，也踩了很多坑</p>
<p>希望大家能够多多支持大可，有什么问题都可以提交，我也会及时为大家解决。最后也欢迎大家光临我的小站 <a href="https://cheungducknew.github.io/" target="_blank" rel="noopener">https://cheungducknew.github.io/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>XHR</tag>
        <tag>多线程</tag>
        <tag>知乎</tag>
      </tags>
  </entry>
  <entry>
    <title>社交网络分析</title>
    <url>/posts/cc78cef3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="关键词提取算法"><a href="#关键词提取算法" class="headerlink" title="关键词提取算法"></a>关键词提取算法</h1><ol>
<li><p><strong>TF-IDF算法</strong></p>
<ol>
<li><p><strong>算法原理</strong></p>
<p>​    TF-IDF（Term Frequency/Inverse Document Frequency），即词频-逆文档频率算法，用以评估一字词对于一个文件集或一个语料库中的其中一份文件的重要程度。字词的重要性随着它在文件中出现的次数成正比增加，但同时会随着它在语料库中出现的频率成反比下降。相关公式如下:</p>
<p>$TF_{W,D_i} = \frac{count(W)}{|D_i|}$</p>
<p>$IDF_W = \log \frac{N}{1 + \sum_{i=1}^N I(W,D_i)}$</p>
<p>$TF - IDF_{W,D_i} = TF_{W,D_i} \times IDF_W$</p>
<p>其中count(w)为关键词w的出现次数，|Di|为文档Di中所有词的数量，N为所有的文档总数，I(w,Di)表示文档Di是否包含关键词。</p>
</li>
<li><p><strong>核心代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.	def get_keywords(text):  </span><br><span class="line">2.	    # 统计词频  </span><br><span class="line">3.	    cnt &#x3D; defaultdict(int)  </span><br><span class="line">4.	    for line in text:  </span><br><span class="line">5.	        for i in line:  </span><br><span class="line">6.	            cnt[i] +&#x3D; 1  </span><br><span class="line">7.	  </span><br><span class="line">8.	    # 计算TF  </span><br><span class="line">9.	    tf &#x3D; &#123;&#125;  </span><br><span class="line">10.	    for i in cnt:  </span><br><span class="line">11.	        tf[i] &#x3D; cnt[i] &#x2F; sum(cnt.values())  </span><br><span class="line">12.	  </span><br><span class="line">13.	    # 计算IDF  </span><br><span class="line">14.	    idf &#x3D; &#123;&#125;  </span><br><span class="line">15.	    paragraph &#x3D; defaultdict(int)  # 存储包含该词的段落数  </span><br><span class="line">16.	    for i in cnt:  </span><br><span class="line">17.	        for j in text:  </span><br><span class="line">18.	            if i in j:  </span><br><span class="line">19.	                paragraph[i] +&#x3D; 1  </span><br><span class="line">20.	  </span><br><span class="line">21.	    n &#x3D; len(text)  </span><br><span class="line">22.	    for i in cnt:  </span><br><span class="line">23.	        idf[i] &#x3D; math.log(n &#x2F; (paragraph[i] + 1))  </span><br><span class="line">24.	  </span><br><span class="line">25.	    # 计算每个词的TF*IDF的值  </span><br><span class="line">26.	    tf_idf &#x3D; &#123;&#125;  </span><br><span class="line">27.	    for i in cnt:  </span><br><span class="line">28.	        tf_idf[i] &#x3D; tf[i] * idf[i]  </span><br><span class="line">29.	  </span><br><span class="line">30.	    # 字典按值降序  </span><br><span class="line">31.	    res &#x3D; sorted(tf_idf.items(), key&#x3D;lambda x:x[1], reverse&#x3D;True)# 利用 lambda 表达式取字典的值  </span><br><span class="line">32.	    return res</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ol>
<ol start="2">
<li><p><strong>TextRank算法</strong></p>
<blockquote>
<p>由于TF-IDF算法需要事先准备语料库，不具备普遍性，因此我们可以选用更简洁有效的TextRank算法来做关键词提取。</p>
</blockquote>
<ol>
<li><p><strong>算法原理</strong></p>
<p>TextRank 算法基于图的排序算法，其基本思想来源于PageRank算法, 通过把文本分割成若干组成单元(单词、句子)并建立图模型,仅利用单篇文档本身的信息即可实现关键词提取。计算公式如下：</p>
</li>
</ol>
<p>$WS(V_i) = (1-d) + d\times \sum_{V_j \in In(V_i)} \frac{W_{j i}}{\sum_{V_k \in Out(V_j)} W_{jk}} WS(V_j)$</p>
</li>
</ol>
<pre><code>其中WS(Vi)表示单元Vi的权重，d为阻尼系数，一般取0.85，Wji表示单元j和单元i的相似度，右侧求和表示每个相邻单元对当前单元的贡献程度，可以粗略认为小文本中的每个单元都是相邻的。</code></pre><ol start="2">
<li><p><strong>核心代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.	import numpy as np  </span><br><span class="line">2.	import jieba  </span><br><span class="line">3.	import jieba.posseg as pseg  </span><br><span class="line">4.	import csv  </span><br><span class="line">5.	  </span><br><span class="line">6.	  </span><br><span class="line">7.	class TextRank(object):  </span><br><span class="line">8.	    def __init__(self, sentence, window&#x3D;5, d&#x3D;0.85, iternum&#x3D;1000):  </span><br><span class="line">9.	        &quot;&quot;&quot;  </span><br><span class="line">10.	        :param sentence: 提供的文本  </span><br><span class="line">11.	        :param window: 窗口大小，这里取5  </span><br><span class="line">12.	        :param d: 阻尼系数，一般取0.85  </span><br><span class="line">13.	        :param iternum: 迭代次数,可以取1000  </span><br><span class="line">14.	        &quot;&quot;&quot;  </span><br><span class="line">15.	        self.sentence &#x3D; sentence  </span><br><span class="line">16.	        self.window &#x3D; window  </span><br><span class="line">17.	        self.d &#x3D; d  </span><br><span class="line">18.	        self.iternum &#x3D; iternum  </span><br><span class="line">19.	        self.edge &#x3D; &#123;&#125;  # 记录节点的边  </span><br><span class="line">20.	  </span><br><span class="line">21.	        # 分词  </span><br><span class="line">22.	        jieba.load_userdict(&#39;user_dict.txt&#39;) # 加载自定义字典  </span><br><span class="line">23.	        self.word_list &#x3D; [s.word for s in pseg.cut(self.sentence) if len(s.word)&gt;&#x3D;2 and s.flag in [&#39;n&#39;,&#39;nr&#39;,&#39;ns&#39;,&#39;nt&#39;,&#39;nz&#39;]] # n为名词  </span><br><span class="line">24.	        self.size &#x3D; len(self.word_list)  </span><br><span class="line">25.	        self.set_size &#x3D; len(set(self.word_list))  </span><br><span class="line">26.	        # print(self.word_list)  </span><br><span class="line">27.	  </span><br><span class="line">28.	        #处理过程  </span><br><span class="line">29.	        self.getNodes()  </span><br><span class="line">30.	        self.getMatrix()  </span><br><span class="line">31.	        self.getW()  </span><br><span class="line">32.	  </span><br><span class="line">33.	        #输出结果  </span><br><span class="line">34.	        # self.show()  </span><br><span class="line">35.	  </span><br><span class="line">36.	  </span><br><span class="line">37.	  </span><br><span class="line">38.	    # 构建相邻节点,返回边集  </span><br><span class="line">39.	    def getNodes(self):  </span><br><span class="line">40.	        tmp_list &#x3D; []  </span><br><span class="line">41.	        for idx, word in enumerate(self.word_list):  </span><br><span class="line">42.	            if word not in self.edge.keys():  </span><br><span class="line">43.	                tmp_list.append(word)  </span><br><span class="line">44.	                tmp_set &#x3D; set()  </span><br><span class="line">45.	                low &#x3D; idx - self.window + 1  if idx - self.window + 1&gt;&#x3D;0 else 0 # 下边界  </span><br><span class="line">46.	                high &#x3D; idx + self.window if idx + self.window&lt;self.size else self.size    # 上边界  </span><br><span class="line">47.	                for i in range(low, high):  </span><br><span class="line">48.	                    if i !&#x3D; idx:  </span><br><span class="line">49.	                        tmp_set.add(self.word_list[i])  #添加窗口内相邻节点  </span><br><span class="line">50.	                self.edge[word] &#x3D; tmp_set  </span><br><span class="line">51.	  </span><br><span class="line">52.	    # 构建矩阵  </span><br><span class="line">53.	    def getMatrix(self):  </span><br><span class="line">54.	        self.matrix &#x3D; np.zeros([self.set_size, self.set_size])    #初始化矩阵  </span><br><span class="line">55.	        self.word_idx &#x3D; &#123;&#125;  # 记录词的下标  </span><br><span class="line">56.	        self.idx_word &#x3D; &#123;&#125;  # 记录下标对应的词  </span><br><span class="line">57.	  </span><br><span class="line">58.	        for i, v in enumerate(set(self.word_list)):  </span><br><span class="line">59.	            self.word_idx[v] &#x3D; i  </span><br><span class="line">60.	            self.idx_word[i] &#x3D; v  </span><br><span class="line">61.	        for key in self.edge.keys():  </span><br><span class="line">62.	            for w in self.edge[key]:  </span><br><span class="line">63.	                self.matrix[self.word_idx[key]][self.word_idx[w]] &#x3D; 1  </span><br><span class="line">64.	                self.matrix[self.word_idx[w]][self.word_idx[key]] &#x3D; 1  </span><br><span class="line">65.	        # 归一化  </span><br><span class="line">66.	        for j in range(self.matrix.shape[1]):  </span><br><span class="line">67.	            sum &#x3D; 0  </span><br><span class="line">68.	            for i in range(self.matrix.shape[0]):  </span><br><span class="line">69.	                sum +&#x3D; self.matrix[i][j]  </span><br><span class="line">70.	            for i in range(self.matrix.shape[0]):  </span><br><span class="line">71.	                self.matrix[i][j] &#x2F;&#x3D; sum  </span><br><span class="line">72.	  </span><br><span class="line">73.	    # 迭代，计算权重  </span><br><span class="line">74.	    def getW(self):  </span><br><span class="line">75.	        self.W &#x3D; np.ones([self.set_size, 1])  </span><br><span class="line">76.	        for i in range(self.iternum):  </span><br><span class="line">77.	            self.W &#x3D; (1 - self.d) + self.d * np.dot(self.matrix, self.W)  </span><br><span class="line">78.	  </span><br><span class="line">79.	    # 输出结果  </span><br><span class="line">80.	    def show(self):  </span><br><span class="line">81.	        res &#x3D; &#123;&#125;  </span><br><span class="line">82.	        for i in range(len(self.W)):  </span><br><span class="line">83.	            res[self.idx_word[i]] &#x3D; self.W[i][0]  </span><br><span class="line">84.	        res&#x3D;sorted(res.items(), key&#x3D;lambda x: x[1], reverse&#x3D;True)  </span><br><span class="line">85.	        # print(res)  </span><br><span class="line">86.	        with open(&#39;斗破苍穹.csv&#39;,&#39;w&#39;,encoding&#x3D;&#39;utf-8&#39;) as f:  </span><br><span class="line">87.	            csv_writer &#x3D; csv.writer(f)  </span><br><span class="line">88.	            csv_writer.writerow([&quot;姓名&quot;, &quot;权重&quot;])  </span><br><span class="line">89.	            for name,w in res:  </span><br><span class="line">90.	                csv_writer.writerow([name, w])  </span><br><span class="line">91.	  </span><br><span class="line">92.	  </span><br><span class="line">93.	  </span><br><span class="line">94.	if __name__ &#x3D;&#x3D; &#39;__main__&#39;:  </span><br><span class="line">95.	    filename&#x3D;&#39;斗破苍穹.txt&#39;  </span><br><span class="line">96.	    with open(filename, &#39;r&#39;, encoding&#x3D;&#39;utf-8&#39;)as f:  </span><br><span class="line">97.	        text &#x3D; f.read()  </span><br><span class="line">98.	        tr &#x3D; TextRank(text)  </span><br><span class="line">99.	        tr.show()</span><br></pre></td></tr></table></figure>





</li>
</ol>
<h1 id="社交网络分析"><a href="#社交网络分析" class="headerlink" title="社交网络分析"></a>社交网络分析</h1><blockquote>
<ul>
<li>通过jieba分词，结合自定义词典得到人名；</li>
<li>构建共现矩阵统计每一段中共现的人物，通过字典保存</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.	def social_contact(file_name):  </span><br><span class="line">2.	    names &#x3D; &#123;&#125;  # 人物出现次数  </span><br><span class="line">3.	    relationships &#x3D; &#123;&#125;  # 关系字典  </span><br><span class="line">4.	    lineNames &#x3D; []  # 每段内人物  </span><br><span class="line">5.	    jieba.load_userdict(&quot;character.txt&quot;)  </span><br><span class="line">6.	    with codecs.open(file_name, &quot;r&quot;, &quot;utf-8&quot;) as f:  </span><br><span class="line">7.	        for line in f.readlines():  </span><br><span class="line">8.	            poss &#x3D; posseg.cut(line)  </span><br><span class="line">9.	            lineNames.append([])  </span><br><span class="line">10.	            for w in poss:  </span><br><span class="line">11.	                if w.flag !&#x3D; &quot;nr&quot; or len(w.word) &lt; 2:#w.flag判断词性  </span><br><span class="line">12.	                    continue  </span><br><span class="line">13.	                lineNames[-1].append(w.word)  </span><br><span class="line">14.	                if names.get(w.word) is None:  </span><br><span class="line">15.	                    names[w.word] &#x3D; 0  </span><br><span class="line">16.	                    relationships[w.word] &#x3D; &#123;&#125;  </span><br><span class="line">17.	                names[w.word] +&#x3D; 1  </span><br><span class="line">18.	  </span><br><span class="line">19.	  </span><br><span class="line">20.	  </span><br><span class="line">21.	    for line in lineNames:  </span><br><span class="line">22.	        for name1 in line:  </span><br><span class="line">23.	            for name2 in line:  </span><br><span class="line">24.	                if name1 &#x3D;&#x3D; name2:  </span><br><span class="line">25.	                    continue  </span><br><span class="line">26.	                if relationships[name1].get(name2) is None:  </span><br><span class="line">27.	                    relationships[name1][name2] &#x3D; 1         #创建关系  </span><br><span class="line">28.	                else:  </span><br><span class="line">29.	                    relationships[name1][name2] &#x3D; relationships[name1][name2] + 1  #关系提升1</span><br></pre></td></tr></table></figure>





<h1 id="社交网络可视化"><a href="#社交网络可视化" class="headerlink" title="社交网络可视化"></a>社交网络可视化</h1><ol>
<li><p><strong>NetworkX库</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0902-1.png" alt="0902-1"></p>
<p>具体内容可以看我写的另一篇文章<a href="http://ducknew.cf/posts/13e75cb2/">可视化之网络图</a></p>
</li>
<li><p><strong>Gephi软件</strong></p>
<blockquote>
<p>Gephi软件有着强大的可视化功能。</p>
<p>通过导入节点表和边表，能够生成可更改的图结构图片，如下图所示</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.9/0902-2.png" alt="0902-2"></p>
<p>节点表和边表的生成，可以参考：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> codecs.open(<span class="string">"node.txt"</span>, <span class="string">"a+"</span>, <span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">   	f.write(<span class="string">"Id Label Weight\r\n"</span>)</span><br><span class="line">   	<span class="keyword">for</span> name, times <span class="keyword">in</span> names.items():</span><br><span class="line">   		f.write(name + <span class="string">" "</span> + name + <span class="string">" "</span> + str(times) + <span class="string">"\r\n"</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">with</span> codecs.open(<span class="string">"edge.txt"</span>, <span class="string">"a+"</span>, <span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">   	f.write(<span class="string">"Source Target Weight\r\n"</span>)</span><br><span class="line">   	<span class="keyword">for</span> name, edges <span class="keyword">in</span> relationships.items():</span><br><span class="line">   		<span class="keyword">for</span> v, w <span class="keyword">in</span> edges.items():</span><br><span class="line">   			<span class="keyword">if</span> w &gt; <span class="number">3</span>:</span><br><span class="line">   				f.write(name + <span class="string">" "</span> + v + <span class="string">" "</span> + str(w) + <span class="string">"\r\n"</span>)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>讲个小知识，为什么使用<code>codecs</code>库？</p>
<blockquote>
<p>codecs包含了编码解码器的注册和其他基本的类，开发者还可以通过codecs提供的接口自定义编/解码方案</p>
</blockquote>
<blockquote>
<p>通过指定codecs.open中的encoding参数，进行编码/解码方式的选择</p>
</blockquote>
<blockquote>
<p>更多编码转换方案相关的信息，还可通过标准库中自带的编码库<code>encodings</code>进行查询</p>
</blockquote>
<p>参考信息：<a href="https://zhuanlan.zhihu.com/p/26720957" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26720957</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">技术是无私的，非常不舍得把我这个实战代码分享了出去,希望大家能够多多支持大可，有什么问题都可以提交，我也会及时为大家解决。最后也欢迎大家光临我的小站 http:&#x2F;&#x2F;ducknew.cf&#x2F;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫战知乎之selenium</title>
    <url>/posts/22c94a93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="写在开始"><a href="#写在开始" class="headerlink" title="写在开始"></a>写在开始</h1><blockquote>
<p>本教程仅供<strong>学习</strong>，若被他人用于<strong>其他</strong>用途，<strong>与本人无关</strong></p>
</blockquote>
<h1 id="第一战-selenium"><a href="#第一战-selenium" class="headerlink" title="第一战-selenium"></a>第一战-selenium</h1><blockquote>
<p>使用selenium可以直接获得加载后的网页信息而无需考虑请求信息，Ajax，js解密等等，可谓偷懒神器，下面以    <a href="https://www.zhihu.com/question/375762710" target="_blank" rel="noopener">https://www.zhihu.com/question/375762710</a>    为例，进行实战讲解</p>
</blockquote>
<ol>
<li><p><strong>初始</strong></p>
<blockquote>
<p>分析网址，可以发现网址是<a href="https://www.zhihu.com/question/" target="_blank" rel="noopener">https://www.zhihu.com/question/</a> + question_id的形式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    option &#x3D; webdriver.ChromeOptions()</span><br><span class="line">    option.add_argument(&quot;headless&quot;)</span><br><span class="line">    option.add_experimental_option(&quot;detach&quot;, True)</span><br><span class="line">    driver &#x3D; webdriver.Chrome(chrome_options&#x3D;option)</span><br><span class="line">    driver.get(&#39;https:&#x2F;&#x2F;www.zhihu.com&#x2F;question&#x2F;&#39;+question_id)</span><br><span class="line">    </span><br><span class="line">except Exception as e:</span><br><span class="line">   	print(e)</span><br><span class="line">finally:</span><br><span class="line">    driver.close()</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>关闭登录弹窗</strong></p>
<blockquote>
<p>进入网页，结果发现了烦人的登录弹窗，可以通过Xpath和CSS选择器的方式获取关闭按钮，模拟点击操作</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@master/img/2021.8/8.25-1.jpg" alt="图片"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 先触发登陆弹窗。</span><br><span class="line">WebDriverWait(driver, 40, 1).until(EC.presence_of_all_elements_located(</span><br><span class="line">(By.CLASS_NAME, &#39;Modal-backdrop&#39;)), waitFun())</span><br><span class="line"># 关闭登陆窗口</span><br><span class="line">driver.find_element_by_xpath(&#39;&#x2F;&#x2F;button[@class&#x3D;&quot;Button Modal-closeButton Button--plain&quot;]&#39;).click()</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取所有答案</strong></p>
<blockquote>
<p>更气人的来了，知乎竟然是动态加载，需要将滚轮滑动到底部才能获得全部答案，因此需要运行js获得页面高度，并模拟滚轮下滑</p>
<p>sleep(1)是为了等待加载</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def waitFun():</span><br><span class="line">    js &#x3D; &quot;&quot;&quot;</span><br><span class="line">    let equalNum &#x3D; 0;</span><br><span class="line">    window.checkBottom &#x3D; false;</span><br><span class="line">    window.height &#x3D; 0;</span><br><span class="line">    window.intervalId &#x3D; setInterval(()&#x3D;&gt;&#123;</span><br><span class="line">    let currentHeight &#x3D; document.body.scrollHeight;</span><br><span class="line">    if(currentHeight &#x3D;&#x3D;&#x3D; window.height)&#123;</span><br><span class="line">    equalNum++;</span><br><span class="line">    if(equalNum &#x3D;&#x3D;&#x3D; 2)&#123;</span><br><span class="line">    clearInterval(window.intervalId);</span><br><span class="line">    window.checkBottom &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">    window.height &#x3D; currentHeight;</span><br><span class="line">    window.scrollTo(0,window.height);</span><br><span class="line">    window.scrollTo(0,window.height-1000);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,1500)&quot;&quot;&quot;</span><br><span class="line">    driver.execute_script(js)</span><br><span class="line">def getHeight(nice):</span><br><span class="line">    js &#x3D; &quot;&quot;&quot;</span><br><span class="line">    return window.checkBottom;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    return driver.execute_script(js)</span><br><span class="line"></span><br><span class="line"># 当滚动到底部时</span><br><span class="line">WebDriverWait(driver, 40, 3).until(getHeight, waitFun())</span><br><span class="line"></span><br><span class="line"># 等待加载</span><br><span class="line">sleep(1)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取标题和副标题</strong></p>
<blockquote>
<p>需要注意，有些问题是没有副标题的，因此也不存在副标题的element</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title&#x3D;driver.find_element_by_xpath(&#39;&#x2F;&#x2F;h1[@class&#x3D;&quot;QuestionHeader-title&quot;]&#39;).text</span><br><span class="line"></span><br><span class="line">subtitle &#x3D; driver.find_element_by_xpath(&#39;&#x2F;&#x2F;span[@class&#x3D;&quot;RichText ztext css-hnrfcf&quot;]&#39;).text</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>展开评论</strong></p>
<blockquote>
<p>难受，评论的数据并不包含在页面中，而需要点击 “XX条评论” 按钮后才进行动态加载，因此需要模拟点击这些按钮</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@master/img/2021.8/8.25-2.png" alt="图片"></p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@master/img/2021.8/8.25-3.png" alt="图片"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wait&#x3D;WebDriverWait(driver,30)   #显式等待</span><br><span class="line">path&#x3D;(By.XPATH,&#39;&#x2F;&#x2F;button[@class&#x3D;&quot;Button ContentItem-action Button--plain Button--withIcon Button--withLabel&quot;]&#39;)</span><br><span class="line">clicks&#x3D;wait.until(EC.presence_of_all_elements_located(path))</span><br><span class="line">for c in clicks:</span><br><span class="line">	if &#39;条&#39; in c.text:</span><br><span class="line">		driver.execute_script(&quot;arguments[0].click();&quot;, c)</span><br><span class="line">		sleep(0.1)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>按块获取答案</strong></p>
<blockquote>
<p>先分析得到每一个问题的答主信息、回答内容、评论都在 “List-item”下</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@master/img/2021.8/8.25-4.jpg" alt="图片"></p>
<blockquote>
<p>然后在每一块元素的基础上，在进行答主信息、回答内容、评论的查找</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># get blocks</span><br><span class="line">blocks&#x3D;driver.find_elements_by_xpath(&#39;&#x2F;&#x2F;div[@class&#x3D;&quot;List-item&quot;]&#39;)</span><br><span class="line">res&#x3D;[]</span><br><span class="line">for b in blocks:</span><br><span class="line">    author &#x3D; b.find_element_by_xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;ContentItem-meta&quot;]&#x2F;&#x2F;meta[@itemprop&#x3D;&quot;name&quot;]&#39;).get_attribute(&#39;content&#39;)</span><br><span class="line">    content &#x3D; b.find_element_by_xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;RichContent-inner&quot;]&#39;).text</span><br><span class="line">    # button&#x3D;b.find_element_by_xpath(&#39;.&#x2F;&#x2F;div[@class&#x3D;&quot;ContentItem-actions&quot;]&#x2F;&#x2F;button[contains(text(),&quot;评论&quot;)]&#39;)</span><br><span class="line">    button&#x3D;b.find_element_by_xpath(&#39;.&#x2F;&#x2F;button[@class&#x3D;&quot;Button ContentItem-action Button--plain Button--withIcon Button--withLabel&quot;]&#39;)</span><br><span class="line">    if &#39;收起&#39; in button.text:</span><br><span class="line">        comment &#x3D; b.find_elements_by_xpath(&#39;.&#x2F;&#x2F;ul[@class&#x3D;&quot;NestComment&quot;]&#39;)</span><br><span class="line">        comments&#x3D;&#39;&#39;</span><br><span class="line">        for c in comment:</span><br><span class="line">            comments+&#x3D;c.text</span><br><span class="line">        print(comments)</span><br><span class="line">        sleep(0.2)</span><br><span class="line">    else:</span><br><span class="line">        comments &#x3D; &#39;无评论&#39;</span><br><span class="line"></span><br><span class="line">    tmp&#x3D;&#123;&#39;author&#39;:author,&#39;content&#39;:content,&#39;comments&#39;:comments&#125;</span><br><span class="line">    res.append(tmp)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>保存信息</strong></p>
<ol>
<li><p>json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">json_str &#x3D; json.dumps(res)</span><br><span class="line">with open(filename+&#39;.json&#39;, &#39;w&#39;,encoding&#x3D;&#39;utf-8&#39;) as json_file:</span><br><span class="line">	json_file.write(json_str)</span><br></pre></td></tr></table></figure>
</li>
<li><p>csv</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df &#x3D; pd.DataFrame(res)</span><br><span class="line">df.to_csv(filename+&#39;.csv&#39;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cwd&#x3D;os.getcwd()</span><br><span class="line">with open(cwd++filename+&#39;.txt&#39;,&#39;a&#39;,encoding&#x3D;&#39;utf-8&#39;)as f:</span><br><span class="line">    for i,r in enumerate(res):</span><br><span class="line">        f.write(f&#39;第&#123;i+1&#125;个回答&#39;.center(30,&#39;&#x3D;&#39;))</span><br><span class="line">        f.write(&#39;\n&#39;)</span><br><span class="line">        f.write(f&#39;author:&#123;r[&quot;author&quot;]&#125;\n&#39;)</span><br><span class="line">        f.write(f&#39;content:&#123;r[&quot;content&quot;]&#125;\n&#39;)</span><br><span class="line">        f.write(f&#39;comments:\n&#123;r[&quot;comments&quot;]&#125;\n&#39;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据库</p>
<blockquote>
<p>通过pymysql或pymongo保存到数据库中，在此便不再多说了</p>
</blockquote>
</li>
</ol>
</li>
<li><p><strong>优化</strong></p>
<blockquote>
<p>通过selenium能够省力地爬取信息，但也会导致爬取速度的缓慢（个人理解是因为爬取速度要受网页加载速度的影响）</p>
<p>为了更快速地爬取信息，可以采取多线程或多进程的爬取方式，以及更高级的分布式爬取技巧</p>
</blockquote>
</li>
<li><p><strong>结语</strong></p>
<blockquote>
<p>不知道大家在爬取之前，是否注意到知乎遵循了robots协议（没有关注过的可以点击这个网址:<a href="https://www.zhihu.com/robots.txt" target="_blank" rel="noopener">https://www.zhihu.com/robots.txt</a>)</p>
<p>为了不给网站的管理员带来麻烦，希望大家在爬取的时候能尽量遵循robots协议；若在学习过程中在不可避免地无法遵循robots协议，也尽量维持爬虫爬取频率与人类正常访问频率相当，不过多占用服务器资源</p>
</blockquote>
</li>
</ol>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><blockquote>
<p>技术是无私的，非常不舍得把我这个实战代码分享了出去，毕竟以我的爬虫技术，编写这么个知乎爬虫实战的代码还是很费劲的，花了很多心血，也踩了很多坑</p>
<p>希望大家能够多多支持大可，有什么问题都可以提交，我也会及时为大家解决。最后也欢迎大家光临我的小站 <a href="https://cheungducknew.github.io/" target="_blank" rel="noopener">https://cheungducknew.github.io/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>selenium</tag>
        <tag>爬虫</tag>
        <tag>知乎</tag>
      </tags>
  </entry>
  <entry>
    <title>2021网易笔试(8.21)</title>
    <url>/posts/c775612/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h1><p><strong>数组中两个元素和小于等于M的组合数</strong></p>
<blockquote>
<p>对于一个整型数组，里面任何两个元素相加，小于等于M的组合有多少种?</p>
<p>如果有符合的，输出组合对数？没有，输出0；</p>
</blockquote>
<p><strong>输入：</strong></p>
<blockquote>
<p>输入有2行，第1行为int整型数组，第二行为M值，且M也为int</p>
<p>比如：</p>
<p>7 -1 -1</p>
<p>9</p>
<p>表示数组为[7,-1,-1]，M为9</p>
</blockquote>
<p><strong>输出：</strong></p>
<blockquote>
<p>3</p>
<p>解释：（7，-1）、（7，-1）、（-1，-1）共3种</p>
<p>不同位置相同的元素值，可以组成不同的组合</p>
</blockquote>
<p><strong>解法1：</strong></p>
<blockquote>
<p>直接暴力，O(n^2)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">force</span><span class="params">()</span>:</span></span><br><span class="line">    nums=list(map(int,input().split(<span class="string">' '</span>)))</span><br><span class="line">    M=int(input())</span><br><span class="line"></span><br><span class="line">    n=len(nums)</span><br><span class="line">    res=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,n):</span><br><span class="line">            <span class="keyword">if</span>(nums[i]+nums[j]&lt;=M):res+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>



<p><strong>解法2：</strong></p>
<blockquote>
<p>先降序排列，在一次遍历的时候，二分查找M-n在数组中的位置；</p>
<p>写了一半，有时间补上</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">()</span>:</span></span><br><span class="line">    nums=list(map(int,input().split(<span class="string">' '</span>)))</span><br><span class="line">    M=int(input())</span><br><span class="line">    nums.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">        pos=bisect.bisect(nums,M-n)</span><br><span class="line">        print(pos)</span><br></pre></td></tr></table></figure>





<h1 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h1><p><strong>计算K位</strong></p>
<blockquote>
<p>给你两个正整数n和K，其中1&lt;=n&lt;=26，字符串Sn的形成规则如下：</p>
<p>Li表示26个字符a-z，依次是</p>
<p>L1=’a’</p>
<p>L2=’b’</p>
<p>……</p>
<p>L26=’z’</p>
</blockquote>
<blockquote>
<p>S1=’a’</p>
<p>当i&gt;1时，Si=S(i-1) + Li + reverse(invert(S(i-1) ))</p>
<p>其中 + 表示字符串的连接，reverse(x)为反转x，invert(x)为翻转x中的每一位，如’a’ 翻转为’z’, ‘b’翻转为 ‘y’ …… ‘z’翻转为 ‘a’</p>
</blockquote>
<blockquote>
<p>由此有</p>
<p>S1=’a’</p>
<p>S2=’abz’</p>
<p>S3=’abzcayz’</p>
<p>S4=’abzcayzdabzxayz’</p>
</blockquote>
<p><strong>输入：</strong></p>
<blockquote>
<p>输入有1行，为n和k</p>
<p>如：</p>
<p>3,1</p>
</blockquote>
<p><strong>输出：</strong></p>
<blockquote>
<p>a</p>
<p>解释：S3的第1个字符为a</p>
</blockquote>
<p><strong>解法1：</strong></p>
<blockquote>
<p>正常思路，因为存在递推关系，直接打表用dp[i]存字符串Si</p>
<p>按 Si=S(i-1) + Li + reverse(invert(S(i-1) )) 递推式 直接推出所有S串</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n,k=map(int,input().split(<span class="string">','</span>))</span><br><span class="line"></span><br><span class="line">dic=&#123;i:chr(i+ord(<span class="string">'a'</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>)&#125;</span><br><span class="line">inv=&#123;dic[i]:dic[<span class="number">25</span>-i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invert</span><span class="params">(s)</span>:</span></span><br><span class="line">    res=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        res+=inv[i]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">dp=[<span class="literal">None</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">27</span>)]</span><br><span class="line">dp[<span class="number">1</span>]=<span class="string">'a'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">    dp[i]=dp[i<span class="number">-1</span>]+dic[i<span class="number">-1</span>]+invert(dp[i<span class="number">-1</span>])[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">print(dp[n][k<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>



<p><strong>解法2：</strong></p>
<blockquote>
<p>观察得出的Si串，可以发现 reverse(invert(S(i-1) )) 与 S(i-1) 仅有中间的一个字符不同，且前者中间字符为后者中间字符的翻转</p>
<p>由此更改invert函数，进一步降低时间复杂度</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n,k=map(int,input().split(<span class="string">','</span>))</span><br><span class="line"></span><br><span class="line">dic=&#123;i:chr(i+ord(<span class="string">'a'</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>)&#125;</span><br><span class="line">inv=&#123;dic[i]:dic[<span class="number">25</span>-i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invert</span><span class="params">(s)</span>:</span></span><br><span class="line">    res=list(s[:])</span><br><span class="line">    pos=int(len(s)/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> pos&gt;=<span class="number">0</span>:</span><br><span class="line">        tmp=res[pos]</span><br><span class="line">        res[pos]=inv[tmp]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(res)</span><br><span class="line"></span><br><span class="line">dp=[<span class="literal">None</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">27</span>)]</span><br><span class="line">dp[<span class="number">1</span>]=<span class="string">'a'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">    dp[i]=dp[i<span class="number">-1</span>]+dic[i<span class="number">-1</span>]+invert(dp[i<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">print(dp[n][k<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>



<h1 id="补充知识："><a href="#补充知识：" class="headerlink" title="补充知识："></a>补充知识：</h1><p>bisect库是python中针对有序列表的一个模块，接收已排序列表作为参数。</p>
<p>其中包括：</p>
<ul>
<li>bisect.bisect(a,x)（默认等同于bisect.bisect_right())</li>
<li>bisect.bisect_left(a,x)</li>
<li>bisect.insort(a,x)</li>
<li>bisect.insort_right(a,x)</li>
<li>bisect.insort_left(a,x)</li>
</ul>
<p>(insort不要记成insert)</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>大厂真题</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>BeautifulSoup入门（一战CSDN）</title>
    <url>/posts/6c615eca/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="BeautifulSoup入门"><a href="#BeautifulSoup入门" class="headerlink" title="BeautifulSoup入门"></a>BeautifulSoup入门</h1><ol>
<li><p><strong>获取网页</strong></p>
<blockquote>
<p>导入库之后，首先利用requests库获取网页源码</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    headers=&#123;</span><br><span class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">'https://blog.csdn.net/JeronZhou'</span></span><br><span class="line">    r=requests.get(url,headers=headers)     <span class="comment"># 必须加 headers</span></span><br><span class="line">    r.encoding=r.apparent_encoding</span><br><span class="line">    r.raise_for_status()</span><br><span class="line"></span><br><span class="line">    text = r.text</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">	print(e)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>在利用requests获取内容的过程中，要注意以下几个点</strong></p>
<ol>
<li><p>构造请求头</p>
<p>如果不构造请求头直接访问url，将会显示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r=requests.get(<span class="string">"https://www.baidu.com/"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.requests.headers</span><br><span class="line">&#123;<span class="string">'User-Agent'</span>: <span class="string">'python-requests/2.23.0'</span>, <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>, <span class="string">'Accept'</span>: <span class="string">'*/*'</span>, <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设定编码</p>
<blockquote>
<p><code>r.encoding</code>是从header中猜测的响应内容编码（一般是charset）</p>
<p>而 <code>r.apparent_encoding</code>是从内容中分析得到</p>
</blockquote>
<blockquote>
<p>区别如下：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.encoding</span><br><span class="line"><span class="string">'ISO-8859-1'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.apparent_encoding</span><br><span class="line"><span class="string">'utf-8'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>状态码</p>
<p>可以通过<code>r.status_code</code>确认状态码是否为200</p>
<p>或者通过<code>r.raise_for_status()</code>抛出<code>HTTPError</code></p>
</li>
</ol>
</blockquote>
</li>
<li><p><strong>解析内容</strong></p>
<blockquote>
<ol>
<li>利用<code>BeautifulSoup</code>类“煲一锅汤”</li>
<li>注意<code>html.parser</code>是bs4自带的解析器，也可以导入<code>lxml</code>库之后换成<code>soup=BeautifulSoup(text,&#39;lxml&#39;)</code></li>
<li>利用正则表达式匹配标签（tag）</li>
<li>需要指定class属性时，避免与python保留字冲突，应使用bs4自带关键字<code>class_</code></li>
</ol>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup=BeautifulSoup(text,<span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line">img=soup.find_all(re.compile(<span class="string">r'img'</span>),src=re.compile(<span class="string">r'profile'</span>))</span><br><span class="line">username=soup.find_all(re.compile(<span class="string">r'h1'</span>),class_=<span class="string">"user-profile-title"</span>)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h1 id="结语与robots协议"><a href="#结语与robots协议" class="headerlink" title="结语与robots协议"></a><strong>结语与robots协议</strong></h1><blockquote>
<ul>
<li><p>不知道大家在爬取之前，是否注意到CSDN遵循了robots协议（没有关注过的可以点击这个网址:<a href="https://www.csdn.net/robots.txt" target="_blank" rel="noopener">https://www.csdn.net/robots.txt</a>)</p>
</li>
<li><p>为了不给网站的管理员带来麻烦，希望大家在爬取的时候能尽量遵循robots协议；若在学习过程中在不可避免地无法遵循robots协议，也尽量维持爬虫爬取频率与人类正常访问频率相当，不过多占用服务器资源</p>
</li>
<li><p>另外也希望大家能够多多支持大可，有什么问题都可以提交，我也会及时为大家解决。最后也欢迎大家光临我的小站 <a href="https://cheungducknew.github.io/" target="_blank" rel="noopener">https://cheungducknew.github.io/</a></p>
</li>
</ul>
</blockquote>
<p>本教程仅供<strong>学习</strong>，若被他人用于<strong>其他</strong>用途，<strong>与本人无关</strong></p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>CSDN</tag>
      </tags>
  </entry>
  <entry>
    <title>2021阿里笔试(8.16)</title>
    <url>/posts/4234074d/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h1><p><strong>题目描述</strong></p>
<blockquote>
<p>牛牛刚学完C语言，他现在想自己写一个编译器，这个编译器的功能很简单：计算出一行变量定义代码中所有变量占用的字节数。</p>
<p>现在已知：</p>
<p>——单个int变量占用4字节</p>
<p>——单个long变量占用8字节</p>
<p>——单个char变量占用1字节</p>
<p>如，对于一行代码：</p>
<p>int a[20] [20],b,xyz;</p>
<p>占用的字节数为（20 ×20+1+1）×4=1608</p>
</blockquote>
<p><strong>输入描述</strong></p>
<blockquote>
<p>输入一行字符串S，S.length&lt;=200，S的格式为：（int | long | char) + 空格（一个）+变量1，变量2，……，变量k;</p>
<p>输入的S保证不会存在语法错误。</p>
</blockquote>
<p><strong>输出描述</strong></p>
<blockquote>
<p>返回字节数</p>
</blockquote>
<p><strong>解题</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">line=list(input().split())</span><br><span class="line">str=list(line[<span class="number">1</span>].split(<span class="string">','</span>))</span><br><span class="line">mul=&#123;<span class="string">'long'</span>:<span class="number">8</span>,<span class="string">'int'</span>:<span class="number">4</span>,<span class="string">'char'</span>:<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal</span><span class="params">(str)</span>:</span></span><br><span class="line">    res1,res2=[],[]</span><br><span class="line">    <span class="keyword">for</span> i,s <span class="keyword">in</span> enumerate(str):</span><br><span class="line">        <span class="keyword">if</span> s==<span class="string">'['</span>:</span><br><span class="line">            res1.append(i)</span><br><span class="line">        <span class="keyword">elif</span> s==<span class="string">']'</span>:</span><br><span class="line">            res2.append(i)</span><br><span class="line"></span><br><span class="line">    res=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> x,y <span class="keyword">in</span> zip(res1,res2):</span><br><span class="line">        res*=int(str[x+<span class="number">1</span>:y])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">cnt=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> str:</span><br><span class="line">    <span class="keyword">if</span> s.find(<span class="string">'['</span>)!=<span class="number">-1</span>:</span><br><span class="line">        cnt+=cal(s)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cnt+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">res=mul[line[<span class="number">0</span>]]*cnt</span><br><span class="line"></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>





<h1 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h1><blockquote>
<p>部队结盟，题目太长了懒得写，用并查集做</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n,nums)</span>:</span></span><br><span class="line">        self.uf = [<span class="number">-1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n + <span class="number">1</span>)]</span><br><span class="line">        self.sig = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(n+<span class="number">1</span>)]  <span class="comment">#最小编号</span></span><br><span class="line">        self.pop=[n <span class="keyword">for</span> n <span class="keyword">in</span> nums]  <span class="comment">#人数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, p)</span>:</span></span><br><span class="line">         <span class="keyword">if</span> self.uf[p] &lt; <span class="number">0</span>:</span><br><span class="line">             <span class="keyword">return</span> p</span><br><span class="line">         self.uf[p] = self.find(self.uf[p])</span><br><span class="line">         <span class="keyword">return</span> self.uf[p]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_sig</span><span class="params">(self,p)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.find(p)==p:</span><br><span class="line">            <span class="keyword">return</span> self.sig[p]+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.sig[self.find(p)]+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_pop</span><span class="params">(self,p)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.find(p)==p:</span><br><span class="line">            <span class="keyword">return</span> self.pop[p]</span><br><span class="line">        <span class="keyword">return</span> self.pop[self.find(p)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, p, q)</span>:</span></span><br><span class="line">        proot = self.find(p)</span><br><span class="line">        qroot = self.find(q)</span><br><span class="line">        <span class="keyword">if</span> proot == qroot:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> self.uf[proot] &gt; self.uf[qroot]:</span><br><span class="line">            self.uf[qroot] += self.uf[proot]</span><br><span class="line">            self.uf[proot] = qroot</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.uf[proot] += self.uf[qroot]</span><br><span class="line">            self.uf[qroot] = proot</span><br><span class="line">        self.sig[self.find(p)]=min(p,q)</span><br><span class="line">        self.pop[self.find(p)]=self.find_pop(p)+self.find_pop(q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_connected</span><span class="params">(self, p, q)</span>:</span></span><br><span class="line">         <span class="keyword">return</span> self.find(p) == self.find(q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n,m=map(int,input().split())</span><br><span class="line">nums=[int(i) <span class="keyword">for</span> i <span class="keyword">in</span> input().split()]</span><br><span class="line">uf=UnionFind(n,nums)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(m):</span><br><span class="line">    t,a,b = map(int,input().split())</span><br><span class="line">    a-=<span class="number">1</span></span><br><span class="line">    b-=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> t==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> uf.is_connected(a,b):</span><br><span class="line">            money = (uf.find_sig(a)+uf.find_sig(b)) ^ abs(uf.find_pop(a) - uf.find_pop(b))</span><br><span class="line">            uf.union(a,b)</span><br><span class="line"></span><br><span class="line">            print(money)</span><br><span class="line">    <span class="keyword">if</span> t==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> uf.is_connected(a,b):</span><br><span class="line">            print(<span class="string">'YES'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'NO'</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>大厂真题</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣建信金融科技专场竞赛</title>
    <url>/posts/ed457817/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>两题选手也能进前100，hhh</strong></p>
<h1 id="建信01-间隔删除链表结点"><a href="#建信01-间隔删除链表结点" class="headerlink" title="建信01. 间隔删除链表结点"></a>建信01. 间隔删除链表结点</h1><blockquote>
<p>给你一个链表的头结点 <code>head</code>，每隔一个结点删除另一个结点（要求保留头结点）。<br>请返回最终链表的头结点。</p>
<p><strong>示例 1：</strong></p>
<blockquote>
<p>输入：<code>head = [1,2,3,4]</code></p>
<p>输出: <code>[1,3]</code></p>
<p>解释：<br>蓝色结点为删除的结点<br><img src="https://pic.leetcode-cn.com/1622545030-DwtsVD-image.png" alt="image.png"></p>
</blockquote>
<p><strong>示例 2：</strong></p>
<blockquote>
<p>输入：<code>head = [5,1,8,6,1]</code></p>
<p>输出: <code>[5,8,1]</code></p>
</blockquote>
<p><strong>提示：</strong></p>
<ul>
<li>链表中结点的数目在<code>[1, 5000]</code>范围内。</li>
<li><code>1 &lt;= Node.val &lt;= 10000</code></li>
</ul>
</blockquote>
<p>速通</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Definition for singly-linked list.</span><br><span class="line"># class ListNode:</span><br><span class="line">#     def __init__(self, x):</span><br><span class="line">#         self.val &#x3D; x</span><br><span class="line">#         self.next &#x3D; None</span><br><span class="line">class Solution:</span><br><span class="line">    def deleteListNode(self, head: ListNode) -&gt; ListNode:</span><br><span class="line">        cur&#x3D;head</span><br><span class="line">        while cur and cur.next:</span><br><span class="line">            cur.next&#x3D;cur.next.next</span><br><span class="line">            cur&#x3D;cur.next</span><br><span class="line">        return head</span><br></pre></td></tr></table></figure>





<h1 id="建信02-柱状图分析"><a href="#建信02-柱状图分析" class="headerlink" title="建信02. 柱状图分析"></a>建信02. 柱状图分析</h1><blockquote>
<p>某柱状图上共有 N 个柱形，数组 <code>heights</code> 中按照排列顺序记录了每个柱形的高度。假定任选 <code>cnt</code> 个柱形可组成一个柱形组，请在所有可能的柱形组中，找出最大高度与最小高度的差值为最小的柱形组，按高度升序返回该柱形组。若存在多个柱形组满足条件，则返回第一个元素最小的柱形组。</p>
<p><strong>示例 1：</strong></p>
<blockquote>
<p>输入：<code>heights = [3,2,7,6,1,8], cnt = 3</code></p>
<p>输出：<code>[1,2,3]</code></p>
<p>解释：[1,2,3] 与 [6,7,8] 都符合在所有的柱形组中，最大高度与最小高度的差值为最小的条件，选择第一个元素最小的 [1,2,3] 返回。</p>
</blockquote>
<p><strong>示例 2：</strong></p>
<blockquote>
<p>输入：<code>heights = [4,6,1,8,4,10], cnt = 4</code></p>
<p>输出：<code>[4,4,6,8]</code></p>
<p>解释：柱形组 [4,4,6,8] 满足最大高度与最小高度的差值为最小条件。</p>
</blockquote>
<p><strong>提示：</strong></p>
<ul>
<li><code>2 &lt;= cnt &lt; heights.length &lt;= 10^5</code></li>
<li><code>0 &lt;= heights[i] &lt;= 10^6</code></li>
</ul>
</blockquote>
<p>定长滑动窗口，easy</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def analysisHistogram(self, heights: List[int], cnt: int) -&gt; List[int]:</span><br><span class="line">        heights.sort()</span><br><span class="line">        n&#x3D;len(heights)</span><br><span class="line">        i,j&#x3D;0,cnt-1</span><br><span class="line">        res&#x3D;(0,float(&#39;inf&#39;))</span><br><span class="line">        while j&lt;n:</span><br><span class="line">            tmp&#x3D;heights[j]-heights[i]</span><br><span class="line">            if res[1]&gt;tmp:</span><br><span class="line">                res&#x3D;(i,tmp)</span><br><span class="line">            i+&#x3D;1</span><br><span class="line">            j+&#x3D;1</span><br><span class="line">        idx&#x3D;res[0]</span><br><span class="line">        return heights[idx:idx+cnt]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>力扣</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS选择器</title>
    <url>/posts/b6981f1b/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><blockquote>
<p>CSS(Cascading Style Sheets) 美化样式</p>
<p>CSS通常称为CSS样式表或层叠样式表（级联样式表），主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。</p>
<p>CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。</p>
</blockquote>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol>
<li><p><strong>内部样式表</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">&lt;style type="text/CSS"&gt;</span><br><span class="line">    选择器 &#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>行内式（内联样式）</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;标签名 style="属性1:属性值1; 属性2:属性值2; 属性3:属性值3;"&gt; 内容 &lt;/标签名&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>外部样式表（外链式）</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">  &lt;link href="CSS文件的路径"  rel="stylesheet" /&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<blockquote>
<p>href：定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。<br>type：定义所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。<br>rel：定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。</p>
</blockquote>
</li>
</ol>
<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><ol>
<li><p><strong>标签/元素选择器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标签名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;  </span><br><span class="line">元素名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>类选择器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.类名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>多类名选择器</strong></p>
<blockquote>
<p>我们可以给标签指定多个类名，从而达到更多的选择目的</p>
</blockquote>
</li>
<li><p><strong>id选择器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#id名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>通配符选择器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* &#123; 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>复杂选择器</strong></p>
<blockquote>
<p>在爬虫的学习中，对复杂选择器不做要求，了解即可</p>
</blockquote>
<ol>
<li>交集选择器</li>
<li>并集选择器</li>
<li>后代选择器</li>
<li>子元素选择器</li>
<li>伪类选择器</li>
<li>结构(位置)伪类选择器（CSS3)</li>
<li>目标伪类选择器(CSS3)</li>
<li>伪元素选择器（CSS3)</li>
<li>属性选择器</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣第 255 场周赛</title>
    <url>/posts/c67c1f49/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="5850-找出数组的最大公约数"><a href="#5850-找出数组的最大公约数" class="headerlink" title="5850. 找出数组的最大公约数"></a><a href="https://leetcode-cn.com/problems/find-greatest-common-divisor-of-array/" target="_blank" rel="noopener">5850. 找出数组的最大公约数</a></h1><blockquote>
<p>给你一个整数数组 nums ，返回数组中最大数和最小数的 最大公约数 。</p>
<p>两个数的 最大公约数 是能够被两个数整除的最大正整数。</p>
</blockquote>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [2,5,6,9,10]</span><br><span class="line">输出：2</span><br><span class="line">解释：</span><br><span class="line">nums 中最小的数是 2</span><br><span class="line">nums 中最大的数是 10</span><br><span class="line">2 和 10 的最大公约数是 2</span><br></pre></td></tr></table></figure>


<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [7,5,6,8,3]</span><br><span class="line">输出：1</span><br><span class="line">解释：</span><br><span class="line">nums 中最小的数是 3</span><br><span class="line">nums 中最大的数是 8</span><br><span class="line">3 和 8 的最大公约数是 1</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [3,3]</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">nums 中最小的数是 3</span><br><span class="line">nums 中最大的数是 3</span><br><span class="line">3 和 3 的最大公约数是 3</span><br></pre></td></tr></table></figure>

<p><strong>题解：</strong></p>
<p>不用多说。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findGCD</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(x, y)</span>:</span></span><br><span class="line">            <span class="keyword">while</span> y:</span><br><span class="line">                x,y=y,x%y</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> gcd(max(nums),min(nums))</span><br></pre></td></tr></table></figure>



<h1 id="5851-找出不同的二进制字符串"><a href="#5851-找出不同的二进制字符串" class="headerlink" title="5851. 找出不同的二进制字符串"></a><a href="https://leetcode-cn.com/problems/find-unique-binary-string/" target="_blank" rel="noopener">5851. 找出不同的二进制字符串</a></h1><blockquote>
<p>给你一个字符串数组 nums ，该数组由 n 个 互不相同 的二进制字符串组成，且每个字符串长度都是 n 。请你找出并返回一个长度为 n 且 没有出现 在 nums 中的二进制字符串。如果存在多种答案，只需返回 任意一个 即可。</p>
</blockquote>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [&quot;01&quot;,&quot;10&quot;]</span><br><span class="line">输出：&quot;11&quot;</span><br><span class="line">解释：&quot;11&quot; 没有出现在 nums 中。&quot;00&quot; 也是正确答案。</span><br></pre></td></tr></table></figure>


<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [&quot;00&quot;,&quot;01&quot;]</span><br><span class="line">输出：&quot;11&quot;</span><br><span class="line">解释：&quot;11&quot; 没有出现在 nums 中。&quot;10&quot; 也是正确答案。</span><br></pre></td></tr></table></figure>


<p><strong>示例 3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [&quot;111&quot;,&quot;011&quot;,&quot;001&quot;]</span><br><span class="line">输出：&quot;101&quot;</span><br><span class="line">解释：&quot;101&quot; 没有出现在 nums 中。&quot;000&quot;、&quot;010&quot;、&quot;100&quot;、&quot;110&quot; 也是正确答案。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>n == nums.length</li>
<li>1 &lt;= n &lt;= 16</li>
<li>nums[i].length == n</li>
<li>nums[i] 为 ‘0’ 或 ‘1’</li>
</ul>
<p><strong>题解:</strong></p>
<blockquote>
<p>先转化成整数，标记；再从小到大到找。</p>
</blockquote>
<blockquote>
<p>这样写实际上空间复杂度非常大，但还是过了。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findDifferentBinaryString</span><span class="params">(self, nums: List[str])</span> -&gt; str:</span></span><br><span class="line">        n=len(nums)</span><br><span class="line">        res=[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">2</span>**n)]</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">            tmp=int(n,<span class="number">2</span>)</span><br><span class="line">            res[tmp]=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i,r <span class="keyword">in</span> enumerate(res):</span><br><span class="line">            <span class="keyword">if</span> r==<span class="number">0</span>:</span><br><span class="line">                res=bin(i)[<span class="number">2</span>:]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        cha=len(nums)-len(res)</span><br><span class="line">        ans=<span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(cha):</span><br><span class="line">            ans+=<span class="string">'0'</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans+res</span><br></pre></td></tr></table></figure>



<h1 id="5852-最小化目标值与所选元素的差"><a href="#5852-最小化目标值与所选元素的差" class="headerlink" title="5852. 最小化目标值与所选元素的差"></a><a href="https://leetcode-cn.com/problems/minimize-the-difference-between-target-and-chosen-elements/" target="_blank" rel="noopener">5852. 最小化目标值与所选元素的差</a></h1><blockquote>
<p>给你一个大小为 m x n 的整数矩阵 mat 和一个整数 target 。</p>
<p>从矩阵的 每一行 中选择一个整数，你的目标是 最小化 所有选中元素之 和 与目标值 target 的 绝对差 。</p>
<p>返回 最小的绝对差 。</p>
<p>a 和 b 两数字的 绝对差 是 a - b 的绝对值。</p>
</blockquote>
<p><strong>示例 1：</strong></p>
<ul>
<li><pre><code>输入：mat = [[1,2,3],[4,5,6],[7,8,9]], target = 13
输出：0
解释：一种可能的最优选择方案是：

- 第一行选出 1
- 第二行选出 5
- 第三行选出 7
  所选元素的和是 13 ，等于目标值，所以绝对差是 0 。
  示例 2：
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">**示例 2：**</span><br><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></table></figure>
输入：mat = [[1],[2],[3]], target = 100
输出：94
解释：唯一一种选择方案是：

- 第一行选出 1
- 第二行选出 2
- 第三行选出 3
  所选元素的和是 6 ，绝对差是 94 。
  示例 3：
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">**示例 3：**</span><br></pre></td></tr></table></figure>
输入：mat = [[1,2,9,8,7]], target = 6
输出：1
解释：最优的选择方案是选出第一行的 7 。
绝对差是 1 。
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**提示：**</span><br><span class="line"></span><br><span class="line">- m &#x3D;&#x3D; mat.length</span><br><span class="line">- n &#x3D;&#x3D; mat[i].length</span><br><span class="line">- 1 &lt;&#x3D; m, n &lt;&#x3D; 70</span><br><span class="line">- 1 &lt;&#x3D; mat[i][j] &lt;&#x3D; 70</span><br><span class="line">- 1 &lt;&#x3D; target &lt;&#x3D; 800</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**解法1：**</span><br><span class="line"></span><br><span class="line">&gt;暴力(5000ms，15MB都给过。。)</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">class Solution:</span><br><span class="line">    def minimizeTheDifference(self, mat: List[List[int]], target: int) -&gt; int:</span><br><span class="line">        res&#x3D;&#123;0&#125;</span><br><span class="line">        for row in mat:</span><br><span class="line">            res&#x3D;&#123;x+v for x in res for v in row&#125;</span><br><span class="line">        res&#x3D;sorted(list(res))</span><br><span class="line"></span><br><span class="line">        if target&lt;&#x3D;res[0]:</span><br><span class="line">            return res[0]-target</span><br><span class="line">        if target&gt;&#x3D;res[-1]:</span><br><span class="line">            return target-res[-1]</span><br><span class="line">        </span><br><span class="line">        pos&#x3D;bisect.bisect_left(res,target)</span><br><span class="line">        return min(res[pos] - target, target - res[pos - 1])</span><br></pre></td></tr></table></figure>






</code></pre></li>
</ul>
<p><strong>解法2:</strong></p>
<blockquote>
<p>分组背包</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">待更</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>算法</category>
        <category>力扣</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣第 265 场周赛</title>
    <url>/posts/b1e2cdb9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="5914-值相等的最小索引"><a href="#5914-值相等的最小索引" class="headerlink" title="5914. 值相等的最小索引"></a><a href="https://leetcode-cn.com/problems/smallest-index-with-equal-value/" target="_blank" rel="noopener">5914. 值相等的最小索引</a></h1><p>送分题，数据量也小，才100</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def smallestEqual(self, nums: List[int]) -&gt; int:</span><br><span class="line">        for i,n in enumerate(nums):</span><br><span class="line">            if i%10&#x3D;&#x3D;n:return i</span><br><span class="line">        return -1</span><br></pre></td></tr></table></figure>

<p><strong>一行：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def smallestEqual(self, nums: List[int]) -&gt; int:</span><br><span class="line">        return ([i for i,n in enumerate(nums) if i%10&#x3D;&#x3D;n]+[-1])[0]</span><br></pre></td></tr></table></figure>





<h1 id="5915-找出临界点之间的最小和最大距离"><a href="#5915-找出临界点之间的最小和最大距离" class="headerlink" title="5915. 找出临界点之间的最小和最大距离"></a><a href="https://leetcode-cn.com/problems/find-the-minimum-and-maximum-number-of-nodes-between-critical-points/" target="_blank" rel="noopener">5915. 找出临界点之间的最小和最大距离</a></h1><p>连续记录3个结点，为临界点时记录位置(cnt)，最后再找一下距离</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Definition for singly-linked list.</span><br><span class="line"># class ListNode:</span><br><span class="line">#     def __init__(self, val&#x3D;0, next&#x3D;None):</span><br><span class="line">#         self.val &#x3D; val</span><br><span class="line">#         self.next &#x3D; next</span><br><span class="line">class Solution:</span><br><span class="line">    def nodesBetweenCriticalPoints(self, head: Optional[ListNode]) -&gt; List[int]:</span><br><span class="line">        if not head.next.next:return [-1,-1]</span><br><span class="line">        a,b,c&#x3D;head,head.next,head.next.next</span><br><span class="line">        res&#x3D;[]</span><br><span class="line">        cnt&#x3D;1</span><br><span class="line">        while c:</span><br><span class="line">            if a.val&lt;b.val and c.val&lt;b.val:res.append(cnt)</span><br><span class="line">            if a.val&gt;b.val and c.val&gt;b.val:res.append(cnt)</span><br><span class="line">            a,b,c&#x3D;b,c,c.next</span><br><span class="line">            cnt+&#x3D;1</span><br><span class="line">            </span><br><span class="line">        n&#x3D;len(res)</span><br><span class="line">        if n&gt;&#x3D;2:</span><br><span class="line">            m2&#x3D;max(res)-min(res)</span><br><span class="line">            m1&#x3D;float(&#39;inf&#39;)</span><br><span class="line">            for i in range(1,n):</span><br><span class="line">                m1&#x3D;min(m1,res[i]-res[i-1])</span><br><span class="line">            return [m1,m2]</span><br><span class="line">        else:</span><br><span class="line">            return [-1,-1]</span><br></pre></td></tr></table></figure>





<h1 id="5916-转化数字的最小运算数"><a href="#5916-转化数字的最小运算数" class="headerlink" title="5916. 转化数字的最小运算数"></a><a href="https://leetcode-cn.com/problems/minimum-operations-to-convert-number/" target="_blank" rel="noopener">5916. 转化数字的最小运算数</a></h1><p>bfs，有3个注意点</p>
<ul>
<li>op运算用lambda生成函数+列表存储</li>
<li>deque</li>
<li>vis</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def minimumOperations(self, nums: List[int], start: int, goal: int) -&gt; int:</span><br><span class="line">        op1&#x3D;lambda x,y:x+y</span><br><span class="line">        op2&#x3D;lambda x,y:x-y</span><br><span class="line">        op3&#x3D;lambda x,y:x^y</span><br><span class="line">        ops&#x3D;[op1,op2,op3]</span><br><span class="line">        </span><br><span class="line">        q&#x3D;deque([(start,0)])</span><br><span class="line">        vis&#x3D;[0]*1001</span><br><span class="line">        vis[start]&#x3D;1</span><br><span class="line">        while q:</span><br><span class="line">            x,step&#x3D;q.popleft()</span><br><span class="line">            for n in nums:</span><br><span class="line">                for op in ops:</span><br><span class="line">                    nx&#x3D;op(x,n)</span><br><span class="line">                    if nx&#x3D;&#x3D;goal:</span><br><span class="line">                        return step+1</span><br><span class="line">                    if 0&lt;&#x3D;nx&lt;&#x3D;1000 and not vis[nx]:</span><br><span class="line">                        vis[nx]&#x3D;1</span><br><span class="line">                        q.append((nx,step+1))</span><br><span class="line">        return -1</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>力扣</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法之前缀和</title>
    <url>/posts/b1a30856/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="生成前缀和数组"><a href="#生成前缀和数组" class="headerlink" title="生成前缀和数组"></a>生成前缀和数组</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nums&#x3D;[1,3,5,7,9]</span><br><span class="line">pre&#x3D;[0]</span><br><span class="line"></span><br><span class="line">for n in nums:</span><br><span class="line">    pre.append(pre[-1]+n)</span><br></pre></td></tr></table></figure>

<p>也可以利用<strong>itertools.accumulate</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from itertools import accumulate</span><br><span class="line">nums&#x3D;[1,3,5,7,9]</span><br><span class="line"></span><br><span class="line">pre&#x3D;list(accumulate([0]+nums))</span><br></pre></td></tr></table></figure>



<h1 id="计算区间的和"><a href="#计算区间的和" class="headerlink" title="计算区间的和"></a>计算区间的和</h1><blockquote>
<p>$\sum_{k=i}^j nums[k]$，即nums[i]+nums[i+1]+……+nums[j-1]+nums[j]</p>
</blockquote>
<p>根据定义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pre[j+1]&#x3D;nums[0]+……+nums[i]+nums[i+1]+……+nums[j]</span><br><span class="line"></span><br><span class="line">pre[i]&#x3D;nums[0]+……+nums[i-1]</span><br></pre></td></tr></table></figure>

<p>所以<code>sum(nums[i:j+1])=pre[j+1]-pre[i]</code>（O(1)的时间复杂度）</p>
<h1 id="前缀异或"><a href="#前缀异或" class="headerlink" title="前缀异或"></a>前缀异或</h1><ul>
<li><strong>生成前缀数组</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nums&#x3D;[1,3,5,7,9]</span><br><span class="line">pre&#x3D;[0]</span><br><span class="line"></span><br><span class="line">for n in nums:</span><br><span class="line">    pre.append(pre[-1]^n)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from itertools import accumulate</span><br><span class="line">import operator</span><br><span class="line">nums&#x3D;[1,3,5,7,9]</span><br><span class="line"></span><br><span class="line">pre&#x3D;list(accumulate([0]+nums,operator.xor))</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>使用</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pre[j+1]^pre[i]</span><br></pre></td></tr></table></figure>



<h1 id="前缀积"><a href="#前缀积" class="headerlink" title="前缀积"></a>前缀积</h1><ul>
<li><strong>生成前缀数组</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nums&#x3D;[1,3,5,7,9]</span><br><span class="line">pre&#x3D;[1]</span><br><span class="line"></span><br><span class="line">for n in nums:</span><br><span class="line">    pre.append(pre[-1]*n)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from itertools import accumulate</span><br><span class="line">import operator</span><br><span class="line">nums&#x3D;[1,3,5,7,9]</span><br><span class="line"></span><br><span class="line">pre&#x3D;list(accumulate([1]+nums,operator.mul))</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>使用</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pre[j+1]&#x2F;&#x2F;pre[i]</span><br></pre></td></tr></table></figure>



<h1 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pre[i][j]&#x3D;pre[i-1][j]+pre[i][j-1]-pre[i-1][j-1]+nums[i][j]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>刷题模板</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣第 262 场周赛</title>
    <url>/posts/98d9d83a/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="5894-至少在两个数组中出现的值"><a href="#5894-至少在两个数组中出现的值" class="headerlink" title="5894. 至少在两个数组中出现的值"></a><a href="https://leetcode-cn.com/problems/two-out-of-three/" target="_blank" rel="noopener">5894. 至少在两个数组中出现的值</a></h1><blockquote>
<p>数据量才100，直接暴力</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def twoOutOfThree(self, nums1: List[int], nums2: List[int], nums3: List[int]) -&gt; List[int]:</span><br><span class="line">        cnt1,cnt2,cnt3&#x3D;Counter(nums1),Counter(nums2),Counter(nums3)</span><br><span class="line">        seq&#x3D;set(nums1+nums2+nums3)</span><br><span class="line">        res&#x3D;[]</span><br><span class="line">        for s in seq:</span><br><span class="line">            if (cnt1[s]&gt;0)+(cnt2[s]&gt;0)+(cnt3[s]&gt;0)&gt;&#x3D;2:</span><br><span class="line">                res.append(s) </span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>



<h1 id="5895-获取单值网格的最小操作数"><a href="#5895-获取单值网格的最小操作数" class="headerlink" title="5895. 获取单值网格的最小操作数"></a><a href="https://leetcode-cn.com/problems/minimum-operations-to-make-a-uni-value-grid/" target="_blank" rel="noopener">5895. 获取单值网格的最小操作数</a></h1><blockquote>
<p>先转化成一维数组方便处理，找<strong>中位数</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def minOperations(self, grid: List[List[int]], x: int) -&gt; int:</span><br><span class="line">        seq&#x3D;[i for x in grid for i in x]</span><br><span class="line">        seq.sort()</span><br><span class="line">        n&#x3D;len(seq)</span><br><span class="line">        mid&#x3D;seq[n&#x2F;&#x2F;2]</span><br><span class="line">        res&#x3D;0</span><br><span class="line">        for s in seq:</span><br><span class="line">            if (mid-s)%x!&#x3D;0:</span><br><span class="line">                return -1</span><br><span class="line">            res+&#x3D;abs(mid-s)&#x2F;&#x2F;x</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>





<h1 id="5896-股票价格波动"><a href="#5896-股票价格波动" class="headerlink" title="5896. 股票价格波动"></a><a href="https://leetcode-cn.com/problems/stock-price-fluctuation/" target="_blank" rel="noopener">5896. 股票价格波动</a></h1><blockquote>
<p><a href="http://www.grantjenks.com/docs/sortedcontainers/" target="_blank" rel="noopener">SortedList，SortedDict</a>，红黑树，相当于Java里的<code>TreeSet</code>，不属于标准库，但力扣可以使用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from sortedcontainers import SortedList,SortedDict</span><br><span class="line">class StockPrice:</span><br><span class="line">·</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.time&#x3D;SortedDict()</span><br><span class="line">        self.price&#x3D;SortedList()</span><br><span class="line"></span><br><span class="line">    def update(self, timestamp: int, price: int) -&gt; None:</span><br><span class="line">        if timestamp in self.time:</span><br><span class="line">            tmp&#x3D;self.time[timestamp]</span><br><span class="line">            self.price.discard(tmp)</span><br><span class="line">        self.time[timestamp]&#x3D;price</span><br><span class="line">        self.price.add(price)</span><br><span class="line"></span><br><span class="line">    def current(self) -&gt; int:</span><br><span class="line">        tmp&#x3D;self.time.peekitem(-1)</span><br><span class="line">        return tmp[-1]</span><br><span class="line"></span><br><span class="line">    def maximum(self) -&gt; int:</span><br><span class="line">        return self.price[-1]</span><br><span class="line"></span><br><span class="line">    def minimum(self) -&gt; int:</span><br><span class="line">        return self.price[0]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Your StockPrice object will be instantiated and called as such:</span><br><span class="line"># obj &#x3D; StockPrice()</span><br><span class="line"># obj.update(timestamp,price)</span><br><span class="line"># param_2 &#x3D; obj.current()</span><br><span class="line"># param_3 &#x3D; obj.maximum()</span><br><span class="line"># param_4 &#x3D; obj.minimum()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>力扣</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣第 266 场周赛</title>
    <url>/posts/2800abb8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>差一点点AK，还是不够熟练</p>
<h1 id="5918-统计字符串中的元音子字符串"><a href="#5918-统计字符串中的元音子字符串" class="headerlink" title="5918. 统计字符串中的元音子字符串"></a><a href="https://leetcode-cn.com/problems/count-vowel-substrings-of-a-string/" target="_blank" rel="noopener">5918. 统计字符串中的元音子字符串</a></h1><p>看数据范围，暴力过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def countVowelSubstrings(self, word: str) -&gt; int:</span><br><span class="line">        res&#x3D;0</span><br><span class="line">        n&#x3D;len(word)</span><br><span class="line">        for a in range(n):</span><br><span class="line">            for b in range(a+5,n+1):</span><br><span class="line">                i&#x3D;word[a:b]</span><br><span class="line">                if any(x not in &#39;aeiou&#39; for x in i):continue</span><br><span class="line">                if &#39;a&#39; in i and &#39;e&#39; in i and &#39;i&#39; in i and &#39;o&#39; in i and &#39;u&#39; in i:</span><br><span class="line">                    res+&#x3D;1</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>



<h1 id="5919-所有子字符串中的元音"><a href="#5919-所有子字符串中的元音" class="headerlink" title="5919. 所有子字符串中的元音"></a><a href="https://leetcode-cn.com/problems/vowels-of-all-substrings/" target="_blank" rel="noopener">5919. 所有子字符串中的元音</a></h1><p>第一次考虑前缀和做，子字符串word[a:b]内的元音字符数为pre[b+1]-pre[a]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def countVowels(self, word: str) -&gt; int:</span><br><span class="line">        n&#x3D;len(word)</span><br><span class="line">        res&#x3D;0</span><br><span class="line">        dic&#x3D;[0]*n</span><br><span class="line">        for i in range(n):</span><br><span class="line">            if word[i] in (&#39;a&#39;,&#39;e&#39;,&#39;i&#39;,&#39;o&#39;,&#39;u&#39;):</span><br><span class="line">                dic[i]&#x3D;1</span><br><span class="line">        </span><br><span class="line">        pre&#x3D;[0,*accumulate(dic)]</span><br><span class="line"></span><br><span class="line">        for a in range(n):</span><br><span class="line">            for b in range(a,n):</span><br><span class="line">                res+&#x3D;pre[b+1]-pre[a]</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>

<p>果然超时， 找一下规律，可以发现pre[i]的个数为2*i-n</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def countVowels(self, word: str) -&gt; int:</span><br><span class="line">        n&#x3D;len(word)</span><br><span class="line">        res&#x3D;0</span><br><span class="line">        dic&#x3D;[0]*n</span><br><span class="line">        for i in range(n):</span><br><span class="line">            if word[i] in &#39;aeiou&#39;:</span><br><span class="line">                dic[i]&#x3D;1</span><br><span class="line">        </span><br><span class="line">        pre&#x3D;[0,*accumulate(dic)]</span><br><span class="line"></span><br><span class="line">        for i in range(n+1):</span><br><span class="line">            res+&#x3D;(2*i-n)*pre[i]</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>

<p>整理下变成<strong>python二行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def countVowels(self, word: str) -&gt; int:</span><br><span class="line">        pre&#x3D;[0,*accumulate([1 if word[i] in &#39;aeiou&#39; else 0  for i in range(len(word))])]</span><br><span class="line">        return sum((2*i-len(word))*pre[i] for i in range(len(word)+1))</span><br></pre></td></tr></table></figure>



<h1 id="5921-最大化一张图中的路径价值"><a href="#5921-最大化一张图中的路径价值" class="headerlink" title="5921. 最大化一张图中的路径价值"></a><a href="https://leetcode-cn.com/problems/maximum-path-quality-of-a-graph/" target="_blank" rel="noopener">5921. 最大化一张图中的路径价值</a></h1><p>这次的T4比较简单，看下数据范围：</p>
<ul>
<li><code>n == values.length</code></li>
<li><code>1 &lt;= n &lt;= 1000</code></li>
<li><code>10 &lt;= timej, maxTime &lt;= 100</code></li>
<li>每个节点 <strong>至多有四条</strong> 边</li>
</ul>
<p>直接暴搜+回溯</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def maximalPathQuality(self, values: List[int], edges: List[List[int]], maxTime: int) -&gt; int:</span><br><span class="line">        n&#x3D;len(values)</span><br><span class="line">        dic&#x3D;&#123;i:list() for i in range(n)&#125;</span><br><span class="line">        for e in edges:</span><br><span class="line">            a,b,c&#x3D;e</span><br><span class="line">            dic[a].append([b,c])</span><br><span class="line">            dic[b].append([a,c])</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        def dfs(cur,tc,res,nodes):</span><br><span class="line">            if tc&gt;maxTime:</span><br><span class="line">                return </span><br><span class="line">            </span><br><span class="line">            if cur&#x3D;&#x3D;0:</span><br><span class="line">                vc&#x3D;0</span><br><span class="line">                for i in set(nodes):</span><br><span class="line">                    vc+&#x3D;values[i]</span><br><span class="line">                res[0]&#x3D;max(res[0],vc)</span><br><span class="line">                    </span><br><span class="line">            </span><br><span class="line">            for x in dic[cur]:</span><br><span class="line">                nodes.append(x[0])</span><br><span class="line">                dfs(x[0],tc+x[1],res,nodes)</span><br><span class="line">                nodes.pop()</span><br><span class="line">        </span><br><span class="line">        res&#x3D;[0]</span><br><span class="line">        dfs(0,0,res,[0])</span><br><span class="line">        </span><br><span class="line">        return res[0]</span><br></pre></td></tr></table></figure>



<h1 id="5920-分配给商店的最多商品的最小值"><a href="#5920-分配给商店的最多商品的最小值" class="headerlink" title="5920. 分配给商店的最多商品的最小值"></a><a href="https://leetcode-cn.com/problems/minimized-maximum-of-products-distributed-to-any-store/" target="_blank" rel="noopener">5920. 分配给商店的最多商品的最小值</a></h1><p>最小化最大值问题，首先可见是贪心，其次可以注意到单调性，而后二分求解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def minimizedMaximum(self, n: int, quantities: List[int]) -&gt; int:</span><br><span class="line">        l,r&#x3D;1,max(quantities)</span><br><span class="line">        while l&lt;&#x3D;r:</span><br><span class="line">            mid&#x3D;l+(r-l&gt;&gt;1)</span><br><span class="line">            need&#x3D;sum(ceil(q&#x2F;mid) for q in quantities)</span><br><span class="line">            if need&gt;n:</span><br><span class="line">                l&#x3D;mid+1</span><br><span class="line">            elif need&lt;&#x3D;n:</span><br><span class="line">                r&#x3D;mid-1</span><br><span class="line">        return l</span><br></pre></td></tr></table></figure>





<h1 id="875-爱吃香蕉的珂珂"><a href="#875-爱吃香蕉的珂珂" class="headerlink" title="875. 爱吃香蕉的珂珂"></a><a href="https://leetcode-cn.com/problems/koko-eating-bananas/" target="_blank" rel="noopener">875. 爱吃香蕉的珂珂</a></h1><p>周赛P3换皮题，用来巩固下二分板子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def minEatingSpeed(self, piles: List[int], h: int) -&gt; int:</span><br><span class="line">        l,r&#x3D;1,max(piles)</span><br><span class="line">        while l&lt;&#x3D;r:</span><br><span class="line">            mid&#x3D;l+(r-l&gt;&gt;1)</span><br><span class="line">            need&#x3D;sum(ceil(p&#x2F;mid) for p in piles)</span><br><span class="line">            if need&gt;h:</span><br><span class="line">                l&#x3D;mid+1</span><br><span class="line">            elif need&lt;&#x3D;h:</span><br><span class="line">                r&#x3D;mid-1</span><br><span class="line">        return l</span><br></pre></td></tr></table></figure>



<h1 id="复盘总结"><a href="#复盘总结" class="headerlink" title="复盘总结"></a>复盘总结</h1><p>学习一下六弦爷的最短写法！</p>
<p>P1 <a href="https://leetcode-cn.com/circle/discuss/JXlHA8/" target="_blank" rel="noopener">统计字符串中的元音子字符串</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def countVowelSubstrings(self, word: str) -&gt; int:</span><br><span class="line">        return sum(set(word[i: j + 1]) &#x3D;&#x3D; set(&#39;aeiou&#39;) for i in range(len(word)) for j in range(i + 1, len(word)))</span><br></pre></td></tr></table></figure>

<p>P2 <a href="https://leetcode-cn.com/circle/discuss/JXlHA8/" target="_blank" rel="noopener">所有子字符串中的元音</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def countVowels(self, word: str) -&gt; int:</span><br><span class="line">        return sum((i + 1) * (len(word) - i) for i, c in enumerate(word) if c in &#39;aeiou&#39;)</span><br></pre></td></tr></table></figure>

<p>P3 <a href="https://leetcode-cn.com/circle/discuss/JXlHA8/" target="_blank" rel="noopener">分配给商店的最多商品的最小值</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def minimizedMaximum(self, n: int, Q: List[int]) -&gt; int:</span><br><span class="line">        class A:</span><br><span class="line">            def __getitem__(self, x):</span><br><span class="line">                return sum(q &#x2F;&#x2F; x + (1 if q % x else 0) for q in Q) &lt;&#x3D; n</span><br><span class="line">        return bisect_left(A(), True, 1, max(Q) + 1)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>力扣</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法之二分查找</title>
    <url>/posts/51f1febc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="普通二分"><a href="#普通二分" class="headerlink" title="普通二分"></a>普通二分</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(array,value)</span>:</span></span><br><span class="line">    <span class="string">""" 适用于无重复元素 """</span></span><br><span class="line">    left,right=<span class="number">0</span>,len(array)<span class="number">-1</span>    <span class="comment">#注意r=len-1，保证[l,r]闭区间均有值</span></span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right):          <span class="comment">#闭区间</span></span><br><span class="line">        mid=left+(right-left&gt;&gt;<span class="number">1</span>)<span class="comment">#注意括号</span></span><br><span class="line">        <span class="keyword">if</span> array[mid]==value:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> array[mid]&lt;value:</span><br><span class="line">            left=mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> array[mid]&gt;value:</span><br><span class="line">            right=mid<span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>  <span class="comment">#无</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(binary_search([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="number">1</span>))</span><br><span class="line">print(binary_search([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="number">2</span>))<span class="comment">#找到的位置不是边界</span></span><br><span class="line">print(binary_search([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">print(binary_search([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="number">0</span>))</span><br><span class="line">print(binary_search([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>))</span><br></pre></td></tr></table></figure>

<h1 id="左边界"><a href="#左边界" class="headerlink" title="左边界"></a>左边界</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lower_boound</span><span class="params">(array,value)</span>:</span></span><br><span class="line">    <span class="string">""" 左边界 """</span></span><br><span class="line">    left,right=<span class="number">0</span>,len(array)<span class="number">-1</span>   </span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right):          </span><br><span class="line">        mid=left+(right-left&gt;&gt;<span class="number">1</span>)<span class="comment">#注意位运算的括号</span></span><br><span class="line">        <span class="keyword">if</span> array[mid]==value:<span class="comment">#左边界的精髓：找到了不返回，继续收缩右边界   </span></span><br><span class="line">            right=mid<span class="number">-1</span></span><br><span class="line">        <span class="keyword">elif</span> array[mid]&lt;value:</span><br><span class="line">            left=mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> array[mid]&gt;value:</span><br><span class="line">            right=mid<span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span>(left&gt;=len(array) <span class="keyword">or</span> array[left]!=value):<span class="comment">#判断溢出</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> left</span><br><span class="line"></span><br><span class="line">print(lower_boound([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="number">1</span>))</span><br><span class="line">print(lower_boound([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="number">2</span>))<span class="comment">#找到的位置是左边界</span></span><br><span class="line">print(lower_boound([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">print(lower_boound([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="number">0</span>))</span><br><span class="line">print(lower_boound([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>刷题模板</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣第 263场周赛</title>
    <url>/posts/d982b5cb/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="5902-检查句子中的数字是否递增"><a href="#5902-检查句子中的数字是否递增" class="headerlink" title="5902. 检查句子中的数字是否递增"></a><a href="https://leetcode-cn.com/problems/check-if-numbers-are-ascending-in-a-sentence/" target="_blank" rel="noopener">5902. 检查句子中的数字是否递增</a></h1><p>python就是好用，split()划分+dic计数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def areNumbersAscending(self, s: str) -&gt; bool:</span><br><span class="line">        dic&#x3D;&#123;str(i):1 for i in range(101)&#125;</span><br><span class="line">        res&#x3D;0</span><br><span class="line">        for x in s.split():</span><br><span class="line">            if dic.get(x):</span><br><span class="line">                if res&lt;int(x):</span><br><span class="line">                    res&#x3D;int(x)</span><br><span class="line">                else:</span><br><span class="line">                    return False</span><br><span class="line">        </span><br><span class="line">        return True</span><br></pre></td></tr></table></figure>



<h1 id="5903-简易银行系统"><a href="#5903-简易银行系统" class="headerlink" title="5903. 简易银行系统"></a><a href="https://leetcode-cn.com/problems/simple-bank-system/" target="_blank" rel="noopener">5903. 简易银行系统</a></h1><p>从没遇到过这么简单的模拟</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Bank:</span><br><span class="line"></span><br><span class="line">    def __init__(self, balance: List[int]):</span><br><span class="line">        self.m&#x3D;[*balance]</span><br><span class="line">        self.n&#x3D;len(self.m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def transfer(self, account1: int, account2: int, money: int) -&gt; bool:</span><br><span class="line">        account1-&#x3D;1</span><br><span class="line">        account2-&#x3D;1</span><br><span class="line">        if account1&lt;0 or account1&gt;&#x3D;self.n or account2&lt;0 or account2&gt;&#x3D;self.n:return False</span><br><span class="line">        if self.m[account1]&gt;&#x3D;money:</span><br><span class="line">            self.m[account1]-&#x3D;money</span><br><span class="line">            self.m[account2]+&#x3D;money</span><br><span class="line">            return True</span><br><span class="line">        else:</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def deposit(self, account: int, money: int) -&gt; bool:</span><br><span class="line">        account-&#x3D;1</span><br><span class="line">        if account&lt;0 or account&gt;&#x3D;self.n:return False</span><br><span class="line">        self.m[account]+&#x3D;money</span><br><span class="line">        return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def withdraw(self, account: int, money: int) -&gt; bool:</span><br><span class="line">        account-&#x3D;1</span><br><span class="line">        if account&lt;0 or account&gt;&#x3D;self.n:return False</span><br><span class="line">        if self.m[account]&gt;&#x3D;money:</span><br><span class="line">            self.m[account]-&#x3D;money</span><br><span class="line">            return True</span><br><span class="line">        else:</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Your Bank object will be instantiated and called as such:</span><br><span class="line"># obj &#x3D; Bank(balance)</span><br><span class="line"># param_1 &#x3D; obj.transfer(account1,account2,money)</span><br><span class="line"># param_2 &#x3D; obj.deposit(account,money)</span><br><span class="line"># param_3 &#x3D; obj.withdraw(account,money)</span><br></pre></td></tr></table></figure>



<h1 id="5904-统计按位或能得到最大值的子集数目"><a href="#5904-统计按位或能得到最大值的子集数目" class="headerlink" title="5904. 统计按位或能得到最大值的子集数目"></a><a href="https://leetcode-cn.com/problems/count-number-of-maximum-bitwise-or-subsets/" target="_blank" rel="noopener">5904. 统计按位或能得到最大值的子集数目</a></h1><p>史上最简单T3之一，combination-&gt;过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def countMaxOrSubsets(self, nums: List[int]) -&gt; int:</span><br><span class="line">        def findxor(nums):</span><br><span class="line">            n&#x3D;len(nums)</span><br><span class="line">            pre&#x3D;nums[0]</span><br><span class="line">            for i in range(1,n):</span><br><span class="line">                pre|&#x3D;nums[i]</span><br><span class="line">            return pre</span><br><span class="line">        </span><br><span class="line">        dic&#x3D;defaultdict(int)</span><br><span class="line">        n&#x3D;len(nums)</span><br><span class="line">        res&#x3D;-1</span><br><span class="line">        for a in range(n):</span><br><span class="line">            for i in combinations(nums, a+1):</span><br><span class="line">                    tmp&#x3D;findxor(i)</span><br><span class="line">                    res&#x3D;max(res,tmp)</span><br><span class="line">                    dic[tmp]+&#x3D;1</span><br><span class="line">        return dic[res]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>力扣</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法之二叉树的遍历</title>
    <url>/posts/a50daf3b/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="TreeNode"><a href="#TreeNode" class="headerlink" title="TreeNode"></a>TreeNode</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class TreeNode:</span><br><span class="line">    def __init__(self,val,left&#x3D;None,right&#x3D;None):</span><br><span class="line">        self.val&#x3D;val</span><br><span class="line">        self.left&#x3D;left</span><br><span class="line">        self.right&#x3D;right</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;tree</span><br><span class="line">            5</span><br><span class="line">        1       2</span><br><span class="line">    3     4   6    8</span><br><span class="line">9                     11</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"># 推荐采用这种构造方式，非常直观</span><br><span class="line">root&#x3D;TreeNode(5,</span><br><span class="line">              TreeNode(1,</span><br><span class="line">                       TreeNode(3,</span><br><span class="line">                                TreeNode(9),</span><br><span class="line">                                None),</span><br><span class="line">                       TreeNode(4)</span><br><span class="line">                       ),</span><br><span class="line">              TreeNode(2,</span><br><span class="line">                       TreeNode(6),</span><br><span class="line">                       TreeNode(8,</span><br><span class="line">                                None,</span><br><span class="line">                                TreeNode(11))</span><br><span class="line">                       )</span><br><span class="line">              )</span><br></pre></td></tr></table></figure>



<h1 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def preorder(root):</span><br><span class="line">    if not root:return</span><br><span class="line">    print(root.val)</span><br><span class="line">    preorder(root.left)</span><br><span class="line">    preorder(root.right)</span><br></pre></td></tr></table></figure>



<h1 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def inorder(root):</span><br><span class="line">    if not root:return</span><br><span class="line">    inorder(root.left)</span><br><span class="line">    print(root.val)</span><br><span class="line">    inorder(root.right)</span><br></pre></td></tr></table></figure>



<h1 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def postorder(root):</span><br><span class="line">    if not root:return</span><br><span class="line">    postorder(root.left)</span><br><span class="line">    postorder(root.right)</span><br><span class="line">    print(root.val)</span><br></pre></td></tr></table></figure>



<h1 id="广度优先（层序遍历）"><a href="#广度优先（层序遍历）" class="headerlink" title="广度优先（层序遍历）"></a>广度优先（层序遍历）</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def bfs(root):</span><br><span class="line">    queue&#x3D;[root]</span><br><span class="line">    while queue:</span><br><span class="line">        node&#x3D;queue.pop(0)</span><br><span class="line">        if node.left:</span><br><span class="line">            queue.append(node.left)</span><br><span class="line">        if node.right:</span><br><span class="line">            queue.append(node.right)</span><br><span class="line">        print(node.val)</span><br></pre></td></tr></table></figure>



<h1 id="深度优先"><a href="#深度优先" class="headerlink" title="深度优先"></a>深度优先</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def dfs(root):</span><br><span class="line">    stack&#x3D;[root]</span><br><span class="line">    while stack:</span><br><span class="line">        node&#x3D;stack.pop()</span><br><span class="line">        if node.right:</span><br><span class="line">            stack.append(node.right)</span><br><span class="line">        if node.left:</span><br><span class="line">            stack.append(node.left)</span><br><span class="line">        print(node.val)</span><br></pre></td></tr></table></figure>



<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li><p>前序、中序、后序遍历其实都是深度优先思想的体现，我这里采用<strong>递归</strong>写法，便于记忆，三者的<strong>区别</strong>在于：遍历左右子树与对此节点做出操作（<code>print(root.val)</code>）的<strong>顺序</strong></p>
</li>
<li><p>深度优先使用<strong>栈</strong>，广度优先使用<strong>队列</strong>，我这里均采用<strong>迭代</strong>写法；注意深度优先的栈的先入后出特性，应先判断right再判断left</p>
</li>
</ol>
]]></content>
      <categories>
        <category>算法</category>
        <category>刷题模板</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法之双指针</title>
    <url>/posts/28666482/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>双指针是一种非常实用的技巧，往下又可细分为快慢指针、左右指针和滑动窗口等</p>
<h1 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h1><p>快慢指针一般用于解决链表问题，如<a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">141. 环形链表</a></p>
<blockquote>
<p>快指针一次走两步，慢指针一次走一步，如果没有环，快指针则会多绕一圈后与慢指针相遇</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def hasCycle(self, head: ListNode) -&gt; bool:</span><br><span class="line">        if not head:</span><br><span class="line">            return False</span><br><span class="line">        slow,quick&#x3D;head,head</span><br><span class="line">        while(slow and slow.next and quick and quick.next and quick.next.next):</span><br><span class="line">            slow&#x3D;slow.next</span><br><span class="line">            quick&#x3D;quick.next.next</span><br><span class="line">            if slow&#x3D;&#x3D;quick:</span><br><span class="line">                return True</span><br><span class="line">        return False</span><br></pre></td></tr></table></figure>

<p>再如<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">142. 环形链表 II</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def detectCycle(self, head: ListNode) -&gt; ListNode:</span><br><span class="line">        flag&#x3D;False</span><br><span class="line">        fast&#x3D;slow&#x3D;head</span><br><span class="line">        while(fast and fast.next):</span><br><span class="line">            fast&#x3D;fast.next.next</span><br><span class="line">            slow&#x3D;slow.next</span><br><span class="line">            if fast&#x3D;&#x3D;slow:</span><br><span class="line">                flag&#x3D;True</span><br><span class="line">                break</span><br><span class="line">        if not flag:return None</span><br><span class="line">        slow&#x3D;head</span><br><span class="line">        while(slow!&#x3D;fast):</span><br><span class="line">            fast&#x3D;fast.next</span><br><span class="line">            slow&#x3D;slow.next</span><br><span class="line">        return slow</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中逻辑如下：</p>
<p>a-&gt;(b,c)<br>a+b+c=2(a+b)<br>c=a+b<br>从头开始走a+b或c时相遇</p>
</blockquote>
<p>以及<a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/" target="_blank" rel="noopener">876. 链表的中间结点</a></p>
<blockquote>
<p>快指针的速度是慢指针的两倍，快指针走到尾时，慢指针刚好处于中间结点</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def middleNode(self, head: ListNode) -&gt; ListNode:</span><br><span class="line">        quick,slow&#x3D;head,head</span><br><span class="line">        while quick and quick.next:</span><br><span class="line">            slow&#x3D;slow.next</span><br><span class="line">            quick&#x3D;quick.next.next</span><br><span class="line">        return slow</span><br></pre></td></tr></table></figure>

<p>只要掌握了快慢指针，很快就能解决这类链表问题了</p>
<h1 id="左右指针"><a href="#左右指针" class="headerlink" title="左右指针"></a>左右指针</h1><ul>
<li>左右指针用在同一个数组里，可以进行二分查找，关于二分的细节，可以看我的另一篇文章<a href="http://ducknew.cf/posts/51f1febc/">算法之二分查找</a></li>
<li>左右指针用在两个数组里，可以计算<a href="https://leetcode-cn.com/problems/intersection-of-two-arrays/" target="_blank" rel="noopener">两个数组的交集</a>,以及<a href="https://leetcode-cn.com/problems/merge-sorted-array/" target="_blank" rel="noopener">合并两个有序数组</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def intersection(self, nums1: List[int], nums2: List[int]) -&gt; List[int]:</span><br><span class="line">        nums1.sort()</span><br><span class="line">        nums2.sort()</span><br><span class="line">        l,r&#x3D;0,0</span><br><span class="line">        res&#x3D;[]</span><br><span class="line">        while(l&lt;len(nums1) and r&lt;len(nums2)):</span><br><span class="line">            if(nums1[l]&#x3D;&#x3D;nums2[r]):</span><br><span class="line">                res.append(nums1[l])</span><br><span class="line">                l+&#x3D;1</span><br><span class="line">                r+&#x3D;1</span><br><span class="line">            elif(nums1[l]&lt;nums2[r]):</span><br><span class="line">                l+&#x3D;1</span><br><span class="line">            elif(nums1[l]&gt;nums2[r]):</span><br><span class="line">                r+&#x3D;1</span><br><span class="line">        return list(set(res))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -&gt; None:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Do not return anything, modify nums1 in-place instead.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        res &#x3D; []</span><br><span class="line">        l, r &#x3D; 0, 0</span><br><span class="line">        while l &lt; m or r &lt; n:</span><br><span class="line">            if l &#x3D;&#x3D; m:</span><br><span class="line">                res.append(nums2[r])</span><br><span class="line">                r +&#x3D; 1</span><br><span class="line">            elif r &#x3D;&#x3D; n:</span><br><span class="line">                res.append(nums1[l])</span><br><span class="line">                l +&#x3D; 1</span><br><span class="line">            elif nums1[l] &lt; nums2[r]:</span><br><span class="line">                res.append(nums1[l])</span><br><span class="line">                l +&#x3D; 1</span><br><span class="line">            else:</span><br><span class="line">                res.append(nums2[r])</span><br><span class="line">                r +&#x3D; 1</span><br><span class="line">        nums1[:] &#x3D; res	# modify nums1 in-place</span><br></pre></td></tr></table></figure>





<h1 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h1><p>滑动窗口顾名思义，就是一个在不断滑动(一般是向右滑动)的窗口，窗口扩张右界时增大，收缩左界时减小，窗口在滑动过程中不会往左倒退(也就是说，左右边界的下标一直在增大，不会减小)</p>
<p>滑动窗口的核心在于</p>
<ol>
<li>扩张右界（一般是为了找到可行解）</li>
<li>收缩左界（一般是为了去除部分解，找到局部最优可行解）</li>
</ol>
<p>周赛刚好遇到一题：<a href="https://leetcode-cn.com/problems/maximize-the-confusion-of-an-exam/" target="_blank" rel="noopener">考试的最大困扰度</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def maxConsecutiveAnswers(self, answerKey: str, k: int) -&gt; int:</span><br><span class="line">        n&#x3D;len(answerKey)</span><br><span class="line">        nums&#x3D;[1 if x&#x3D;&#x3D;&#39;T&#39; else 0 for x in answerKey]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        res1 &#x3D; 0</span><br><span class="line">        l, r &#x3D; 0, 0</span><br><span class="line">        z &#x3D; 0 </span><br><span class="line">        while r &lt; n:</span><br><span class="line">            if nums[r] &#x3D;&#x3D; 0:</span><br><span class="line">                z +&#x3D; 1</span><br><span class="line">            while z &gt; k:</span><br><span class="line">                if nums[l] &#x3D;&#x3D; 0:</span><br><span class="line">                    z -&#x3D; 1</span><br><span class="line">                l +&#x3D; 1</span><br><span class="line">            res1 &#x3D; max(res1, r - l + 1)</span><br><span class="line">            r +&#x3D; 1</span><br><span class="line">        </span><br><span class="line">        res2 &#x3D; 0</span><br><span class="line">        l, r &#x3D; 0, 0</span><br><span class="line">        z &#x3D; 0 </span><br><span class="line">        while r &lt; n:</span><br><span class="line">            if nums[r] &#x3D;&#x3D; 1:</span><br><span class="line">                z +&#x3D; 1</span><br><span class="line">            while z &gt; k:</span><br><span class="line">                if nums[l] &#x3D;&#x3D; 1:</span><br><span class="line">                    z -&#x3D; 1</span><br><span class="line">                l +&#x3D; 1</span><br><span class="line">            res2 &#x3D; max(res2, r - l + 1)</span><br><span class="line">            r +&#x3D; 1</span><br><span class="line">        return max(res1,res2)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>刷题模板</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣第264场周赛</title>
    <url>/posts/a815e136/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="5906-句子中的有效单词数"><a href="#5906-句子中的有效单词数" class="headerlink" title="5906. 句子中的有效单词数"></a><a href="https://leetcode-cn.com/problems/number-of-valid-words-in-a-sentence/" target="_blank" rel="noopener">5906. 句子中的有效单词数</a></h1><p>写的比较啰嗦了点，其实用<strong><a href="http://ducknew.cf/posts/2f57a694/">正则</a></strong>一行就搞定了</p>
<blockquote>
<p><code>return sum(bool(re.match(r&#39;[a-z]*([a-z]-[a-z]+)?[!.,]?$&#39;, w)) for w in sc.split())</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countValidWords</span><span class="params">(self, sentence: str)</span> -&gt; int:</span></span><br><span class="line">        nums=[str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></span><br><span class="line">            n=len(x)</span><br><span class="line">            <span class="keyword">if</span> x.count(<span class="string">'-'</span>)&gt;=<span class="number">2</span>:<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> x.count(<span class="string">'!'</span>)&gt;=<span class="number">2</span>:<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> x.count(<span class="string">'.'</span>)&gt;=<span class="number">2</span>:<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> x.count(<span class="string">','</span>)&gt;=<span class="number">2</span>:<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            flag1,flag2,flag3=<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> idx,val <span class="keyword">in</span> enumerate(x):</span><br><span class="line">                <span class="keyword">if</span> val.isalpha():</span><br><span class="line">                    flag1=<span class="literal">True</span></span><br><span class="line">                    <span class="keyword">if</span> flag2:</span><br><span class="line">                        flag3=<span class="literal">True</span></span><br><span class="line">                <span class="keyword">if</span> val==<span class="string">'-'</span>:</span><br><span class="line">                    flag2=<span class="literal">True</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> flag1:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> val <span class="keyword">in</span> (<span class="string">'!'</span>,<span class="string">'.'</span>, <span class="string">','</span>) <span class="keyword">and</span> idx!=n<span class="number">-1</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">if</span> val <span class="keyword">in</span> nums:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> flag2 <span class="keyword">and</span> <span class="keyword">not</span> flag3:<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line">        res=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> sentence.split():</span><br><span class="line">            <span class="keyword">if</span> func(x):</span><br><span class="line">                print(x)</span><br><span class="line">                res+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<h1 id="5907-下一个更大的数值平衡数"><a href="#5907-下一个更大的数值平衡数" class="headerlink" title="5907. 下一个更大的数值平衡数"></a><a href="https://leetcode-cn.com/problems/next-greater-numerically-balanced-number/" target="_blank" rel="noopener">5907. 下一个更大的数值平衡数</a></h1><p>打表也能过，这里写的啰嗦了点，属于是没想到</p>
<ul>
<li>$0 &lt;= n &lt;= 10^6$，n实际上可以取到999999</li>
</ul>
<p>搜的时候用一下<strong>二分</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextBeautifulNumber</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></span><br><span class="line">            s=set(x)</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> s:</span><br><span class="line">                <span class="keyword">if</span> x.count(k)!=int(k):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        res=&#123;<span class="number">1</span>,<span class="number">22</span>,<span class="number">122</span>,<span class="number">212</span>,<span class="number">221</span>,<span class="number">333</span>,<span class="number">1333</span>,<span class="number">3133</span>,<span class="number">3313</span>,<span class="number">3331</span>,<span class="number">4444</span>,<span class="number">55555</span>,<span class="number">666666</span>,<span class="number">1224444</span>&#125;</span><br><span class="line">        seq1=<span class="string">'22333'</span></span><br><span class="line">        seq2=<span class="string">'14444'</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> permutations(seq1, <span class="number">5</span>):</span><br><span class="line">            tmp=<span class="string">''</span>.join(x)</span><br><span class="line">            res.add(int(tmp))</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> permutations(seq2, <span class="number">5</span>):</span><br><span class="line">            tmp=<span class="string">''</span>.join(x)</span><br><span class="line">            res.add(int(tmp))</span><br><span class="line">        </span><br><span class="line">        seq3=<span class="string">'122333'</span></span><br><span class="line">        seq4=<span class="string">'224444'</span></span><br><span class="line">        seq5=<span class="string">'155555'</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> permutations(seq3,<span class="number">6</span>):</span><br><span class="line">            tmp=<span class="string">''</span>.join(x)</span><br><span class="line">            res.add(int(tmp))</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> permutations(seq4, <span class="number">6</span>):</span><br><span class="line">            tmp=<span class="string">''</span>.join(x)</span><br><span class="line">            res.add(int(tmp))</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> permutations(seq5, <span class="number">6</span>):</span><br><span class="line">            tmp=<span class="string">''</span>.join(x)</span><br><span class="line">            res.add(int(tmp))</span><br><span class="line">                </span><br><span class="line">        res=sorted(list(res))</span><br><span class="line">        idx=bisect.bisect_left(res,n)</span><br><span class="line">        <span class="keyword">if</span> res[idx]==n:</span><br><span class="line">            <span class="keyword">return</span> res[idx+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> res[idx]</span><br></pre></td></tr></table></figure>



<h1 id="5908-统计最高分的节点数目"><a href="#5908-统计最高分的节点数目" class="headerlink" title="5908. 统计最高分的节点数目"></a><a href="https://leetcode-cn.com/problems/count-nodes-with-the-highest-score/" target="_blank" rel="noopener">5908. 统计最高分的节点数目</a></h1><p>dfs轻松搞定，不过建树的过程值得注意</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countHighestScoreNodes</span><span class="params">(self, parents: List[int])</span> -&gt; int:</span></span><br><span class="line">        n=len(parents)</span><br><span class="line">        tree=[TreeNode(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">            a,b=tree[i],tree[parents[i]]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> b.left:</span><br><span class="line">                b.left=a</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                b.right=a</span><br><span class="line">        </span><br><span class="line">        nums=[<span class="literal">None</span>]*n</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(root)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            l,r=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> root.left:l+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> root.right:r+=<span class="number">1</span></span><br><span class="line">            l+=dfs(root.left)</span><br><span class="line">            r+=dfs(root.right)</span><br><span class="line">            nums[root.val]=(l,r)</span><br><span class="line">            <span class="keyword">return</span> l+r</span><br><span class="line">        </span><br><span class="line">        dfs(tree[<span class="number">0</span>])</span><br><span class="line">        res=[<span class="number">0</span>]*n</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            a,b=nums[i][<span class="number">0</span>],nums[i][<span class="number">1</span>]</span><br><span class="line">            c=n-a-b<span class="number">-1</span></span><br><span class="line">            <span class="keyword">if</span> a==<span class="number">0</span>:a=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> b==<span class="number">0</span>:b=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> c==<span class="number">0</span>:c=<span class="number">1</span></span><br><span class="line">            res[i]=a*b*c</span><br><span class="line">        <span class="comment"># print(res)</span></span><br><span class="line">        <span class="keyword">return</span> res.count(max(res))</span><br></pre></td></tr></table></figure>



<h1 id="5909-并行课程-III"><a href="#5909-并行课程-III" class="headerlink" title="5909. 并行课程 III"></a><a href="https://leetcode-cn.com/problems/parallel-courses-iii/" target="_blank" rel="noopener">5909. 并行课程 III</a></h1><p>拓扑排序，没码出来，以后得总结一下板子</p>
<p>这里分享一个大佬的代码👇,一起学习</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minimumTime</span><span class="params">(self, n: int, relations: List[List[int]], time: List[int])</span> -&gt; int:</span></span><br><span class="line">        p = collections.defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> pc, c <span class="keyword">in</span> relations: p[c].append(pc)</span><br><span class="line"><span class="meta">        @cache</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_res</span><span class="params">(c)</span>:</span> <span class="keyword">return</span> time[c - <span class="number">1</span>] + max([<span class="number">0</span>] + [get_res(pc) <span class="keyword">for</span> pc <span class="keyword">in</span> p[c]])</span><br><span class="line">        <span class="keyword">return</span> max(get_res(c) <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span>))</span><br></pre></td></tr></table></figure>



<h1 id="轻松一刻"><a href="#轻松一刻" class="headerlink" title="轻松一刻"></a>轻松一刻</h1><p>刷力扣的时候，群友分享了一个测试反应速度的小游戏：<a href="https://www.arealme.com/reaction-test/cn/" target="_blank" rel="noopener">https://www.arealme.com/reaction-test/cn/</a></p>
<p>当我还在老老实实地提高注意力的时候，群友已经通过预判打出非人操作：</p>
<p><img src="https://cdn.jsdelivr.net/gh/cheungducknew/cdn@latest/img/2021.10/1024-1.jpg" alt="1024-1"></p>
<p>难以忍受！因此我搬出来了刚学不久的<a href="http://ducknew.cf/posts/aa2659da/">selenium</a>，开始一通操作！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver import ActionChains</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line">from selenium.webdriver.support.wait import WebDriverWait</span><br><span class="line">from selenium.webdriver.support import expected_conditions as EC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">driver &#x3D; webdriver.Chrome()</span><br><span class="line">driver.get(&#39;https:&#x2F;&#x2F;www.arealme.com&#x2F;reaction-test&#x2F;cn&#x2F;&#39;)</span><br><span class="line">wait&#x3D;WebDriverWait(driver,10)</span><br><span class="line">start&#x3D;wait.until(EC.presence_of_element_located((By.XPATH,&#39;&#x2F;&#x2F;button[@class&#x3D;&quot;progress-button pure-button pure-button-primary&quot;]&#39;)))</span><br><span class="line">start.click()</span><br><span class="line"></span><br><span class="line">sleep(3)</span><br><span class="line">ActionChains(driver).move_by_offset(200, 100).click().perform()</span><br><span class="line"></span><br><span class="line">for _ in range(5):</span><br><span class="line">    green&#x3D;wait.until(EC.presence_of_element_located((By.XPATH,&#39;&#x2F;&#x2F;div[@class&#x3D;&quot;tfny-circleGreen&quot;]&#39;)))</span><br><span class="line">    green.click()</span><br><span class="line"></span><br><span class="line"># res&#x3D;wait.until(EC.presence_of_element_located((By.XPATH,&#39;&#x2F;&#x2F;div[@id&#x3D;&quot;reactNumber&quot;]&#39;)))</span><br><span class="line"># print(res.text)</span><br></pre></td></tr></table></figure>

<p>一阵骚乱之后，整个群聊又归于平静。</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>力扣</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法之回溯</title>
    <url>/posts/8624fe30/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h1><p>回溯和dfs关系密切</p>
<p><strong>DFS基本思想：</strong></p>
<ol>
<li>本质是遍历<strong>决策树</strong></li>
<li>关注<strong>路径</strong>、<strong>选择列表</strong>、<strong>结束条件</strong></li>
<li>结合<strong>回溯</strong>：重点是<strong>撤销选择</strong></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">res &#x3D; []</span><br><span class="line">def dfs(路径, 选择列表):</span><br><span class="line">    if 满足结束条件:</span><br><span class="line">        res.append(路径)</span><br><span class="line">        return</span><br><span class="line">    </span><br><span class="line">    for 选择 in 选择列表:</span><br><span class="line">        做选择</span><br><span class="line">        dfs(路径, 选择列表)</span><br><span class="line">        撤销选择</span><br></pre></td></tr></table></figure>





<h1 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a><a href="https://leetcode-cn.com/problems/permutations/" target="_blank" rel="noopener">全排列</a></h1><p>注意res.append(path[:])：是path的一个拷贝</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def permute(self, nums: List[int]) -&gt; List[List[int]]:</span><br><span class="line">        def dfs(depth,size,path,seen):</span><br><span class="line">            if depth&#x3D;&#x3D;size:</span><br><span class="line">                res.append(path[:])</span><br><span class="line">            for i in range(size):</span><br><span class="line">                if not seen[i]:</span><br><span class="line">                    seen[i]&#x3D;1</span><br><span class="line">                    path.append(nums[i])</span><br><span class="line">                    dfs(depth+1,size,path,seen)</span><br><span class="line">                    seen[i]&#x3D;0</span><br><span class="line">                    path.pop()</span><br><span class="line">        </span><br><span class="line">        size&#x3D;len(nums)</span><br><span class="line">        seen&#x3D;[0]*size</span><br><span class="line">        res&#x3D;[]</span><br><span class="line">        dfs(0,size,[],seen)</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，这里当<code>if depth==size:</code>时没有<code>return</code>，虽然下面的for函数即使运行，也会因为<code>seen[i]=1</code>，而不会对结果造成影响，但这是很不好的习惯</p>
<p>最好在dfs结束时，加上<code>return</code></p>
</blockquote>
<p>其实也可以用内置的<code>permutations</code>函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def permute(self, nums: List[int]) -&gt; List[List[int]]:</span><br><span class="line">        res&#x3D;[list(t)for t in permutations(nums)]</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>



<h1 id="电话号码的字母组合"><a href="#电话号码的字母组合" class="headerlink" title="电话号码的字母组合"></a><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">电话号码的字母组合</a></h1><p><strong>选择列表</strong>为：<code>dic[str(digits[depth])]</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def letterCombinations(self, digits: str) -&gt; List[str]:</span><br><span class="line">        dic&#x3D;&#123;&#39;2&#39;:[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;],&#39;3&#39;:[&#39;d&#39;,&#39;e&#39;,&#39;f&#39;],&#39;4&#39;:[&#39;g&#39;,&#39;h&#39;,&#39;i&#39;],&#39;5&#39;:[&#39;j&#39;,&#39;k&#39;,&#39;l&#39;],&#39;6&#39;:[&#39;m&#39;,&#39;n&#39;,&#39;o&#39;],&#39;7&#39;:[&#39;p&#39;,&#39;q&#39;,&#39;r&#39;,&#39;s&#39;],&#39;8&#39;:[&#39;t&#39;,&#39;u&#39;,&#39;v&#39;],&#39;9&#39;:[&#39;w&#39;,&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]&#125;</span><br><span class="line">        res&#x3D;[]</span><br><span class="line">        def dfs(depth,size,path,seen):</span><br><span class="line">            if depth&#x3D;&#x3D;size:</span><br><span class="line">                res.append(&#39;&#39;.join(path[:]))</span><br><span class="line">                return</span><br><span class="line">            for i in dic[str(digits[depth])]:</span><br><span class="line">                seen[i]&#x3D;1</span><br><span class="line">                path.append(i)</span><br><span class="line">                dfs(depth+1,size,path,seen)</span><br><span class="line">                seen[i]&#x3D;0</span><br><span class="line">                path.pop()</span><br><span class="line"></span><br><span class="line">        seen&#x3D;defaultdict(int)            </span><br><span class="line">        size&#x3D;len(digits)</span><br><span class="line">        if not size:return []</span><br><span class="line">        dfs(0,size,[],seen)</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>



<h1 id="括号生成"><a href="#括号生成" class="headerlink" title="括号生成"></a><a href="https://leetcode-cn.com/problems/generate-parentheses/" target="_blank" rel="noopener">括号生成</a></h1><p>当左括号不多于n时，可以添加左括号</p>
<p>当左括号数量大于右括号时，可以添加右括号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def generateParenthesis(self, n: int) -&gt; List[str]:</span><br><span class="line">        def dfs(depth,path,cnt):</span><br><span class="line">            if depth&#x3D;&#x3D;2*n:</span><br><span class="line">                if cnt&#x3D;&#x3D;0:res.append(&#39;&#39;.join(path[:]))</span><br><span class="line">                return </span><br><span class="line">            for x in (&#39;(&#39;,&#39;)&#39;):</span><br><span class="line">                if x&#x3D;&#x3D;&#39;(&#39; and cnt&gt;&#x3D;n:continue</span><br><span class="line">                if x&#x3D;&#x3D;&#39;)&#39; and cnt&lt;&#x3D;0:continue</span><br><span class="line">                path.append(x)</span><br><span class="line">                if x&#x3D;&#x3D;&#39;(&#39;:</span><br><span class="line">                    cnt+&#x3D;1</span><br><span class="line">                else:</span><br><span class="line">                    cnt-&#x3D;1</span><br><span class="line">                dfs(depth+1,path,cnt)</span><br><span class="line">                if x&#x3D;&#x3D;&#39;(&#39;:</span><br><span class="line">                    cnt-&#x3D;1</span><br><span class="line">                else:</span><br><span class="line">                    cnt+&#x3D;1</span><br><span class="line">                path.pop()</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        res&#x3D;[]</span><br><span class="line">        dfs(0,[],0)</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>



<h1 id="组合总和"><a href="#组合总和" class="headerlink" title="组合总和"></a><a href="https://leetcode-cn.com/problems/combination-sum/" target="_blank" rel="noopener">组合总和</a></h1><p>since list is an <strong>unhashable</strong> type, we use <strong>Counter</strong> to remove duplication</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def combinationSum(self, candidates: List[int], target: int) -&gt; List[List[int]]:</span><br><span class="line">        res&#x3D;[]</span><br><span class="line">        def dfs(sum,path):</span><br><span class="line">            if sum&#x3D;&#x3D;target:</span><br><span class="line">                flag&#x3D;True</span><br><span class="line">                for r in res:</span><br><span class="line">                    if len(r)&#x3D;&#x3D;len(path):</span><br><span class="line">                        if Counter(r)&#x3D;&#x3D;Counter(path):</span><br><span class="line">                            flag&#x3D;False</span><br><span class="line">                            break</span><br><span class="line">                if flag:res.append(path[:])</span><br><span class="line">                return</span><br><span class="line">            if sum&gt;target:return</span><br><span class="line">            for c in candidates:</span><br><span class="line">                path.append(c)</span><br><span class="line">                dfs(sum+c,path)</span><br><span class="line">                path.pop()</span><br><span class="line">        dfs(0,[])</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>刷题模板</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法总结</title>
    <url>/posts/cd65786b/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="生成随机数列"><a href="#生成随机数列" class="headerlink" title="生成随机数列"></a><strong>生成随机数列</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from random import randint</span><br><span class="line"></span><br><span class="line">def generateRandomArray(n&#x3D;10, min&#x3D;0, max&#x3D;100):</span><br><span class="line">    return [randint(min, max) for _ in range(n)]</span><br></pre></td></tr></table></figure>



<h1 id="生成基本有序的数列"><a href="#生成基本有序的数列" class="headerlink" title="生成基本有序的数列"></a><strong>生成基本有序的数列</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def generateNearlyOrderedArray(n&#x3D;10, swapTimes&#x3D;2):</span><br><span class="line">    arr &#x3D; list(range(n))</span><br><span class="line">    for _ in range(swapTimes):</span><br><span class="line">        i,j &#x3D; randint(0, n-1),randint(0, n-1)</span><br><span class="line">        arr[i], arr[j] &#x3D; arr[j], arr[i]</span><br><span class="line">    return arr</span><br></pre></td></tr></table></figure>



<h1 id="测试算法性能"><a href="#测试算法性能" class="headerlink" title="测试算法性能"></a>测试算法性能</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from timeit import Timer</span><br><span class="line"></span><br><span class="line">def testSort(func, nums):# func：检测的算法函数；nums：传入的数组</span><br><span class="line">    nums &#x3D;  func(nums)</span><br><span class="line">    assert len(nums), &quot;返回数组为空\n&quot;</span><br><span class="line"></span><br><span class="line">t1 &#x3D; Timer(&#39;testSort(XXXSort, nums)&#39;, &#39;from __main__ import testSort, XXXSort, nums&#39;)</span><br><span class="line">print(&#39;XX排序算法：%s s&#39; %t1.timeit(number&#x3D;1))</span><br></pre></td></tr></table></figure>





<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def bubbleSort(nums):</span><br><span class="line">    n&#x3D;len(nums)</span><br><span class="line">    for i in range(n-1,0,-1):</span><br><span class="line">        for j in range(i):</span><br><span class="line">            if nums[j]&gt;nums[j+1]:</span><br><span class="line">                nums[j],nums[j+1]&#x3D;nums[j+1],nums[j]</span><br><span class="line">    return nums</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面这个是向后冒泡，还有个向前冒泡的版本：(可以由<strong>i</strong>判断向哪冒泡)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def bubbleSort(nums):</span><br><span class="line">    for i in range(n:&#x3D;len(nums)):</span><br><span class="line">        for j in range(n-1,i,-1):</span><br><span class="line">            if nums[j]&lt;nums[j-1]:</span><br><span class="line">                nums[j], nums[j - 1] &#x3D; nums[j - 1], nums[j]</span><br><span class="line">    return nums</span><br></pre></td></tr></table></figure>





<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def selectionSort(nums):</span><br><span class="line">    n &#x3D; len(nums)</span><br><span class="line">    for i in range(n - 1):</span><br><span class="line">        idx &#x3D; i</span><br><span class="line">        for j in range(i+1, n):</span><br><span class="line">            if nums[j] &lt; nums[idx]:</span><br><span class="line">                idx &#x3D; j</span><br><span class="line">        nums[i], nums[idx] &#x3D; nums[idx], nums[i]</span><br><span class="line">    return nums</span><br></pre></td></tr></table></figure>



<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a><strong>插入排序</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def insertionSort(nums):</span><br><span class="line">    n&#x3D;len(nums)</span><br><span class="line">    for i in range(1,n):</span><br><span class="line">        value,pos&#x3D;nums[i],i</span><br><span class="line">        while nums[pos-1]&gt;value and pos&gt;0:</span><br><span class="line">            nums[pos],pos&#x3D;nums[pos-1],pos-1</span><br><span class="line">        nums[pos]&#x3D;value</span><br><span class="line">    return nums</span><br></pre></td></tr></table></figure>



<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def quickSort(nums,l,r):	# 闭区间[l,r]</span><br><span class="line">    if l&gt;&#x3D;r:return</span><br><span class="line">    i,j,x&#x3D;l,r,nums[l+r&gt;&gt;1]</span><br><span class="line">    while i&lt;j:</span><br><span class="line">        while nums[i]&lt;x:i+&#x3D;1</span><br><span class="line">        while nums[j]&gt;x:j-&#x3D;1</span><br><span class="line">        if i&lt;j:nums[i],nums[j]&#x3D;nums[j],nums[i]</span><br><span class="line">    quickSort(nums,l,j)</span><br><span class="line">    quickSort(nums,j+1,r)</span><br></pre></td></tr></table></figure>



<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tmp&#x3D;[0]*n</span><br><span class="line">def mergeSort(nums,l,r):	# 闭区间[l,r]</span><br><span class="line">    if l&gt;&#x3D;r:return</span><br><span class="line">    mid&#x3D;l+(r-l&gt;&gt;1)</span><br><span class="line">    mergeSort(nums,l,mid)</span><br><span class="line">    mergeSort(nums,mid+1,r)</span><br><span class="line"></span><br><span class="line">    k,i,j&#x3D;0,l,mid+1</span><br><span class="line">    while i&lt;&#x3D;mid and j&lt;&#x3D;r:</span><br><span class="line">        if nums[i]&lt;nums[j]:</span><br><span class="line">            tmp[k]&#x3D;nums[i];k+&#x3D;1;i+&#x3D;1</span><br><span class="line">        else:</span><br><span class="line">            tmp[k] &#x3D; nums[j];k +&#x3D; 1;j +&#x3D; 1</span><br><span class="line">    while i&lt;&#x3D;mid:</span><br><span class="line">        tmp[k] &#x3D; nums[i];k +&#x3D; 1;i +&#x3D; 1</span><br><span class="line">    while j&lt;&#x3D;r:</span><br><span class="line">        tmp[k] &#x3D; nums[j];k +&#x3D; 1;j +&#x3D; 1</span><br><span class="line"></span><br><span class="line">    nums[l:r+1]&#x3D;tmp[0:r+1-l]</span><br></pre></td></tr></table></figure>

<p>中间部分可以这样记忆（虽然不可以这样运行）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">k,i,j&#x3D;0,l,mid+1	# 分成两部分，[l,mid],[mid+1,r]</span><br><span class="line">while i&lt;&#x3D;mid and j&lt;&#x3D;r:</span><br><span class="line">    if nums[i]&lt;nums[j]:</span><br><span class="line">        tmp[k++]&#x3D;nums[i++]</span><br><span class="line">    else:</span><br><span class="line">        tmp[k++] &#x3D; nums[j++]</span><br><span class="line">while i&lt;&#x3D;mid:</span><br><span class="line">    tmp[k++] &#x3D; nums[i++]</span><br><span class="line">while j&lt;&#x3D;r:</span><br><span class="line">    tmp[k++] &#x3D; nums[j++]</span><br></pre></td></tr></table></figure>





<h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def shellSort(nums):</span><br><span class="line">    gap &#x3D; len(nums)</span><br><span class="line">    while gap:&#x3D;gap&#x2F;&#x2F;2 &gt; 0:</span><br><span class="line">        for i in range(gap):</span><br><span class="line">            gapInsetionSort(nums, i, gap)</span><br><span class="line">    return nums</span><br><span class="line">    </span><br><span class="line">def gapInsetionSort(nums,startpos,gap): # 辅助函数</span><br><span class="line">    n&#x3D;len(nums)</span><br><span class="line">    for i in range(startpos+gap,n,gap):</span><br><span class="line">        value,pos&#x3D;nums[i],i</span><br><span class="line">        while pos&gt;startpos and nums[pos-gap]&gt;value:</span><br><span class="line">            nums[pos],pos&#x3D;nums[pos-gap],pos-gap</span><br><span class="line">        nums[pos]&#x3D;value</span><br></pre></td></tr></table></figure>



<details>
    <summary>为什么python不支持自增(i++)?</summary>
    <p>
        《learning python》这样解释:
    </p>
    <p>
although Python now supports statements like X += Y, it still does not have C’s auto-increment/decrement operators (e.g., X++, −−X). These don’t quite map to the Python object model because Python has no notion of in-place changes to immutable objects like numbers.
    </p>
</details>

]]></content>
      <categories>
        <category>算法</category>
        <category>刷题模板</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法之区间DP</title>
    <url>/posts/c5dbef05/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>区间DP是线性DP的扩展，主要解决<strong>分阶段</strong>的划分问题</p>
<blockquote>
<p>区间DP的特点：</p>
<p><strong>合并</strong>：即将两个或多个部分进行整合，当然也可以反过来；</p>
<p><strong>特征</strong>：能将问题分解为能两两合并的形式；</p>
<p><strong>求解</strong>：对整个问题设最优值，枚举合并点，将问题分解为左右两个部分，最后合并两个部分的最优值得到原问题的最优值</p>
</blockquote>
<h1 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h1><ol>
<li><p><strong>属性</strong></p>
<p>区间DP的状态属性一般为某种最值，追求价值最大或代价最小</p>
</li>
<li><p><strong>集合</strong></p>
<p><code>f[i][j]</code>表示将下标位置<code>i</code>到<code>j</code>的所有元素合并能获得的价值的最大值</p>
</li>
</ol>
<h1 id="状态转移方程"><a href="#状态转移方程" class="headerlink" title="状态转移方程"></a>状态转移方程</h1><p><code>f[i][j]=max{f[i][j],f[i][k]+f[k+1][j]+cost} （i&lt;=k&lt;j）</code></p>
<p>cost为将这两组元素合并起来得到的价值或需要付出的代价，通常结合前缀和处理</p>
<p>由于计算<code>f[i][j]</code>的值时需要知道所有<code>f[i][k]</code>和<code>f[k+1][j]</code>的值，而这两个中包含的元素的数量都小于<code>f[i][j]</code>，所以我们以<code>len=j-i+1</code>作为 DP 的阶段。首先从小到大枚举<code>len</code>，然后枚举<code>i</code>的值，根据<code>len</code>和<code>i</code>用公式计算出<code>j</code>的值，然后枚举<code>k</code>，时间复杂度为$O(n^3)$</p>
<h1 id="处理环"><a href="#处理环" class="headerlink" title="处理环"></a>处理环</h1><p>将链延长一倍，变成<code>len=2*n</code>，其中第<code>i</code>堆和第<code>n+i</code>堆相同，求<code>max{f(1,n),f(2,n+1)……f(i,n+i-1)}</code></p>
<h1 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h1><p>三步走：</p>
<ol>
<li>枚举长度</li>
<li>枚举起点（起点结合长度，可得终点）</li>
<li>枚举分割点</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for len in range(1,n+1):</span><br><span class="line">    for i in range(1,n+2-len):</span><br><span class="line">        l,r&#x3D;i,i+len-1</span><br><span class="line">        for k in range(l,r):</span><br><span class="line">            dp[l][r]&#x3D;min(dp[l][r],dp[l][k]+dp[k+1][r]+cost)</span><br></pre></td></tr></table></figure>



<h1 id="四边形不等式优化"><a href="#四边形不等式优化" class="headerlink" title="四边形不等式优化"></a>四边形不等式优化</h1><p>区间DP的时间复杂度为$O(n^3)$，无法处理稍大数据量的题目</p>
<p>在查找最优分割点的时候，我们可以把最优分割点保存下来，在查找的时候利用保存的最优分割点来优化查找过程</p>
<p><strong>核心：交叉小于包含</strong></p>
<p><strong>内容</strong>：对于<code>a&lt;b&lt;=c&lt;d</code>，如果满足<code>f[a][c]+f[b][d]&lt;=f[a][d]+f[b][c]</code>，则满足四边形不等式优化</p>
<p><strong>结论</strong>（可以直接拿来用）：<code>s[i][j-1]&lt;=s[i][j]&lt;=s[i+1][j]</code></p>
<p>参考内容:<a href="https://blog.csdn.net/noiau/article/details/72514812" target="_blank" rel="noopener">https://blog.csdn.net/noiau/article/details/72514812</a></p>
<h1 id="282-石子合并"><a href="#282-石子合并" class="headerlink" title="282. 石子合并"></a><a href="https://www.acwing.com/problem/content/284/" target="_blank" rel="noopener">282. 石子合并</a></h1><blockquote>
<p>设有 NN 堆石子排成一排，其编号为 1，2，3，…，N1，2，3，…，N。</p>
<p>每堆石子有一定的质量，可以用一个整数来描述，现在要将这 NN 堆石子合并成为一堆。</p>
<p>每次只能合并相邻的两堆，合并的代价为这两堆石子的质量之和，合并后与这两堆石子相邻的石子将和新堆相邻，合并时由于选择的顺序不同，合并的总代价也不相同。</p>
<p>例如有 44 堆石子分别为 <code>1 3 5 2</code>， 我们可以先合并 1、21、2 堆，代价为 44，得到 <code>4 5 2</code>， 又合并 1，21，2 堆，代价为 99，得到 <code>9 2</code> ，再合并得到 1111，总代价为 4+9+11=244+9+11=24；</p>
<p>如果第二步是先合并 2，32，3 堆，则代价为 77，得到 <code>4 7</code>，最后一次合并代价为 1111，总代价为 4+7+11=224+7+11=22。</p>
<p>问题是：找出一种合理的方法，使总的代价最小，输出最小代价。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行一个数 NN 表示石子的堆数 NN。</p>
<p>第二行 NN 个数，表示每堆石子的质量(均不超过 10001000)。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示最小代价。</p>
<h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤3001≤N≤300</p>
<h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;4</span><br><span class="line">&gt;1 3 5 2</span><br></pre></td></tr></table></figure>

<h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;22</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from itertools import accumulate</span><br><span class="line"></span><br><span class="line">n&#x3D;int(input())</span><br><span class="line">nums&#x3D;list(map(int,input().split()))</span><br><span class="line">pre&#x3D;[0,*accumulate(nums)]</span><br><span class="line">dp&#x3D;[[0 for _ in range(n+1)] for _ in range(n+1)]</span><br><span class="line"></span><br><span class="line">for len in range(2,n+1):</span><br><span class="line">    for i in range(1,n+2-len):</span><br><span class="line">        l,r&#x3D;i,i+len-1</span><br><span class="line">        dp[l][r]&#x3D;float(&#39;inf&#39;)</span><br><span class="line">        for k in range(l,r):</span><br><span class="line">            dp[l][r]&#x3D;min(dp[l][r],dp[l][k]+dp[k+1][r]+pre[r]-pre[l-1])</span><br><span class="line"></span><br><span class="line">print(dp[1][n])</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>刷题模板</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>缺数算法</title>
    <url>/posts/8387339a/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>算法说明</strong></p>
<blockquote>
<p>缺数算法：同一位置上的最上面10行内没有出现的数，以及同一位置上倒数两行即将变成缺数的数；例如：一位第一行4，第二行5，第三行1，第四行1，第五行9，第六行0，第七行9，第八行1，第九行5，第十行3，在这十行中，有134590，缺2678，但是第一行，即倒数第一行的4即将不在最上面的十行里，所以4成为缺数，所以缺数是24678，至于为什么第二行，即倒数第二行的5不是缺数，因为第九行有5，所以不可能成为缺数，换句话说只要在前八行有的数，那么倒数两行的数都不是缺数。提示：假如倒数两行都是同一个数，且其他八行都没有这个数，那么这个数就是缺数；</p>
</blockquote>
<p><strong>代码如下：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">missing_number</span><span class="params">(nums)</span>:</span>  <span class="comment"># 一次给定10个数,返回缺数列表</span></span><br><span class="line">    all = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>&#125;</span><br><span class="line">    res = all.difference(set(nums))</span><br><span class="line">    a, b, c = nums[<span class="number">0</span>], nums[<span class="number">1</span>], nums[<span class="number">2</span>:<span class="number">10</span>]</span><br><span class="line">    <span class="keyword">if</span> a <span class="keyword">not</span> <span class="keyword">in</span> c:</span><br><span class="line">    res.add(a)</span><br><span class="line">    <span class="keyword">if</span> b <span class="keyword">not</span> <span class="keyword">in</span> c:</span><br><span class="line">    res.add(b)</span><br><span class="line">    <span class="keyword">return</span> sorted(list(res))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法之差分</title>
    <url>/posts/dfbab6d0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>前文讲到<strong>前缀和</strong>适用于<strong>原始数组不变，频繁查询某个区间的累加和</strong></p>
<p>而今天要讲的<strong>差分</strong>，则适用于<strong>频繁对原始数组的某个区间的元素进行增减</strong></p>
<blockquote>
<p>同样都是维护一个区间，差分和<strong>线段树</strong>有什么区别呢?</p>
<ul>
<li><p>差分适用于范围更新，单独查询</p>
</li>
<li><p>线段树适用于单点跟新，范围查询</p>
</li>
</ul>
</blockquote>
<h1 id="构造差分数组"><a href="#构造差分数组" class="headerlink" title="构造差分数组"></a>构造差分数组</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nums&#x3D;[1,3,5,7,9]</span><br><span class="line">n&#x3D;len(nums)</span><br><span class="line"></span><br><span class="line">diff&#x3D;[nums[0]]</span><br><span class="line">for i in range(1,n):</span><br><span class="line">    diff.append(nums[i]-nums[i-1])</span><br></pre></td></tr></table></figure>



<h1 id="反推原始数组"><a href="#反推原始数组" class="headerlink" title="反推原始数组"></a>反推原始数组</h1><blockquote>
<p>通过差分数组反推出原始数组</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ori&#x3D;[diff[0]]</span><br><span class="line">for i in range(1,n):</span><br><span class="line">    ori.append(ori[-1]+diff[i])</span><br></pre></td></tr></table></figure>

<p>熟悉吗?</p>
<p>没错，<strong>差分数组的前缀和</strong>，就是原始数组</p>
<p>同理，<strong>前缀和的差分数组</strong>，也是原始数组</p>
<h1 id="区间增减"><a href="#区间增减" class="headerlink" title="区间增减"></a>区间增减</h1><p>如果想对区间 <code>nums[i..j]</code> 的元素全部加 a：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">diff[i] +&#x3D; a	</span><br><span class="line"></span><br><span class="line">diff[j+1] -&#x3D; a</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>diff[i] += a</code>，相当于<code>nums[i:]</code>的元素全部增加了a</p>
</li>
<li><p><code>diff[j+1] -= a</code>，相当于<code>nums[j+1:]</code>的元素全部减少了a</p>
</li>
</ul>
<p>两式叠加，即相当于<code>nums[i..j]</code> 的元素全部加 a</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>刷题模板</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法之深度优先搜索</title>
    <url>/posts/571c84fe/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="DFS基本思想"><a href="#DFS基本思想" class="headerlink" title="DFS基本思想"></a>DFS基本思想</h1><ol>
<li>本质是遍历<strong>决策树</strong></li>
<li>关注<strong>路径</strong>、<strong>选择列表</strong>、<strong>结束条件</strong></li>
<li>结合<strong>回溯</strong>：重点是<strong>撤销选择</strong></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result &#x3D; []</span><br><span class="line">def dfs(路径, 选择列表):</span><br><span class="line">    if 满足结束条件:</span><br><span class="line">        result.append(路径)</span><br><span class="line">        return</span><br><span class="line">    </span><br><span class="line">    for 选择 in 选择列表:</span><br><span class="line">        做选择</span><br><span class="line">        dfs(路径, 选择列表)</span><br><span class="line">        撤销选择</span><br></pre></td></tr></table></figure>



<h1 id="二叉树的DFS"><a href="#二叉树的DFS" class="headerlink" title="二叉树的DFS"></a>二叉树的DFS</h1><p>对于二叉树，我们一般这样做DFS：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def dfs(root):</span><br><span class="line">   	# 判断 base case</span><br><span class="line">    if not root:return</span><br><span class="line">    </span><br><span class="line">    # 访问两个相邻结点：左子结点、右子结点</span><br><span class="line">    dfs(root.left)</span><br><span class="line">    dfs(root.right)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>更多二叉树的遍历，可以看我的另一篇文章：<a href="http://ducknew.cf/posts/a50daf3b/">二叉树的遍历</a></p>
</blockquote>
<h1 id="网格类问题的DFS"><a href="#网格类问题的DFS" class="headerlink" title="网格类问题的DFS"></a>网格类问题的DFS</h1><p>类比二叉树的DFS，我们可以总结出网格类问题的DFS：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">row,col&#x3D;len(grid),len(grid[0])</span><br><span class="line"></span><br><span class="line">def dfs(grid,r,c):</span><br><span class="line">    # 判断 base case: 如果坐标 (r, c) 超出了网格范围，直接返回</span><br><span class="line">    if not inArea(grid, r, c):return</span><br><span class="line">    </span><br><span class="line">    # 访问上、下、左、右四个相邻结点</span><br><span class="line">    dfs(grid, r - 1, c)</span><br><span class="line">    dfs(grid, r + 1, c)</span><br><span class="line">    dfs(grid, r, c - 1)</span><br><span class="line">    dfs(grid, r, c + 1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 判断坐标 (r, c) 是否在网格中</span><br><span class="line">def inArea(grid, r, c):</span><br><span class="line">    return 0 &lt;&#x3D; r &lt; row and  0 &lt;&#x3D; c &lt; col</span><br></pre></td></tr></table></figure>

<p><strong>避免重复遍历：</strong></p>
<p>我们可以创建一个seen或visited来记录已访问过的网格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">row,col&#x3D;len(grid),len(grid[0])</span><br><span class="line">seen&#x3D;[[0 for _ in range(col)] for _ in range(row)]</span><br><span class="line"></span><br><span class="line">def dfs(grid,r,c):</span><br><span class="line">    if not inArea(grid, r, c):return</span><br><span class="line">    if seen[r][c]:return</span><br><span class="line">    seen[r][c]&#x3D;1</span><br><span class="line">    ………………</span><br></pre></td></tr></table></figure>

<p><strong>总结模板：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">row,col&#x3D;len(grid),len(grid[0])</span><br><span class="line">seen&#x3D;[[0 for _ in range(col)] for _ in range(row)]</span><br><span class="line">road&#x3D;[(0,1),(0,-1),(1,0),(-1,0)]</span><br><span class="line"></span><br><span class="line">def dfs(i,j):</span><br><span class="line">    if not 0&lt;&#x3D;i&lt;row or not 0&lt;&#x3D;j&lt;col:return</span><br><span class="line">    if not grid[i][j]:return</span><br><span class="line">    if seen[i][j]:return </span><br><span class="line">    seen[i][j]&#x3D;1</span><br><span class="line"></span><br><span class="line">    for x,y in road:</span><br><span class="line">        dfs(i+x,j+y)</span><br><span class="line"></span><br><span class="line">for i in range(row):</span><br><span class="line">    for j in range(col):</span><br><span class="line">        if grid[i][j]:</span><br><span class="line">            dfs(i,j)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>需要注意<code>grid[i][j]</code>为(0,1)或(‘0’ , ‘1’)</p>
</blockquote>
<h1 id="岛屿数量"><a href="#岛屿数量" class="headerlink" title="岛屿数量"></a><a href="https://leetcode-cn.com/problems/number-of-islands/" target="_blank" rel="noopener">岛屿数量</a></h1><p>直接套模板就行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def numIslands(self, grid: List[List[str]]) -&gt; int:</span><br><span class="line">        row,col&#x3D;len(grid),len(grid[0])</span><br><span class="line">        seen&#x3D;[[0 for _ in range(col)] for _ in range(row)]</span><br><span class="line">        road&#x3D;[(0,1),(0,-1),(1,0),(-1,0)]</span><br><span class="line"></span><br><span class="line">        def dfs(i,j):</span><br><span class="line">            if not 0&lt;&#x3D;i&lt;row or not 0&lt;&#x3D;j&lt;col:return </span><br><span class="line">            if seen[i][j]:return</span><br><span class="line">            if grid[i][j]&#x3D;&#x3D;&#39;0&#39;:return</span><br><span class="line">            seen[i][j]&#x3D;1</span><br><span class="line">        </span><br><span class="line">            for m,n in road:</span><br><span class="line">                dfs(i+m,j+n)</span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line">        res&#x3D;0</span><br><span class="line">        for i in range(row):</span><br><span class="line">            for j in range(col):</span><br><span class="line">                if grid[i][j]&#x3D;&#x3D;&#39;1&#39; and not seen[i][j]:</span><br><span class="line">                    dfs(i,j)</span><br><span class="line">                    res+&#x3D;1</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>



<h1 id="岛屿的最大面积"><a href="#岛屿的最大面积" class="headerlink" title="岛屿的最大面积"></a><a href="https://leetcode-cn.com/problems/max-area-of-island/" target="_blank" rel="noopener">岛屿的最大面积</a></h1><p>注意结束搜索时return 0 且dfs返回：1+dfs(上)+dfs(下)+dfs(左)+dfs(右)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def maxAreaOfIsland(self, grid: List[List[int]]) -&gt; int:</span><br><span class="line">        row,col&#x3D;len(grid),len(grid[0])</span><br><span class="line">        seen&#x3D;[[0 for _ in range(col)] for _ in range(row)]</span><br><span class="line">        road&#x3D;[(1,0),(-1,0),(0,1),(0,-1)]</span><br><span class="line"></span><br><span class="line">        def dfs(i,j):</span><br><span class="line">            if not 0&lt;&#x3D;i&lt;row or not 0&lt;&#x3D;j&lt;col:return 0</span><br><span class="line">            if not grid[i][j]:return 0</span><br><span class="line">            if seen[i][j]:return 0</span><br><span class="line">            seen[i][j]&#x3D;1</span><br><span class="line">            </span><br><span class="line">            tmp&#x3D;1	# 注意tmp不是0</span><br><span class="line">            for m,n in road:</span><br><span class="line">                tmp+&#x3D;dfs(i+m,j+n)</span><br><span class="line">            return tmp</span><br><span class="line">        </span><br><span class="line">        res&#x3D;0</span><br><span class="line">        for i in range(row):</span><br><span class="line">            for j in range(col):</span><br><span class="line">                if grid[i][j]:</span><br><span class="line">                    res&#x3D;max(res,dfs(i,j))</span><br><span class="line"></span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>



<h1 id="最大人工岛"><a href="#最大人工岛" class="headerlink" title="最大人工岛"></a><a href="https://leetcode-cn.com/problems/making-a-large-island/" target="_blank" rel="noopener">最大人工岛</a></h1><p>做两次DFS，第一次标记不同岛屿及其面积；第二次对每一个海洋，寻找其能串联的不同岛屿的面积之和</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def largestIsland(self, grid: List[List[int]]) -&gt; int:</span><br><span class="line">        n&#x3D;len(grid)</span><br><span class="line">        if 0 not in [i for j in grid for i in j]:return n*n # 【全是岛屿】的情况</span><br><span class="line">        seen&#x3D;[[0 for _ in range(n)] for _ in range(n)]</span><br><span class="line">        road&#x3D;[(0,1),(0,-1),(1,0),(-1,0)]</span><br><span class="line"></span><br><span class="line">        def dfs(i,j,cnt):</span><br><span class="line">            if not 0&lt;&#x3D;i&lt;n or not 0&lt;&#x3D;j&lt;n:return 0</span><br><span class="line">            if not grid[i][j]:return 0</span><br><span class="line">            if seen[i][j]:return 0</span><br><span class="line">            seen[i][j]&#x3D;cnt</span><br><span class="line"></span><br><span class="line">            tmp&#x3D;1</span><br><span class="line">            for x,y in road:</span><br><span class="line">                tmp+&#x3D;dfs(i+x,j+y,cnt)</span><br><span class="line">            return tmp</span><br><span class="line"></span><br><span class="line">        cnt&#x3D;2   # 标记不同岛屿</span><br><span class="line">        mark&#x3D;&#123;0:0&#125; # 记录每个岛屿面积;初始为&#123;0,0&#125;是为了预防 【全是海洋】的情况</span><br><span class="line">        for i in range(n):</span><br><span class="line">            for j in range(n):</span><br><span class="line">                if grid[i][j]:</span><br><span class="line">                    area&#x3D;dfs(i,j,cnt)</span><br><span class="line">                    if area:mark.setdefault(cnt,area)   </span><br><span class="line">                    cnt+&#x3D;1</span><br><span class="line">        </span><br><span class="line">        # 对每一个海洋，最多能串联的岛屿面积为其(上下左右)的不同岛屿的面积之和+1</span><br><span class="line">        res&#x3D;0</span><br><span class="line">        for i in range(n):</span><br><span class="line">            for j in range(n):</span><br><span class="line">                if not grid[i][j]:</span><br><span class="line">                    tmp&#x3D;set()   # 去除相同岛屿</span><br><span class="line">                    for x,y in road:</span><br><span class="line">                        if 0&lt;&#x3D;i+x&lt;n and  0&lt;&#x3D;j+y&lt;n:</span><br><span class="line">                            tmp.add(seen[i+x][j+y])</span><br><span class="line">                    area&#x3D;1</span><br><span class="line">                    for t in tmp:</span><br><span class="line">                        area+&#x3D;mark[t]</span><br><span class="line">                    </span><br><span class="line">                    res&#x3D;max(res,area)</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>



<h1 id="岛屿的周长"><a href="#岛屿的周长" class="headerlink" title="岛屿的周长"></a><a href="https://leetcode-cn.com/problems/island-perimeter/" target="_blank" rel="noopener">岛屿的周长</a></h1><p>岛屿的周长，实际上就是由dfs停止搜索时的遇到的边界构成：</p>
<ul>
<li>当遇到边界而停止搜索时，岛屿增加一条边</li>
<li>当遇到海洋而停止搜索时，岛屿增加一条边</li>
<li>当遇到已搜而停止搜索时，岛屿不增加边</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def islandPerimeter(self, grid: List[List[int]]) -&gt; int:</span><br><span class="line">        row,col&#x3D;len(grid),len(grid[0])</span><br><span class="line">        seen&#x3D;[[0 for _ in range(col)] for _ in range(row)]</span><br><span class="line">        road&#x3D;[(0,1),(0,-1),(1,0),(-1,0)]</span><br><span class="line"></span><br><span class="line">        def dfs(i,j):</span><br><span class="line">            if not 0&lt;&#x3D;i&lt;row or not 0&lt;&#x3D;j&lt;col:return 1</span><br><span class="line">            if not grid[i][j]:return 1</span><br><span class="line">            if seen[i][j]:return 0</span><br><span class="line">            seen[i][j]&#x3D;1</span><br><span class="line"></span><br><span class="line">            tmp&#x3D;0</span><br><span class="line">            for x,y in road:</span><br><span class="line">                tmp+&#x3D;dfs(i+x,j+y)</span><br><span class="line">            return tmp</span><br><span class="line">        </span><br><span class="line">        for i in range(row):</span><br><span class="line">            for j in range(col):</span><br><span class="line">                if grid[i][j]:</span><br><span class="line">                    return dfs(i,j)</span><br></pre></td></tr></table></figure>



<h1 id="统计子岛屿"><a href="#统计子岛屿" class="headerlink" title="统计子岛屿"></a><a href="https://leetcode-cn.com/problems/count-sub-islands/" target="_blank" rel="noopener">统计子岛屿</a></h1><p>与<a href="https://leetcode-cn.com/problems/number-of-islands/" target="_blank" rel="noopener">岛屿数量</a>是一样的做法，只不过需要再用<strong>path</strong>记录每个岛屿包含的格子</p>
<p>当一个岛屿的所有格子都被包含在grid1中时,res+=1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def countSubIslands(self, grid1: List[List[int]], grid2: List[List[int]]) -&gt; int:</span><br><span class="line">        row,col&#x3D;len(grid1),len(grid1[0])</span><br><span class="line">        seen&#x3D;[[0 for _ in range(col)] for _ in range(row)]</span><br><span class="line">        road&#x3D;[(0,1),(0,-1),(1,0),(-1,0)]</span><br><span class="line"></span><br><span class="line">        def dfs(i,j,path):</span><br><span class="line">            if not 0&lt;&#x3D;i&lt;row or not 0&lt;&#x3D;j&lt;col:return </span><br><span class="line">            if seen[i][j]:return</span><br><span class="line">            if not grid2[i][j]:return</span><br><span class="line">            seen[i][j]&#x3D;1</span><br><span class="line">            path.append((i,j))</span><br><span class="line"></span><br><span class="line">            for m,n in road:</span><br><span class="line">                dfs(i+m,j+n,path)</span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line">        res&#x3D;0</span><br><span class="line">        for i in range(row):</span><br><span class="line">            for j in range(col):</span><br><span class="line">                if grid2[i][j] and not seen[i][j]:</span><br><span class="line">                    path&#x3D;[]</span><br><span class="line">                    dfs(i,j,path)</span><br><span class="line">                    flag&#x3D;1</span><br><span class="line">                    for p in path:</span><br><span class="line">                        if not grid1[p[0]][p[1]]:</span><br><span class="line">                            flag&#x3D;0</span><br><span class="line">                            break</span><br><span class="line">                    res+&#x3D;flag</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>



<h1 id="统计封闭岛屿的数目"><a href="#统计封闭岛屿的数目" class="headerlink" title="统计封闭岛屿的数目"></a><a href="https://leetcode-cn.com/problems/number-of-closed-islands/" target="_blank" rel="noopener">统计封闭岛屿的数目</a></h1><p>从边界退出的，不是封闭岛屿</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def closedIsland(self, grid: List[List[int]]) -&gt; int:</span><br><span class="line">        row,col&#x3D;len(grid),len(grid[0])</span><br><span class="line">        seen&#x3D;[[0 for _ in range(col)] for _ in range(row)]</span><br><span class="line">        road&#x3D;[(0,1),(0,-1),(1,0),(-1,0)]</span><br><span class="line"></span><br><span class="line">        def dfs(i,j,flag):</span><br><span class="line">            if not 0&lt;&#x3D;i&lt;row or not 0&lt;&#x3D;j&lt;col:</span><br><span class="line">                flag[0]&#x3D;0</span><br><span class="line">                return </span><br><span class="line">            if seen[i][j]:return</span><br><span class="line">            if grid[i][j]:return</span><br><span class="line">            seen[i][j]&#x3D;1</span><br><span class="line">        </span><br><span class="line">            for m,n in road:</span><br><span class="line">                dfs(i+m,j+n,flag)</span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line">        res&#x3D;0</span><br><span class="line">        for i in range(row):</span><br><span class="line">            for j in range(col):</span><br><span class="line">                if not grid[i][j] and not seen[i][j]:</span><br><span class="line">                    flag&#x3D;[1]</span><br><span class="line">                    dfs(i,j,flag)</span><br><span class="line">                    res+&#x3D;flag[0]</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以试试用变量flag=1代替flag=[1]，看看结果对不对</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
        <category>刷题模板</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>购物篮分析-python实现</title>
    <url>/posts/8f98394c/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>实际上，我做的是超级简化版.</p>
<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a><strong>题目：</strong></h2><p>下面每一行是一个购物小票，直到遇到五个零00000，输入序列终止，每个字母表示一种商品（字母区分大小写，即a 和A代表不同的产品），请分析哪两个种产品的销售相关性最高：</p>
<p>样例输入：</p>
<p>AABZXY</p>
<p>BMNY</p>
<p>CD</p>
<p>CBYPQ</p>
<p>BWVCY</p>
<p>00000</p>
<p>输出(字幕顺序按ASC码升序排列)：</p>
<p>BY     </p>
<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from __future__ import print_function</span><br><span class="line">def main():</span><br><span class="line">    dic&#x3D;&#123;&#125;</span><br><span class="line">    list1&#x3D;[]</span><br><span class="line">    a&#x3D;input()</span><br><span class="line">    while a!&#x3D;&quot;00000&quot;:</span><br><span class="line">        list1.append(a)</span><br><span class="line">        a &#x3D; input()</span><br><span class="line"></span><br><span class="line">    for i in range(0,len(list1)):</span><br><span class="line">        str&#x3D;[]</span><br><span class="line">        for j in range(0,len(list1[i])):</span><br><span class="line">            for k in range(j+1,len(list1[i])):</span><br><span class="line">                str.append(list1[i][j]+list1[i][k])</span><br><span class="line">        max &#x3D; 0</span><br><span class="line">        for i in range(0, len(str)):</span><br><span class="line">            dic[str[i]] &#x3D; dic.get(str[i], 0) + 1</span><br><span class="line">            if dic.get(str[i], 0) &gt; max:</span><br><span class="line">                max &#x3D; dic.get(str[i], 0)</span><br><span class="line">                answer &#x3D; str[i]</span><br><span class="line">#按ASCII码输出</span><br><span class="line">    an&#x3D;[]</span><br><span class="line">    for i in range(0,len(answer)):</span><br><span class="line">        an.append(answer[i])</span><br><span class="line">    an.sort()</span><br><span class="line">    for i in range(0,len(an)):</span><br><span class="line">        print(an[i],end&#x3D;&quot;&quot;)</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>ps.我忘记加去重了，所以这个代码还有点问题。</p>
<p>以后再改。</p>
<h3 id="小故事：啤酒与尿布"><a href="#小故事：啤酒与尿布" class="headerlink" title="小故事：啤酒与尿布"></a><em>小故事：啤酒与尿布</em></h3><ul>
<li><strong>故事内容</strong></li>
</ul>
<p>这个故事发生于20世纪90年代的美国超市中，超市管理人员分析销售数据时发现了一个令人难于理解的现象：在某些特定的情况下，“啤酒”与“尿布”两件看上去毫无关系的商品会经常出现在同一个购物篮中，这种独特的销售现象引起了管理人员的注意，经过后续调查发现，这种现象出现在年轻的父亲身上。</p>
<ul>
<li><strong>故事起因</strong></li>
</ul>
<p>在美国有婴儿的家庭中，一般是母亲在家中照看婴儿，年轻的父亲前去超市购买尿布。父亲在购买尿布的同时，往往会顺便为自己购买啤酒，这样就会出现啤酒与尿布这两件看上去不相干的商品经常会出现在同一个购物篮的现象。</p>
<p>如果这个年轻的父亲在卖场只能买到两件商品之一，则他很有可能会放弃购物而到另一家商店，直到可以一次同时买到啤酒与尿布为止。</p>
<p>超市发现了这一独特的现象，开始在卖场尝试将啤酒与尿布摆放在相同的区域，让年轻的父亲可以同时找到这两件商品，并很快地完成购物。</p>
<ul>
<li><strong>故事小结</strong></li>
</ul>
<p>这个故事是因为有数据分析的结果支持才会获得成功并得到广泛传播，通过分析购物篮中的商品集合数据，找出商品之间的关联关系，发现客户的购买行为，从而获得更多的商品销售收入。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化之Excel操作</title>
    <url>/posts/29c936ed/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>我们利用<code>xlwt</code>库进行Excel的自动化操作</p>
<h1 id="实战操作演示"><a href="#实战操作演示" class="headerlink" title="实战操作演示"></a>实战操作演示</h1><ol>
<li><p>创建一个workbook</p>
<p><code>wb = xlwt.Workbook()</code></p>
</li>
<li><p>添加一个excel sheet页</p>
<p><code>ws = wb.add_sheet(&#39;XXX表&#39;)</code></p>
</li>
<li><p>定义行或列</p>
<blockquote>
<p>注意行和列都是从0开始计算的</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">col_0 = ws.col(<span class="number">0</span>)</span><br><span class="line">col_1 = ws.col(<span class="number">1</span>)</span><br><span class="line">col_2 = ws.col(<span class="number">2</span>)</span><br><span class="line">……………………</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置列宽</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">col_0.width = <span class="number">230</span> * <span class="number">20</span></span><br><span class="line">col_2.width = <span class="number">230</span> * <span class="number">20</span></span><br><span class="line">…………</span><br></pre></td></tr></table></figure>
</li>
<li><p>填写表头</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ws.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">"ID"</span>)</span><br><span class="line">ws.write(<span class="number">0</span>, <span class="number">1</span>, <span class="string">"名称"</span>)</span><br><span class="line">ws.write(<span class="number">0</span>, <span class="number">2</span>, <span class="string">"简介"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>写入数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dates = md.get_date()  <span class="comment"># 获取数据的接口</span></span><br><span class="line"><span class="keyword">for</span> i,d <span class="keyword">in</span> enumerate(dates):</span><br><span class="line">    ws.write(i + <span class="number">1</span>, <span class="number">0</span>, d.id)</span><br><span class="line">    ws.write(i + <span class="number">1</span>, <span class="number">1</span>, d.name)</span><br><span class="line">    ws.write(i + <span class="number">1</span>, <span class="number">2</span>, d.intro)</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成路径与文件名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">now = datetime.datetime.now().strftime(<span class="string">"%Y%m%d%H%M%S"</span>)  <span class="comment"># 获取当前时间，作为文件名后缀</span></span><br><span class="line">path = <span class="string">"/static/excel/"</span>  <span class="comment"># 保存 Excel 的相对路径</span></span><br><span class="line">fileName = <span class="string">"dates_"</span> + now + <span class="string">".xls"</span>  <span class="comment"># Excel 文件名</span></span><br><span class="line">basedir = os.path.dirname(__file__)</span><br><span class="line">print(<span class="string">"路径为"</span> + basedir)</span><br><span class="line">file_path = basedir + path  <span class="comment"># 保存 Excel 的绝对路径</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_path):  <span class="comment"># 判断目录是否存在</span></span><br><span class="line">    os.makedirs(file_path)  <span class="comment"># 目录不存在则创建</span></span><br><span class="line">file_path = file_path + fileName  <span class="comment"># 需要保存的文件</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>保存Excel文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(file_path, <span class="string">'r'</span>)</span><br><span class="line">    f.close()</span><br><span class="line"><span class="keyword">except</span> IOError:</span><br><span class="line">    f = open(file_path, <span class="string">'w'</span>)</span><br><span class="line">    f.close()</span><br><span class="line">wb.save(file_path)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h1 id="flask导出数据到Excel"><a href="#flask导出数据到Excel" class="headerlink" title="flask导出数据到Excel"></a>flask导出数据到Excel</h1><p>在html上添加js:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--导出excel--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../static/js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">exportExcel</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            cache: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"POST"</span>,</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/exportExcel"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="keyword">async</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">            error: <span class="function"><span class="keyword">function</span> <span class="params">(request)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(result)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.location.href = result;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            complete: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            error: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                layer.msg(<span class="string">'导出失败，请重试！'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在flask中添加路由函数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route("/exportExcel", methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exportExcel</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>函数部分按上述教程编写即可</p>
]]></content>
      <categories>
        <category>自动化</category>
      </categories>
      <tags>
        <tag>自动化</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化之Word操作</title>
    <url>/posts/bcc03fee/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>利用<code>docx</code>库进行Word的自动化操作。</p>
<h1 id="实战操作演示"><a href="#实战操作演示" class="headerlink" title="实战操作演示"></a>实战操作演示</h1><blockquote>
<p>实现论文字体<strong>格式</strong>的控制（懒得自己手动改了属于是QAQ）</p>
<ul>
<li>通过docx库实例化document对象，获取文本</li>
<li>通过font.name、font.size等属性，设置文本的字体与字号等属性</li>
</ul>
</blockquote>
<ol>
<li><p><strong>生成文档</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file_name&#x3D;&#39;xxx.docx&#39;</span><br><span class="line">doc&#x3D;Doc(file_name)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加标题</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">doc.AddParaText(title_text,22,18,0,1,&#39;隶书&#39;)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加摘要和关键字</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abstr&#x3D;doc.AddParaText(&#39;摘 要：&#39;,12,18,0,0,&#39;宋体&#39;)</span><br><span class="line">doc.AddRunText(abstr,abstract_text)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kw&#x3D;doc.AddParaText(&#39;关键字：&#39;,12,18,0,0,&#39;宋体&#39;)</span><br><span class="line">doc.AddRunText(kw,keywords_text)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加正文</strong></p>
<blockquote>
<p>分情况选择各种字号</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">doc.AddParaText(f&#39;&#123;h.text()&#125;&#39;,16,18,0,0,&#39;宋体&#39;)#16-三号</span><br><span class="line">doc.AddParaText(f&#39;&#123;h.text()&#125;&#39;,14,18,0,0,&#39;宋体&#39;)#14-四号</span><br><span class="line">doc.AddParaText(f&#39;&#123;h.text()&#125;&#39;,12,18,0,0,&#39;宋体&#39;)#12-小四</span><br><span class="line">doc.AddParaText(f&#39;&#123;h.text()&#125;&#39;,10.5,18,1,0,&#39;宋体&#39;)#10.5-五号</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加参考文献</strong></p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ref&#x3D;doc.AddParaText(&#39;参考文献\n&#39;,16,18,0,0,&#39;宋体&#39;)</span><br><span class="line">doc.AddRunText(ref, reference_text,10.5)</span><br></pre></td></tr></table></figure>



<h1 id="合并docx文档"><a href="#合并docx文档" class="headerlink" title="合并docx文档"></a>合并docx文档</h1><blockquote>
<p>利用<code>docxcompose.composer</code>库，可以实现带格式以及图片的docx文档合并</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> docxcompose.composer <span class="keyword">import</span> Composer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combine_word_documents</span><span class="params">(file_name1,file_name2)</span>:</span></span><br><span class="line">    file1 = Document(file_name1)</span><br><span class="line">    file2 = Document(file_name2)</span><br><span class="line">    composer = Composer(file1)</span><br><span class="line">    composer.append(file2)</span><br><span class="line">    composer.save(<span class="string">"combined.docx"</span>)</span><br></pre></td></tr></table></figure>



<h1 id="关键函数"><a href="#关键函数" class="headerlink" title="关键函数"></a>关键函数</h1><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;from docx.oxml.ns import qn	# 注意中文字体格式需要qn进行设置</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 默认英文&#39;Times New Roman&#39;,中文front_name设置</span><br><span class="line">def AddParaText(self,text, size, space, thickness, position,front_name):</span><br><span class="line">    p &#x3D; self.document.add_paragraph()</span><br><span class="line">    p.paragraph_format.line_spacing &#x3D; Pt(20)  # 行距20磅</span><br><span class="line">    # 0: 靠左;1: 居中</span><br><span class="line">    if position &#x3D;&#x3D; 0:</span><br><span class="line">        p.paragraph_format.alignment &#x3D; WD_PARAGRAPH_ALIGNMENT.LEFT</span><br><span class="line">    else :</span><br><span class="line">        p.paragraph_format.alignment &#x3D; WD_PARAGRAPH_ALIGNMENT.CENTER</span><br><span class="line">    p.paragraph_format.space_before &#x3D; Pt(space)</span><br><span class="line">    text &#x3D; p.add_run(text)</span><br><span class="line">    # 0: 加粗;1: 不加粗</span><br><span class="line">    if thickness &#x3D;&#x3D; 1:</span><br><span class="line">        text.bold &#x3D; False</span><br><span class="line">    else:</span><br><span class="line">        text.bold &#x3D; True</span><br><span class="line">    text.font.name &#x3D; &#39;Times New Roman&#39;</span><br><span class="line">    text.element.rPr.rFonts.set(qn(&#39;w:eastAsia&#39;), front_name)</span><br><span class="line">    text.font.size &#x3D; Pt(size)</span><br><span class="line">    self.document.save(self.file_name)</span><br><span class="line">    return p</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def AddRunText(self,p,text,bond&#x3D;False,size&#x3D;12): # 默认12磅(小四号)</span><br><span class="line">    r&#x3D;p.add_run(text)</span><br><span class="line">    r.font.name&#x3D;&#39;Times New Roman&#39;</span><br><span class="line">    r.font.size &#x3D; Pt(size)</span><br><span class="line">    r.element.rPr.rFonts.set(qn(&#39;w:eastAsia&#39;), &#39;宋体&#39;)</span><br><span class="line">    self.document.save(self.file_name)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>自动化</category>
      </categories>
      <tags>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化之文本朗读</title>
    <url>/posts/b5303796/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="pyttsx3"><a href="#pyttsx3" class="headerlink" title="pyttsx3"></a>pyttsx3</h1><p>文本朗读功能主要利用了<code>pyttsx3</code>库，该库可以实现文字转语音功能</p>
<p>官方文档：<a href="https://pyttsx3.readthedocs.io/en/latest/engine.html" target="_blank" rel="noopener">https://pyttsx3.readthedocs.io/en/latest/engine.html</a></p>
<p>下面来看详细说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class ReadInner(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def strReadInner(self, str):</span><br><span class="line">        engine &#x3D; pyttsx3.init()</span><br><span class="line">        engine.say(str)</span><br><span class="line">        engine.runAndWait()</span><br><span class="line"></span><br><span class="line">    def fileReadInner(self, filename):</span><br><span class="line">        engine &#x3D; pyttsx3.init()</span><br><span class="line"></span><br><span class="line">        # 设置发音速率，默认值为200</span><br><span class="line">        rate &#x3D; engine.getProperty(&#39;rate&#39;)</span><br><span class="line">        engine.setProperty(&#39;rate&#39;, rate - 30)</span><br><span class="line"></span><br><span class="line">        # 设置发音大小，范围为0.0-1.0</span><br><span class="line">        volume &#x3D; engine.getProperty(&#39;volume&#39;)</span><br><span class="line">        engine.setProperty(&#39;volume&#39;, 0.6)</span><br><span class="line"></span><br><span class="line">        # 需要自己下载语音包安装</span><br><span class="line">        # 0：汉语女声；1：英语男声；2：英语女声；3：日语女声；4：韩语女声；5：英语女声；6：粤语女声；7：台语女声</span><br><span class="line">        voices &#x3D; engine.getProperty(&#39;voices&#39;)</span><br><span class="line">        voices &#x3D; engine.setProperty(&#39;voice&#39;, voices[0].id)</span><br><span class="line"></span><br><span class="line">        if os.path.exists(filename):</span><br><span class="line">            with open(filename, &#39;r&#39;,encoding&#x3D;&#39;utf-8&#39;) as file:</span><br><span class="line">                line &#x3D; file.readline()</span><br><span class="line">                while line:</span><br><span class="line">                    engine.say(line)</span><br><span class="line">                    line &#x3D; file.readline()</span><br><span class="line">        else:</span><br><span class="line">            with open(filename, &#39;w&#39;) as file:</span><br><span class="line">                print(&#39;Create a new file named %s&#39; % filename)</span><br><span class="line">        engine.runAndWait()</span><br><span class="line"></span><br><span class="line">    # 检查已有的语音包</span><br><span class="line">    def checkExistedVoicePack(self):</span><br><span class="line">        engine &#x3D; pyttsx3.init()  # 初始化</span><br><span class="line">        voices &#x3D; engine.getProperty(&#39;voices&#39;)</span><br><span class="line">        for voice in voices:</span><br><span class="line">            print(&#39;id &#x3D; &#123;&#125; \nname &#x3D; &#123;&#125; \n&#39;.format(voice.id, voice.name))</span><br></pre></td></tr></table></figure>

<p>注释已经很详细了~</p>
<h1 id="微软小冰"><a href="#微软小冰" class="headerlink" title="微软小冰"></a>微软小冰</h1><p><a href="https://azure.microsoft.com/en-us/services/cognitive-services/text-to-speech/#overview" target="_blank" rel="noopener">https://azure.microsoft.com/en-us/services/cognitive-services/text-to-speech/#overview</a></p>
<p><code>暂不知如何调用，待更</code></p>
]]></content>
      <categories>
        <category>自动化</category>
      </categories>
      <tags>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>算法之数学知识</title>
    <url>/posts/8e54e93f/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="判定质数-试除法"><a href="#判定质数-试除法" class="headerlink" title="判定质数(试除法)"></a>判定质数(试除法)</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from math import sqrt</span><br><span class="line"></span><br><span class="line">def is_prime(x):</span><br><span class="line">    if x&lt;2:return False</span><br><span class="line">    sup&#x3D;int(sqrt(x))</span><br><span class="line">    for i in range(2,sup+1):</span><br><span class="line">        if x%i&#x3D;&#x3D;0:</span><br><span class="line">            return False</span><br><span class="line">    return True</span><br></pre></td></tr></table></figure>



<h1 id="分解质因数-试除法"><a href="#分解质因数-试除法" class="headerlink" title="分解质因数(试除法)"></a>分解质因数(试除法)</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def divide(x):</span><br><span class="line">    sup&#x3D;int(sqrt(x))</span><br><span class="line">    for i in range(2,sup+1):</span><br><span class="line">        s&#x3D;0</span><br><span class="line">        while(x%i&#x3D;&#x3D;0):</span><br><span class="line">            x&#x2F;&#x2F;&#x3D;i</span><br><span class="line">            s+&#x3D;1</span><br><span class="line">        if s&gt;0:print(i,s,sep&#x3D;&quot;^&quot;)</span><br><span class="line">    if x&gt;1:</span><br><span class="line">        print(x,1,sep&#x3D;&quot;^&quot;)</span><br></pre></td></tr></table></figure>



<h1 id="求质数表-朴素筛法"><a href="#求质数表-朴素筛法" class="headerlink" title="求质数表(朴素筛法)"></a>求质数表(朴素筛法)</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def get_primes(n):</span><br><span class="line">    primes&#x3D;[] # primes[]存储所有素数</span><br><span class="line">    st&#x3D;[0]*0x3ff # st[x]存储x是否被筛掉，0x3ff表示数据最大范围</span><br><span class="line">    </span><br><span class="line">    for i in range(2,n+1):</span><br><span class="line">        if st[i]: continue</span><br><span class="line">        primes.append(i)</span><br><span class="line">        for j in range(i+i,n+1,i):</span><br><span class="line">            st[j]&#x3D;1</span><br><span class="line">    return primes</span><br></pre></td></tr></table></figure>



<h1 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h1><p><strong>最大公约数:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 迭代写法</span><br><span class="line">def gcd(a,b):</span><br><span class="line">    while b:</span><br><span class="line">        a,b&#x3D;b,a%b</span><br><span class="line">    return a</span><br><span class="line">    </span><br><span class="line"># 递归写法</span><br><span class="line">def gcd(a,b):</span><br><span class="line">    if not a%b:return b</span><br><span class="line">    return gcd(b,a%b)</span><br></pre></td></tr></table></figure>

<p><strong>最小公倍数：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def lcm(a,b):</span><br><span class="line">    return a*b&#x2F;&#x2F;gcd(a,b)</span><br></pre></td></tr></table></figure>



<h1 id="快速幂-减治"><a href="#快速幂-减治" class="headerlink" title="快速幂(减治)"></a>快速幂(减治)</h1><p>python内置pow也是快速幂：<code>pow(base,exp[,mod])</code></p>
<p>注意还有一个是<code>math.pow(x,y)</code></p>
<blockquote>
<p>Unlike the built-in ** operator, math.pow() converts both its arguments to type float.</p>
<p>Use ** or the built-in pow() function for computing exact integer powers</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def fastExpMod(a,b,p): # a^b % p</span><br><span class="line">    a&#x3D;a%p</span><br><span class="line">    ans&#x3D;1</span><br><span class="line">    while b!&#x3D;0:</span><br><span class="line">        if b&amp;1:</span><br><span class="line">            ans&#x3D;(ans*a)%p</span><br><span class="line">        b&gt;&gt;&#x3D;1</span><br><span class="line">        a&#x3D;(a*a)%p</span><br><span class="line">    return ans</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里再补充一个小知识：<strong>费马小定理</strong></p>
<p>p为质数，a为任意自然数，则</p>
<p>$a^p \equiv a(\mod p)$</p>
<p>或者$a^{p-1} \equiv 1(\mod p)$</p>
</blockquote>
<h1 id="求组合数-递归"><a href="#求组合数-递归" class="headerlink" title="求组合数(递归)"></a>求组合数(递归)</h1><p>计算$C_n^m % p$</p>
<blockquote>
<p>利用递推公式：$C^m_n = C^m_{n-1} + C^{m-1}_{n-1}$</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def helper(n,m,p): # 实际上把0x3ff范围内的所有组合数都计算出来了</span><br><span class="line">    res&#x3D;[[0 for _ in range(0x3ff)] for _ in range(0x3ff)] </span><br><span class="line">    for i in range(0x3ff):</span><br><span class="line">        for j in range(i+1):</span><br><span class="line">            if not j:</span><br><span class="line">                res[i][j]&#x3D;1</span><br><span class="line">            else:</span><br><span class="line">                res[i][j]&#x3D;(res[i-1][j]+res[i-1][j-1])%p</span><br><span class="line">    return res[n][m]</span><br></pre></td></tr></table></figure>



<h1 id="求欧拉函数"><a href="#求欧拉函数" class="headerlink" title="求欧拉函数"></a>求欧拉函数</h1><p><strong>欧拉函数的定义</strong></p>
<blockquote>
<p>1∼N 中与 N 互质的数的个数被称为欧拉函数，记为 ϕ(N)。<br>若在算数基本定理中，$N=p^{a_1}_1p^{a_2}_2…p^{a_m}_m$，则：<br>$ϕ(N) = N×\frac{p_1−1}{p1}×\frac{p_2−1}{p2}×…×\frac{p_m−1}p{m}$</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def phi(x):</span><br><span class="line">    res&#x3D;x</span><br><span class="line">    sup&#x3D;int(sqrt(x))</span><br><span class="line">    for i in range(2,sup+1):</span><br><span class="line">        if x%i&#x3D;&#x3D;0:</span><br><span class="line">            res&#x3D;res&#x2F;i*(i-1)</span><br><span class="line">            while(x%i&#x3D;&#x3D;0):</span><br><span class="line">                x&#x2F;&#x3D;i</span><br><span class="line">    if x&gt;1:</span><br><span class="line">        res&#x3D;res&#x2F;x*(x-1)</span><br><span class="line">    return res</span><br></pre></td></tr></table></figure>



<h1 id="计算n-中有多少个质因子p"><a href="#计算n-中有多少个质因子p" class="headerlink" title="计算n!中有多少个质因子p"></a>计算n!中有多少个质因子p</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def cal(n,p):</span><br><span class="line">    if n&lt;p:return 0</span><br><span class="line">    return n&#x2F;&#x2F;p+cal(n&#x2F;&#x2F;p,p)</span><br></pre></td></tr></table></figure>



<h1 id="约数"><a href="#约数" class="headerlink" title="约数"></a>约数</h1><p>如果 $N = p_1^{c_1} * p_2^{c_2} * … *p_k^{c_k}$<br>约数个数：$ (c_1 + 1) * (c_2 + 1) * … * (c_k + 1)$<br>约数之和：$ (p_1^0 + p_1^1 + … + p_1^{c_1}) * … * (p_k^0 + p_k^1 + … + p_k^{c_k})$</p>
<h1 id="卡特兰数"><a href="#卡特兰数" class="headerlink" title="卡特兰数"></a>卡特兰数</h1><p>给定n个0和n个1，它们按照某种顺序排成长度为2n的序列，满足任意前缀中0的个数都不少于1的个数的序列的数量为：</p>
<p>$ Cat(n) = \frac{C_{2n}^{n}} {(n + 1)}$</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>刷题模板</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化之文件重命名</title>
    <url>/posts/34529492/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h1><blockquote>
<p>对于很多图片一类的文件，时常会需要对其混乱的文件名进行整理</p>
<p>因此就有了这一个自动化重命名小工具</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rename</span><span class="params">()</span>:</span></span><br><span class="line">    path=input(<span class="string">r"请输入绝对路径(如C:\Users\admin\Desktop\rename):"</span>)</span><br><span class="line">    name=input(<span class="string">u"请输入新文件名的开头（如pic001.jpg的pic):"</span>)</span><br><span class="line">    fileType=input(<span class="string">u"请输入后缀名（如 .jpg、.txt等等）:"</span>)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">u"正在生成以"</span>+name+<span class="string">'XXX'</span>+fileType+<span class="string">"迭代的文件名"</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    filelist=os.listdir(path)</span><br><span class="line">    <span class="keyword">for</span> i,files <span class="keyword">in</span> enumerate(filelist):</span><br><span class="line">        Old_dir=os.path.join(path,files)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(Old_dir):  <span class="comment"># 对象为目录则不进行重命名</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        New_dir=os.path.join(path,name+str(i)+fileType)</span><br><span class="line">        os.rename(Old_dir,New_dir)</span><br><span class="line"> </span><br><span class="line">        </span><br><span class="line">    print(<span class="string">u"一共修改了"</span>+str(len(filelist))+<span class="string">"个文件"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    rename()</span><br></pre></td></tr></table></figure>

<p>注意，在出现<code>\</code>转义符号的字符串前，需加上<code>r</code>(raw, 原生字符)标识，否则报错</p>
<p><code>[SyntaxError: (unicode error) &#39;unicodeescape&#39; codec can&#39;t decode bytes in position 2-3: truncated \UXXXXXXXX escape]</code></p>
]]></content>
      <categories>
        <category>自动化</category>
      </categories>
      <tags>
        <tag>自动化</tag>
      </tags>
  </entry>
</search>
